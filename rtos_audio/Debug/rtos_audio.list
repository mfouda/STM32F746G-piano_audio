
rtos_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002228  0800ce94  0800ce94  0001ce94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0bc  0800f0bc  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0bc  0800f0bc  0001f0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0c4  0800f0c4  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0c4  0800f0c4  0001f0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0c8  0800f0c8  0001f0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800f0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fd8  20000060  0800f124  00020060  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20005038  0800f124  00025038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   000327fe  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fdf  00000000  00000000  00052886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002950  00000000  00000000  00058868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002700  00000000  00000000  0005b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008efa  00000000  00000000  0005d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002decd  00000000  00000000  000667b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ae22  00000000  00000000  0009467f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001af4a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000afdc  00000000  00000000  001af4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce7c 	.word	0x0800ce7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800ce7c 	.word	0x0800ce7c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000512:	20c8      	movs	r0, #200	; 0xc8
 8000514:	f001 fdb6 	bl	8002084 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000518:	f000 f9b4 	bl	8000884 <ft5336_I2C_InitializeIfRequired>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af00      	add	r7, sp, #0
 8000540:	4603      	mov	r3, r0
 8000542:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800054c:	2300      	movs	r3, #0
 800054e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000550:	f000 f998 	bl	8000884 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e010      	b.n	800057c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	21a8      	movs	r1, #168	; 0xa8
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fd71 	bl	8002048 <TS_IO_Read>
 8000566:	4603      	mov	r3, r0
 8000568:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800056a:	7b7b      	ldrb	r3, [r7, #13]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b51      	cmp	r3, #81	; 0x51
 8000570:	d101      	bne.n	8000576 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	3301      	adds	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d802      	bhi.n	8000588 <ft5336_ReadID+0x4e>
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0e8      	beq.n	800055a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000588:	7b7b      	ldrb	r3, [r7, #13]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	b29b      	uxth	r3, r3
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f97e 	bl	80008a4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f932 	bl	8000814 <ft5336_TS_DisableIT>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fd3b 	bl	8002048 <TS_IO_Read>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d901      	bls.n	80005ee <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <ft5336_TS_DetectTouch+0x50>)
 80005f4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <ft5336_TS_DetectTouch+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000007c 	.word	0x2000007c

0800060c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800062e:	4b6d      	ldr	r3, [pc, #436]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 8000630:	789a      	ldrb	r2, [r3, #2]
 8000632:	4b6c      	ldr	r3, [pc, #432]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	429a      	cmp	r2, r3
 8000638:	f080 80cf 	bcs.w	80007da <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800063c:	4b69      	ldr	r3, [pc, #420]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	2b09      	cmp	r3, #9
 8000642:	d871      	bhi.n	8000728 <ft5336_TS_GetXY+0x11c>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <ft5336_TS_GetXY+0x40>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	08000675 	.word	0x08000675
 8000650:	08000687 	.word	0x08000687
 8000654:	08000699 	.word	0x08000699
 8000658:	080006ab 	.word	0x080006ab
 800065c:	080006bd 	.word	0x080006bd
 8000660:	080006cf 	.word	0x080006cf
 8000664:	080006e1 	.word	0x080006e1
 8000668:	080006f3 	.word	0x080006f3
 800066c:	08000705 	.word	0x08000705
 8000670:	08000717 	.word	0x08000717
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000674:	2304      	movs	r3, #4
 8000676:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000678:	2303      	movs	r3, #3
 800067a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800067c:	2306      	movs	r3, #6
 800067e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000680:	2305      	movs	r3, #5
 8000682:	753b      	strb	r3, [r7, #20]
      break;
 8000684:	e051      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000686:	230a      	movs	r3, #10
 8000688:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800068a:	2309      	movs	r3, #9
 800068c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800068e:	230c      	movs	r3, #12
 8000690:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000692:	230b      	movs	r3, #11
 8000694:	753b      	strb	r3, [r7, #20]
      break;
 8000696:	e048      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000698:	2310      	movs	r3, #16
 800069a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800069c:	230f      	movs	r3, #15
 800069e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006a0:	2312      	movs	r3, #18
 80006a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006a4:	2311      	movs	r3, #17
 80006a6:	753b      	strb	r3, [r7, #20]
      break;
 80006a8:	e03f      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006aa:	2316      	movs	r3, #22
 80006ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006ae:	2315      	movs	r3, #21
 80006b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006b2:	2318      	movs	r3, #24
 80006b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006b6:	2317      	movs	r3, #23
 80006b8:	753b      	strb	r3, [r7, #20]
      break;
 80006ba:	e036      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006bc:	231c      	movs	r3, #28
 80006be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006c0:	231b      	movs	r3, #27
 80006c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006c4:	231e      	movs	r3, #30
 80006c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006c8:	231d      	movs	r3, #29
 80006ca:	753b      	strb	r3, [r7, #20]
      break;
 80006cc:	e02d      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80006ce:	2322      	movs	r3, #34	; 0x22
 80006d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80006d2:	2321      	movs	r3, #33	; 0x21
 80006d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80006d6:	2324      	movs	r3, #36	; 0x24
 80006d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80006da:	2323      	movs	r3, #35	; 0x23
 80006dc:	753b      	strb	r3, [r7, #20]
      break;
 80006de:	e024      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80006e0:	2328      	movs	r3, #40	; 0x28
 80006e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80006e4:	2327      	movs	r3, #39	; 0x27
 80006e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80006e8:	232a      	movs	r3, #42	; 0x2a
 80006ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80006ec:	2329      	movs	r3, #41	; 0x29
 80006ee:	753b      	strb	r3, [r7, #20]
      break;
 80006f0:	e01b      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80006f2:	232e      	movs	r3, #46	; 0x2e
 80006f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80006f6:	232d      	movs	r3, #45	; 0x2d
 80006f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80006fa:	2330      	movs	r3, #48	; 0x30
 80006fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80006fe:	232f      	movs	r3, #47	; 0x2f
 8000700:	753b      	strb	r3, [r7, #20]
      break;
 8000702:	e012      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000704:	2334      	movs	r3, #52	; 0x34
 8000706:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000708:	2333      	movs	r3, #51	; 0x33
 800070a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800070c:	2336      	movs	r3, #54	; 0x36
 800070e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000710:	2335      	movs	r3, #53	; 0x35
 8000712:	753b      	strb	r3, [r7, #20]
      break;
 8000714:	e009      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000716:	233a      	movs	r3, #58	; 0x3a
 8000718:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800071a:	2339      	movs	r3, #57	; 0x39
 800071c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800071e:	233c      	movs	r3, #60	; 0x3c
 8000720:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000722:	233b      	movs	r3, #59	; 0x3b
 8000724:	753b      	strb	r3, [r7, #20]
      break;
 8000726:	e000      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000728:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800072a:	89fb      	ldrh	r3, [r7, #14]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	7dfa      	ldrb	r2, [r7, #23]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fc88 	bl	8002048 <TS_IO_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800073c:	7cfb      	ldrb	r3, [r7, #19]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000744:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	7dba      	ldrb	r2, [r7, #22]
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fc7a 	bl	8002048 <TS_IO_Read>
 8000754:	4603      	mov	r3, r0
 8000756:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000758:	7cfb      	ldrb	r3, [r7, #19]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000762:	b21a      	sxth	r2, r3
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000772:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800077c:	89fb      	ldrh	r3, [r7, #14]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	7d7a      	ldrb	r2, [r7, #21]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fc5f 	bl	8002048 <TS_IO_Read>
 800078a:	4603      	mov	r3, r0
 800078c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000796:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	7d3a      	ldrb	r2, [r7, #20]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fc51 	bl	8002048 <TS_IO_Read>
 80007a6:	4603      	mov	r3, r0
 80007a8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007c4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	3301      	adds	r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 80007d8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000007c 	.word	0x2000007c
 80007e8:	20000080 	.word	0x20000080

080007ec <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	21a4      	movs	r1, #164	; 0xa4
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fc04 	bl	8002014 <TS_IO_Write>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	21a4      	movs	r1, #164	; 0xa4
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fbf0 	bl	8002014 <TS_IO_Write>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000872:	781b      	ldrb	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2000007c 	.word	0x2000007c

08000884 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000888:	f7ff fff0 	bl	800086c <ft5336_Get_I2C_InitializedStatus>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d104      	bne.n	800089c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000892:	f001 fbb5 	bl	8002000 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000896:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
  }
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000007c 	.word	0x2000007c

080008a4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80008b2:	68fb      	ldr	r3, [r7, #12]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b0a6      	sub	sp, #152	; 0x98
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f003 fd9c 	bl	8004402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f915 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f000 ffc3 	bl	8001858 <MX_GPIO_Init>
  MX_ADC3_Init();
 80008d2:	f000 fa27 	bl	8000d24 <MX_ADC3_Init>
  MX_I2C1_Init();
 80008d6:	f000 fad3 	bl	8000e80 <MX_I2C1_Init>
  MX_I2C3_Init();
 80008da:	f000 fb11 	bl	8000f00 <MX_I2C3_Init>
  MX_LTDC_Init();
 80008de:	f000 fb4f 	bl	8000f80 <MX_LTDC_Init>
  MX_RTC_Init();
 80008e2:	f000 fbcf 	bl	8001084 <MX_RTC_Init>
  MX_SPI2_Init();
 80008e6:	f000 fc73 	bl	80011d0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80008ea:	f000 fcaf 	bl	800124c <MX_TIM1_Init>
  MX_TIM2_Init();
 80008ee:	f000 fd01 	bl	80012f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008f2:	f000 fd4d 	bl	8001390 <MX_TIM3_Init>
  MX_TIM5_Init();
 80008f6:	f000 fdd9 	bl	80014ac <MX_TIM5_Init>
  MX_TIM8_Init();
 80008fa:	f000 fe25 	bl	8001548 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80008fe:	f000 fefd 	bl	80016fc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000902:	f000 ff2b 	bl	800175c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000906:	f000 f9bb 	bl	8000c80 <MX_ADC1_Init>
  MX_DAC_Init();
 800090a:	f000 fa5d 	bl	8000dc8 <MX_DAC_Init>
  MX_UART7_Init();
 800090e:	f000 fec5 	bl	800169c <MX_UART7_Init>
  MX_FMC_Init();
 8000912:	f000 ff53 	bl	80017bc <MX_FMC_Init>
  MX_DMA2D_Init();
 8000916:	f000 fa81 	bl	8000e1c <MX_DMA2D_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800091a:	f000 f99d 	bl	8000c58 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800091e:	f001 fcf3 	bl	8002308 <BSP_LCD_GetXSize>
 8000922:	4603      	mov	r3, r0
 8000924:	b29c      	uxth	r4, r3
 8000926:	f001 fd03 	bl	8002330 <BSP_LCD_GetYSize>
 800092a:	4603      	mov	r3, r0
 800092c:	b29b      	uxth	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	4620      	mov	r0, r4
 8000932:	f002 fb45 	bl	8002fc0 <BSP_TS_Init>
  BSP_LCD_Init();
 8000936:	f001 fc77 	bl	8002228 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800093a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800093e:	2000      	movs	r0, #0
 8000940:	f001 fd0a 	bl	8002358 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1,
		  LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000944:	f001 fce0 	bl	8002308 <BSP_LCD_GetXSize>
 8000948:	4604      	mov	r4, r0
 800094a:	f001 fcf1 	bl	8002330 <BSP_LCD_GetYSize>
 800094e:	4603      	mov	r3, r0
 8000950:	fb03 f304 	mul.w	r3, r3, r4
 8000954:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
  BSP_LCD_LayerDefaultInit(1,
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4619      	mov	r1, r3
 800095c:	2001      	movs	r0, #1
 800095e:	f001 fcfb 	bl	8002358 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000962:	f001 ff5f 	bl	8002824 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(1);
 8000966:	2001      	movs	r0, #1
 8000968:	f001 fd56 	bl	8002418 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800096c:	484f      	ldr	r0, [pc, #316]	; (8000aac <main+0x1ec>)
 800096e:	f001 fdc5 	bl	80024fc <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8000972:	484f      	ldr	r0, [pc, #316]	; (8000ab0 <main+0x1f0>)
 8000974:	f001 fd92 	bl	800249c <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000978:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800097c:	f001 fd74 	bl	8002468 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8000980:	484c      	ldr	r0, [pc, #304]	; (8000ab4 <main+0x1f4>)
 8000982:	f001 fd59 	bl	8002438 <BSP_LCD_SetTextColor>


  /* Initialize SDRAM buffers */
  memset((uint16_t*) AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
 8000986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098a:	2100      	movs	r1, #0
 800098c:	484a      	ldr	r0, [pc, #296]	; (8000ab8 <main+0x1f8>)
 800098e:	f00c fa6d 	bl	800ce6c <memset>
  memset((uint16_t*) AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8000992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000996:	2100      	movs	r1, #0
 8000998:	4848      	ldr	r0, [pc, #288]	; (8000abc <main+0x1fc>)
 800099a:	f00c fa67 	bl	800ce6c <memset>
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800099e:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <main+0x200>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]

  /* Start Recording */
  BSP_AUDIO_IN_Record((uint16_t*) AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 80009a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a8:	4843      	ldr	r0, [pc, #268]	; (8000ab8 <main+0x1f8>)
 80009aa:	f001 fbfb 	bl	80021a4 <BSP_AUDIO_IN_Record>

  /* Start Playback */
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80009ae:	2005      	movs	r0, #5
 80009b0:	f001 fb9e 	bl	80020f0 <BSP_AUDIO_OUT_SetAudioFrameSlot>
  BSP_AUDIO_OUT_Play((uint16_t*)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2);
 80009b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b8:	4840      	ldr	r0, [pc, #256]	; (8000abc <main+0x1fc>)
 80009ba:	f001 fb6f 	bl	800209c <BSP_AUDIO_OUT_Play>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of affichage */
  osMutexDef(affichage);
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  affichageHandle = osMutexCreate(osMutex(affichage));
 80009ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a fc83 	bl	800b2da <osMutexCreate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a3b      	ldr	r2, [pc, #236]	; (8000ac4 <main+0x204>)
 80009d8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueP2V */
  osMessageQDef(myQueueP2V, 3, uint16_t);
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <main+0x208>)
 80009dc:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80009e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueP2VHandle = osMessageCreate(osMessageQ(myQueueP2V), NULL);
 80009e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f00a fc8c 	bl	800b30a <osMessageCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a35      	ldr	r2, [pc, #212]	; (8000acc <main+0x20c>)
 80009f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 2, uint8_t);
 80009f8:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <main+0x210>)
 80009fa:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000a04:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f00a fc7d 	bl	800b30a <osMessageCreate>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4a30      	ldr	r2, [pc, #192]	; (8000ad4 <main+0x214>)
 8000a14:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <main+0x218>)
 8000a18:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a1c:	461d      	mov	r5, r3
 8000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f00a fbf2 	bl	800b21a <osThreadCreate>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <main+0x21c>)
 8000a3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Time */
  osThreadDef(Time, GetTime, osPriorityNormal, 0, 1024);
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <main+0x220>)
 8000a3e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a42:	461d      	mov	r5, r3
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimeHandle = osThreadCreate(osThread(Time), NULL);
 8000a50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f00a fbdf 	bl	800b21a <osThreadCreate>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <main+0x224>)
 8000a60:	6013      	str	r3, [r2, #0]

  /* definition and creation of Souris */
  osThreadDef(Souris, MouseTask, osPriorityAboveNormal, 0, 1024);
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <main+0x228>)
 8000a64:	f107 041c 	add.w	r4, r7, #28
 8000a68:	461d      	mov	r5, r3
 8000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SourisHandle = osThreadCreate(osThread(Souris), NULL);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f00a fbcc 	bl	800b21a <osThreadCreate>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <main+0x22c>)
 8000a86:	6013      	str	r3, [r2, #0]

  /* definition and creation of Chat */
  osThreadDef(Chat, CatTask, osPriorityAboveNormal, 0, 1024);
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <main+0x230>)
 8000a8a:	463c      	mov	r4, r7
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ChatHandle = osThreadCreate(osThread(Chat), NULL);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00a fbbb 	bl	800b21a <osThreadCreate>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <main+0x234>)
 8000aa8:	6013      	str	r3, [r2, #0]

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //AudioPlay_demo();
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <main+0x1ea>
 8000aac:	ff0000ff 	.word	0xff0000ff
 8000ab0:	2000003c 	.word	0x2000003c
 8000ab4:	ff8080ff 	.word	0xff8080ff
 8000ab8:	c0115800 	.word	0xc0115800
 8000abc:	c0115c00 	.word	0xc0115c00
 8000ac0:	20004eb4 	.word	0x20004eb4
 8000ac4:	20004c14 	.word	0x20004c14
 8000ac8:	0800ceb8 	.word	0x0800ceb8
 8000acc:	20004c18 	.word	0x20004c18
 8000ad0:	0800cec8 	.word	0x0800cec8
 8000ad4:	20004eb8 	.word	0x20004eb8
 8000ad8:	0800ced8 	.word	0x0800ced8
 8000adc:	200048bc 	.word	0x200048bc
 8000ae0:	0800cef4 	.word	0x0800cef4
 8000ae4:	20004d00 	.word	0x20004d00
 8000ae8:	0800cf10 	.word	0x0800cf10
 8000aec:	200048b8 	.word	0x200048b8
 8000af0:	0800cf2c 	.word	0x0800cf2c
 8000af4:	20004ce8 	.word	0x20004ce8

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0b4      	sub	sp, #208	; 0xd0
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00c f9b0 	bl	800ce6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2284      	movs	r2, #132	; 0x84
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00c f9a1 	bl	800ce6c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b2a:	f006 faa5 	bl	8007078 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <SystemClock_Config+0x154>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <SystemClock_Config+0x154>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b44      	ldr	r3, [pc, #272]	; (8000c4c <SystemClock_Config+0x154>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b46:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <SystemClock_Config+0x158>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a41      	ldr	r2, [pc, #260]	; (8000c50 <SystemClock_Config+0x158>)
 8000b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <SystemClock_Config+0x158>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b80:	2319      	movs	r3, #25
 8000b82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000b86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b94:	2309      	movs	r3, #9
 8000b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 faca 	bl	8007138 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000baa:	f001 f8b3 	bl	8001d14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bae:	f006 fa73 	bl	8007098 <HAL_PWREx_EnableOverDrive>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bb8:	f001 f8ac 	bl	8001d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000be2:	2106      	movs	r1, #6
 8000be4:	4618      	mov	r0, r3
 8000be6:	f006 fd4b 	bl	8007680 <HAL_RCC_ClockConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000bf0:	f001 f890 	bl	8001d14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <SystemClock_Config+0x15c>)
 8000bf6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000bf8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bfc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c06:	2303      	movs	r3, #3
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4618      	mov	r0, r3
 8000c34:	f006 ff2c 	bl	8007a90 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c3e:	f001 f869 	bl	8001d14 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	37d0      	adds	r7, #208	; 0xd0
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000
 8000c54:	00015868 	.word	0x00015868

08000c58 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2107      	movs	r1, #7
 8000c60:	2017      	movs	r0, #23
 8000c62:	f003 ff5f 	bl	8004b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c66:	2017      	movs	r0, #23
 8000c68:	f003 ff78 	bl	8004b5c <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2107      	movs	r1, #7
 8000c70:	2028      	movs	r0, #40	; 0x28
 8000c72:	f003 ff57 	bl	8004b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c76:	2028      	movs	r0, #40	; 0x28
 8000c78:	f003 ff70 	bl	8004b5c <HAL_NVIC_EnableIRQ>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000c94:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <MX_ADC1_Init+0x9c>)
 8000c96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000c9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <MX_ADC1_Init+0xa0>)
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000ce2:	f003 fbdf 	bl	80044a4 <HAL_ADC_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cec:	f001 f812 	bl	8001d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_ADC1_Init+0x98>)
 8000d02:	f003 fc13 	bl	800452c <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d0c:	f001 f802 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20004bcc 	.word	0x20004bcc
 8000d1c:	40012000 	.word	0x40012000
 8000d20:	0f000001 	.word	0x0f000001

08000d24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <MX_ADC3_Init+0x9c>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d42:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <MX_ADC3_Init+0xa0>)
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000d86:	f003 fb8d 	bl	80044a4 <HAL_ADC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d90:	f000 ffc0 	bl	8001d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d94:	2306      	movs	r3, #6
 8000d96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_ADC3_Init+0x98>)
 8000da6:	f003 fbc1 	bl	800452c <HAL_ADC_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000db0:	f000 ffb0 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20004c1c 	.word	0x20004c1c
 8000dc0:	40012200 	.word	0x40012200
 8000dc4:	0f000001 	.word	0x0f000001

08000dc8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_DAC_Init+0x4c>)
 8000dd8:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <MX_DAC_Init+0x50>)
 8000dda:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <MX_DAC_Init+0x4c>)
 8000dde:	f003 fecb 	bl	8004b78 <HAL_DAC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000de8:	f000 ff94 	bl	8001d14 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <MX_DAC_Init+0x4c>)
 8000dfc:	f003 ff42 	bl	8004c84 <HAL_DAC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e06:	f000 ff85 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20004cec 	.word	0x20004cec
 8000e18:	40007400 	.word	0x40007400

08000e1c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <MX_DMA2D_Init+0x60>)
 8000e24:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e52:	f004 fa4f 	bl	80052f4 <HAL_DMA2D_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e5c:	f000 ff5a 	bl	8001d14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e60:	2101      	movs	r1, #1
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_DMA2D_Init+0x5c>)
 8000e64:	f004 fba4 	bl	80055b0 <HAL_DMA2D_ConfigLayer>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e6e:	f000 ff51 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20004df4 	.word	0x20004df4
 8000e7c:	4002b000 	.word	0x4002b000

08000e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <MX_I2C1_Init+0x78>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <MX_I2C1_Init+0x7c>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000ebc:	f004 ffb4 	bl	8005e28 <HAL_I2C_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ec6:	f000 ff25 	bl	8001d14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000ece:	f005 fcc3 	bl	8006858 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 ff1c 	bl	8001d14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_I2C1_Init+0x74>)
 8000ee0:	f005 fd05 	bl	80068ee <HAL_I2CEx_ConfigDigitalFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 ff13 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20004a40 	.word	0x20004a40
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	00c0eaff 	.word	0x00c0eaff

08000f00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <MX_I2C3_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <MX_I2C3_Init+0x7c>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f3c:	f004 ff74 	bl	8005e28 <HAL_I2C_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f46:	f000 fee5 	bl	8001d14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f4e:	f005 fc83 	bl	8006858 <HAL_I2CEx_ConfigAnalogFilter>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f58:	f000 fedc 	bl	8001d14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_I2C3_Init+0x74>)
 8000f60:	f005 fcc5 	bl	80068ee <HAL_I2CEx_ConfigDigitalFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 fed3 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200048c0 	.word	0x200048c0
 8000f78:	40005c00 	.word	0x40005c00
 8000f7c:	00c0eaff 	.word	0x00c0eaff

08000f80 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2234      	movs	r2, #52	; 0x34
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00b ff6d 	bl	800ce6c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <MX_LTDC_Init+0xfc>)
 8000f94:	4a3a      	ldr	r2, [pc, #232]	; (8001080 <MX_LTDC_Init+0x100>)
 8000f96:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f98:	4b38      	ldr	r3, [pc, #224]	; (800107c <MX_LTDC_Init+0xfc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fa4:	4b35      	ldr	r3, [pc, #212]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000fb0:	4b32      	ldr	r3, [pc, #200]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fb2:	2228      	movs	r2, #40	; 0x28
 8000fb4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fb8:	2209      	movs	r2, #9
 8000fba:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fbe:	2235      	movs	r2, #53	; 0x35
 8000fc0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fc4:	220b      	movs	r2, #11
 8000fc6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fca:	f240 2215 	movw	r2, #533	; 0x215
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fd2:	f240 121b 	movw	r2, #283	; 0x11b
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fda:	f240 2235 	movw	r2, #565	; 0x235
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fe2:	f240 121d 	movw	r2, #285	; 0x11d
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_LTDC_Init+0xfc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_LTDC_Init+0xfc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_LTDC_Init+0xfc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001000:	481e      	ldr	r0, [pc, #120]	; (800107c <MX_LTDC_Init+0xfc>)
 8001002:	f005 fcc1 	bl	8006988 <HAL_LTDC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800100c:	f000 fe82 	bl	8001d14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001014:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001018:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800101e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001022:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001024:	2302      	movs	r3, #2
 8001026:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001028:	23ff      	movs	r3, #255	; 0xff
 800102a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001030:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001034:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001036:	2307      	movs	r3, #7
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800103a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001040:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001046:	f44f 7388 	mov.w	r3, #272	; 0x110
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_LTDC_Init+0xfc>)
 8001066:	f005 fe21 	bl	8006cac <HAL_LTDC_ConfigLayer>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001070:	f000 fe50 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3738      	adds	r7, #56	; 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20004b24 	.word	0x20004b24
 8001080:	40016800 	.word	0x40016800

08001084 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b092      	sub	sp, #72	; 0x48
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800108a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	222c      	movs	r2, #44	; 0x2c
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00b fee0 	bl	800ce6c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010ac:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <MX_RTC_Init+0x144>)
 80010ae:	4a47      	ldr	r2, [pc, #284]	; (80011cc <MX_RTC_Init+0x148>)
 80010b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <MX_RTC_Init+0x144>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010b8:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <MX_RTC_Init+0x144>)
 80010ba:	227f      	movs	r2, #127	; 0x7f
 80010bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <MX_RTC_Init+0x144>)
 80010c0:	22ff      	movs	r2, #255	; 0xff
 80010c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010c4:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <MX_RTC_Init+0x144>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <MX_RTC_Init+0x144>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010d0:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <MX_RTC_Init+0x144>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010d6:	483c      	ldr	r0, [pc, #240]	; (80011c8 <MX_RTC_Init+0x144>)
 80010d8:	f007 fa0e 	bl	80084f8 <HAL_RTC_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010e2:	f000 fe17 	bl	8001d14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 80010e6:	2311      	movs	r3, #17
 80010e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 15;
 80010ec:	230f      	movs	r3, #15
 80010ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001100:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	482f      	ldr	r0, [pc, #188]	; (80011c8 <MX_RTC_Init+0x144>)
 800110a:	f007 fa87 	bl	800861c <HAL_RTC_SetTime>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001114:	f000 fdfe 	bl	8001d14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001118:	2301      	movs	r3, #1
 800111a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800111e:	2301      	movs	r3, #1
 8001120:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4823      	ldr	r0, [pc, #140]	; (80011c8 <MX_RTC_Init+0x144>)
 800113a:	f007 fb2d 	bl	8008798 <HAL_RTC_SetDate>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001144:	f000 fde6 	bl	8001d14 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	4812      	ldr	r0, [pc, #72]	; (80011c8 <MX_RTC_Init+0x144>)
 8001180:	f007 fbb2 	bl	80088e8 <HAL_RTC_SetAlarm>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800118a:	f000 fdc3 	bl	8001d14 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800118e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <MX_RTC_Init+0x144>)
 800119c:	f007 fba4 	bl	80088e8 <HAL_RTC_SetAlarm>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80011a6:	f000 fdb5 	bl	8001d14 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80011aa:	2202      	movs	r2, #2
 80011ac:	2100      	movs	r1, #0
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_RTC_Init+0x144>)
 80011b0:	f007 fd24 	bl	8008bfc <HAL_RTCEx_SetTimeStamp>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80011ba:	f000 fdab 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3748      	adds	r7, #72	; 0x48
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20004d04 	.word	0x20004d04
 80011cc:	40002800 	.word	0x40002800

080011d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_SPI2_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_SPI2_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_SPI2_Init+0x74>)
 80011dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_SPI2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_SPI2_Init+0x74>)
 80011ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_SPI2_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_SPI2_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_SPI2_Init+0x74>)
 80011fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001202:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_SPI2_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_SPI2_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_SPI2_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_SPI2_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_SPI2_Init+0x74>)
 800121e:	2207      	movs	r2, #7
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_SPI2_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_SPI2_Init+0x74>)
 800122a:	2208      	movs	r2, #8
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_SPI2_Init+0x74>)
 8001230:	f007 fdb9 	bl	8008da6 <HAL_SPI_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 fd6b 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000490c 	.word	0x2000490c
 8001248:	40003800 	.word	0x40003800

0800124c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_TIM1_Init+0xa0>)
 800126c:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <MX_TIM1_Init+0xa4>)
 800126e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_TIM1_Init+0xa0>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <MX_TIM1_Init+0xa0>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_TIM1_Init+0xa0>)
 800127e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001282:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_TIM1_Init+0xa0>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_TIM1_Init+0xa0>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_TIM1_Init+0xa0>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001296:	4815      	ldr	r0, [pc, #84]	; (80012ec <MX_TIM1_Init+0xa0>)
 8001298:	f007 fe30 	bl	8008efc <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012a2:	f000 fd37 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <MX_TIM1_Init+0xa0>)
 80012b4:	f008 f982 	bl	80095bc <HAL_TIM_ConfigClockSource>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012be:	f000 fd29 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <MX_TIM1_Init+0xa0>)
 80012d4:	f008 feca 	bl	800a06c <HAL_TIMEx_MasterConfigSynchronization>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012de:	f000 fd19 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20004d24 	.word	0x20004d24
 80012f0:	40010000 	.word	0x40010000

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MX_TIM2_Init+0x98>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001318:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_TIM2_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_TIM2_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_TIM2_Init+0x98>)
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_TIM2_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_TIM2_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_TIM2_Init+0x98>)
 800133c:	f007 fdde 	bl	8008efc <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001346:	f000 fce5 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_TIM2_Init+0x98>)
 8001358:	f008 f930 	bl	80095bc <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001362:	f000 fcd7 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <MX_TIM2_Init+0x98>)
 8001374:	f008 fe7a 	bl	800a06c <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800137e:	f000 fcc9 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20004e34 	.word	0x20004e34

08001390 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b094      	sub	sp, #80	; 0x50
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <MX_TIM3_Init+0x114>)
 80013d4:	4a34      	ldr	r2, [pc, #208]	; (80014a8 <MX_TIM3_Init+0x118>)
 80013d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013d8:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <MX_TIM3_Init+0x114>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <MX_TIM3_Init+0x114>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <MX_TIM3_Init+0x114>)
 80013e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_TIM3_Init+0x114>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <MX_TIM3_Init+0x114>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f8:	482a      	ldr	r0, [pc, #168]	; (80014a4 <MX_TIM3_Init+0x114>)
 80013fa:	f007 fd7f 	bl	8008efc <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001404:	f000 fc86 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001412:	4619      	mov	r1, r3
 8001414:	4823      	ldr	r0, [pc, #140]	; (80014a4 <MX_TIM3_Init+0x114>)
 8001416:	f008 f8d1 	bl	80095bc <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001420:	f000 fc78 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001424:	481f      	ldr	r0, [pc, #124]	; (80014a4 <MX_TIM3_Init+0x114>)
 8001426:	f007 fe39 	bl	800909c <HAL_TIM_PWM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8001430:	f000 fc70 	bl	8001d14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800143c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001440:	4619      	mov	r1, r3
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <MX_TIM3_Init+0x114>)
 8001444:	f008 f980 	bl	8009748 <HAL_TIM_SlaveConfigSynchro>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800144e:	f000 fc61 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	4619      	mov	r1, r3
 8001460:	4810      	ldr	r0, [pc, #64]	; (80014a4 <MX_TIM3_Init+0x114>)
 8001462:	f008 fe03 	bl	800a06c <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800146c:	f000 fc52 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001470:	2360      	movs	r3, #96	; 0x60
 8001472:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <MX_TIM3_Init+0x114>)
 8001488:	f007 ff88 	bl	800939c <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001492:	f000 fc3f 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM3_Init+0x114>)
 8001498:	f002 f946 	bl	8003728 <HAL_TIM_MspPostInit>

}
 800149c:	bf00      	nop
 800149e:	3750      	adds	r7, #80	; 0x50
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20004ad8 	.word	0x20004ad8
 80014a8:	40000400 	.word	0x40000400

080014ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <MX_TIM5_Init+0x94>)
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <MX_TIM5_Init+0x98>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_TIM5_Init+0x94>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM5_Init+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_TIM5_Init+0x94>)
 80014de:	f04f 32ff 	mov.w	r2, #4294967295
 80014e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_TIM5_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM5_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_TIM5_Init+0x94>)
 80014f2:	f007 fd03 	bl	8008efc <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80014fc:	f000 fc0a 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <MX_TIM5_Init+0x94>)
 800150e:	f008 f855 	bl	80095bc <HAL_TIM_ConfigClockSource>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 fbfc 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_TIM5_Init+0x94>)
 800152a:	f008 fd9f 	bl	800a06c <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001534:	f000 fbee 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20004a8c 	.word	0x20004a8c
 8001544:	40000c00 	.word	0x40000c00

08001548 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b09a      	sub	sp, #104	; 0x68
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	222c      	movs	r2, #44	; 0x2c
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f00b fc72 	bl	800ce6c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <MX_TIM8_Init+0x14c>)
 800158a:	4a43      	ldr	r2, [pc, #268]	; (8001698 <MX_TIM8_Init+0x150>)
 800158c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <MX_TIM8_Init+0x14c>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <MX_TIM8_Init+0x14c>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800159a:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <MX_TIM8_Init+0x14c>)
 800159c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <MX_TIM8_Init+0x14c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015a8:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <MX_TIM8_Init+0x14c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b39      	ldr	r3, [pc, #228]	; (8001694 <MX_TIM8_Init+0x14c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015b4:	4837      	ldr	r0, [pc, #220]	; (8001694 <MX_TIM8_Init+0x14c>)
 80015b6:	f007 fca1 	bl	8008efc <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80015c0:	f000 fba8 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ce:	4619      	mov	r1, r3
 80015d0:	4830      	ldr	r0, [pc, #192]	; (8001694 <MX_TIM8_Init+0x14c>)
 80015d2:	f007 fff3 	bl	80095bc <HAL_TIM_ConfigClockSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80015dc:	f000 fb9a 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015e0:	482c      	ldr	r0, [pc, #176]	; (8001694 <MX_TIM8_Init+0x14c>)
 80015e2:	f007 fd5b 	bl	800909c <HAL_TIM_PWM_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80015ec:	f000 fb92 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001600:	4619      	mov	r1, r3
 8001602:	4824      	ldr	r0, [pc, #144]	; (8001694 <MX_TIM8_Init+0x14c>)
 8001604:	f008 fd32 	bl	800a06c <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800160e:	f000 fb81 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	; 0x60
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800162a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162e:	220c      	movs	r2, #12
 8001630:	4619      	mov	r1, r3
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_TIM8_Init+0x14c>)
 8001634:	f007 feb2 	bl	800939c <HAL_TIM_PWM_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800163e:	f000 fb69 	bl	8001d14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM8_Init+0x14c>)
 8001678:	f008 fd86 	bl	800a188 <HAL_TIMEx_ConfigBreakDeadTime>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001682:	f000 fb47 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM8_Init+0x14c>)
 8001688:	f002 f84e 	bl	8003728 <HAL_TIM_MspPostInit>

}
 800168c:	bf00      	nop
 800168e:	3768      	adds	r7, #104	; 0x68
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200049f4 	.word	0x200049f4
 8001698:	40010400 	.word	0x40010400

0800169c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_UART7_Init+0x58>)
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <MX_UART7_Init+0x5c>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MX_UART7_Init+0x58>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_UART7_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_UART7_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_UART7_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_UART7_Init+0x58>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_UART7_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_UART7_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_UART7_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_UART7_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_UART7_Init+0x58>)
 80016e0:	f008 fdee 	bl	800a2c0 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80016ea:	f000 fb13 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20004970 	.word	0x20004970
 80016f8:	40007800 	.word	0x40007800

080016fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <MX_USART1_UART_Init+0x5c>)
 8001704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001740:	f008 fdbe 	bl	800a2c0 <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800174a:	f000 fae3 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20004c64 	.word	0x20004c64
 8001758:	40011000 	.word	0x40011000

0800175c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MX_USART6_UART_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART6_UART_Init+0x58>)
 80017a0:	f008 fd8e 	bl	800a2c0 <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80017aa:	f000 fab3 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20004d70 	.word	0x20004d70
 80017b8:	40011400 	.word	0x40011400

080017bc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_FMC_Init+0x94>)
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <MX_FMC_Init+0x98>)
 80017d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_FMC_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_FMC_Init+0x94>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_FMC_Init+0x94>)
 80017e8:	2204      	movs	r2, #4
 80017ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_FMC_Init+0x94>)
 80017ee:	2210      	movs	r2, #16
 80017f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_FMC_Init+0x94>)
 80017f4:	2240      	movs	r2, #64	; 0x40
 80017f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_FMC_Init+0x94>)
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_FMC_Init+0x94>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_FMC_Init+0x94>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_FMC_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_FMC_Init+0x94>)
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001816:	2310      	movs	r3, #16
 8001818:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800181a:	2310      	movs	r3, #16
 800181c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800181e:	2310      	movs	r3, #16
 8001820:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001822:	2310      	movs	r3, #16
 8001824:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001826:	2310      	movs	r3, #16
 8001828:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800182a:	2310      	movs	r3, #16
 800182c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800182e:	2310      	movs	r3, #16
 8001830:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <MX_FMC_Init+0x94>)
 8001838:	f007 fa36 	bl	8008ca8 <HAL_SDRAM_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001842:	f000 fa67 	bl	8001d14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001846:	bf00      	nop
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20004e80 	.word	0x20004e80
 8001854:	a0000140 	.word	0xa0000140

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b090      	sub	sp, #64	; 0x40
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186e:	4bb0      	ldr	r3, [pc, #704]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4aaf      	ldr	r2, [pc, #700]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001874:	f043 0310 	orr.w	r3, r3, #16
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4bad      	ldr	r3, [pc, #692]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
 8001884:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4baa      	ldr	r3, [pc, #680]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4aa9      	ldr	r2, [pc, #676]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4ba7      	ldr	r3, [pc, #668]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4ba4      	ldr	r3, [pc, #656]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4aa3      	ldr	r2, [pc, #652]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4ba1      	ldr	r3, [pc, #644]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
 80018b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018b6:	4b9e      	ldr	r3, [pc, #632]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a9d      	ldr	r2, [pc, #628]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b9b      	ldr	r3, [pc, #620]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018ce:	4b98      	ldr	r3, [pc, #608]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a97      	ldr	r2, [pc, #604]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b95      	ldr	r3, [pc, #596]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a91      	ldr	r2, [pc, #580]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b8f      	ldr	r3, [pc, #572]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018fe:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a8b      	ldr	r2, [pc, #556]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b89      	ldr	r3, [pc, #548]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a85      	ldr	r2, [pc, #532]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 800191c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b83      	ldr	r3, [pc, #524]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b80      	ldr	r3, [pc, #512]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a7f      	ldr	r2, [pc, #508]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b7d      	ldr	r3, [pc, #500]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001946:	4b7a      	ldr	r3, [pc, #488]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a79      	ldr	r2, [pc, #484]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 800194c:	f043 0320 	orr.w	r3, r3, #32
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b77      	ldr	r3, [pc, #476]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	4b74      	ldr	r3, [pc, #464]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a73      	ldr	r2, [pc, #460]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b71      	ldr	r3, [pc, #452]	; (8001b30 <MX_GPIO_Init+0x2d8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2160      	movs	r1, #96	; 0x60
 800197a:	486e      	ldr	r0, [pc, #440]	; (8001b34 <MX_GPIO_Init+0x2dc>)
 800197c:	f004 fa16 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	2120      	movs	r1, #32
 8001984:	486c      	ldr	r0, [pc, #432]	; (8001b38 <MX_GPIO_Init+0x2e0>)
 8001986:	f004 fa11 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2108      	movs	r1, #8
 800198e:	486a      	ldr	r0, [pc, #424]	; (8001b38 <MX_GPIO_Init+0x2e0>)
 8001990:	f004 fa0c 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2108      	movs	r1, #8
 8001998:	4868      	ldr	r0, [pc, #416]	; (8001b3c <MX_GPIO_Init+0x2e4>)
 800199a:	f004 fa07 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2108      	movs	r1, #8
 80019a2:	4867      	ldr	r0, [pc, #412]	; (8001b40 <MX_GPIO_Init+0x2e8>)
 80019a4:	f004 fa02 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ae:	4863      	ldr	r0, [pc, #396]	; (8001b3c <MX_GPIO_Init+0x2e4>)
 80019b0:	f004 f9fc 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80019b4:	2200      	movs	r2, #0
 80019b6:	f645 6140 	movw	r1, #24128	; 0x5e40
 80019ba:	4862      	ldr	r0, [pc, #392]	; (8001b44 <MX_GPIO_Init+0x2ec>)
 80019bc:	f004 f9f6 	bl	8005dac <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2108      	movs	r1, #8
 80019c4:	4860      	ldr	r0, [pc, #384]	; (8001b48 <MX_GPIO_Init+0x2f0>)
 80019c6:	f004 f9f1 	bl	8005dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ca:	2308      	movs	r3, #8
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019da:	4619      	mov	r1, r3
 80019dc:	4855      	ldr	r0, [pc, #340]	; (8001b34 <MX_GPIO_Init+0x2dc>)
 80019de:	f003 ff15 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80019e2:	f643 0323 	movw	r3, #14371	; 0x3823
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019f4:	230a      	movs	r3, #10
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	4853      	ldr	r0, [pc, #332]	; (8001b4c <MX_GPIO_Init+0x2f4>)
 8001a00:	f003 ff04 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001a04:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0a:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <MX_GPIO_Init+0x2f8>)
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a16:	4619      	mov	r1, r3
 8001a18:	484e      	ldr	r0, [pc, #312]	; (8001b54 <MX_GPIO_Init+0x2fc>)
 8001a1a:	f003 fef7 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001a1e:	2360      	movs	r3, #96	; 0x60
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a32:	4619      	mov	r1, r3
 8001a34:	483f      	ldr	r0, [pc, #252]	; (8001b34 <MX_GPIO_Init+0x2dc>)
 8001a36:	f003 fee9 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4842      	ldr	r0, [pc, #264]	; (8001b58 <MX_GPIO_Init+0x300>)
 8001a50:	f003 fedc 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a54:	2340      	movs	r3, #64	; 0x40
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a58:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <MX_GPIO_Init+0x304>)
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a64:	4619      	mov	r1, r3
 8001a66:	4834      	ldr	r0, [pc, #208]	; (8001b38 <MX_GPIO_Init+0x2e0>)
 8001a68:	f003 fed0 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001a6c:	2328      	movs	r3, #40	; 0x28
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	4619      	mov	r1, r3
 8001a82:	482d      	ldr	r0, [pc, #180]	; (8001b38 <MX_GPIO_Init+0x2e0>)
 8001a84:	f003 fec2 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001a88:	f241 0308 	movw	r3, #4104	; 0x1008
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4826      	ldr	r0, [pc, #152]	; (8001b3c <MX_GPIO_Init+0x2e4>)
 8001aa2:	f003 feb3 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4829      	ldr	r0, [pc, #164]	; (8001b60 <MX_GPIO_Init+0x308>)
 8001abc:	f003 fea6 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481a      	ldr	r0, [pc, #104]	; (8001b40 <MX_GPIO_Init+0x2e8>)
 8001ad8:	f003 fe98 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001adc:	2310      	movs	r3, #16
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4812      	ldr	r0, [pc, #72]	; (8001b38 <MX_GPIO_Init+0x2e0>)
 8001af0:	f003 fe8c 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001af4:	f248 0304 	movw	r3, #32772	; 0x8004
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b06:	4619      	mov	r1, r3
 8001b08:	480e      	ldr	r0, [pc, #56]	; (8001b44 <MX_GPIO_Init+0x2ec>)
 8001b0a:	f003 fe7f 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001b0e:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b24:	4619      	mov	r1, r3
 8001b26:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_GPIO_Init+0x2ec>)
 8001b28:	f003 fe70 	bl	800580c <HAL_GPIO_Init>
 8001b2c:	e01a      	b.n	8001b64 <MX_GPIO_Init+0x30c>
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40022800 	.word	0x40022800
 8001b44:	40021c00 	.word	0x40021c00
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	10110000 	.word	0x10110000
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40022400 	.word	0x40022400
 8001b5c:	10120000 	.word	0x10120000
 8001b60:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <MX_GPIO_Init+0x3c4>)
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b76:	4619      	mov	r1, r3
 8001b78:	4829      	ldr	r0, [pc, #164]	; (8001c20 <MX_GPIO_Init+0x3c8>)
 8001b7a:	f003 fe47 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b7e:	2310      	movs	r3, #16
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b8e:	230a      	movs	r3, #10
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b96:	4619      	mov	r1, r3
 8001b98:	4822      	ldr	r0, [pc, #136]	; (8001c24 <MX_GPIO_Init+0x3cc>)
 8001b9a:	f003 fe37 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001b9e:	2384      	movs	r3, #132	; 0x84
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bae:	4619      	mov	r1, r3
 8001bb0:	481d      	ldr	r0, [pc, #116]	; (8001c28 <MX_GPIO_Init+0x3d0>)
 8001bb2:	f003 fe2b 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4816      	ldr	r0, [pc, #88]	; (8001c2c <MX_GPIO_Init+0x3d4>)
 8001bd2:	f003 fe1b 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bea:	4619      	mov	r1, r3
 8001bec:	480e      	ldr	r0, [pc, #56]	; (8001c28 <MX_GPIO_Init+0x3d0>)
 8001bee:	f003 fe0d 	bl	800580c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001bf2:	2328      	movs	r3, #40	; 0x28
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c02:	230a      	movs	r3, #10
 8001c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4808      	ldr	r0, [pc, #32]	; (8001c30 <MX_GPIO_Init+0x3d8>)
 8001c0e:	f003 fdfd 	bl	800580c <HAL_GPIO_Init>

}
 8001c12:	bf00      	nop
 8001c14:	3740      	adds	r7, #64	; 0x40
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	10120000 	.word	0x10120000
 8001c20:	40022000 	.word	0x40022000
 8001c24:	40021c00 	.word	0x40021c00
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020000 	.word	0x40020000

08001c34 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the full Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  if(audio_state == AUDIO_STATE_PLAYING)
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d103      	bne.n	8001c48 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  }
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	200008a8 	.word	0x200008a8
 8001c58:	200000a0 	.word	0x200000a0

08001c5c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  if(audio_state == AUDIO_STATE_PLAYING)
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d103      	bne.n	8001c70 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  }
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200008a8 	.word	0x200008a8
 8001c80:	200000a0 	.word	0x200000a0

08001c84 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <BSP_AUDIO_OUT_Error_CallBack+0x24>)
 8001c8a:	f000 fbed 	bl	8002468 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 8001c8e:	4907      	ldr	r1, [pc, #28]	; (8001cac <BSP_AUDIO_OUT_Error_CallBack+0x28>)
 8001c90:	200e      	movs	r0, #14
 8001c92:	f000 fd67 	bl	8002764 <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8001c96:	bf00      	nop
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f000 f841 	bl	8001d20 <BSP_PB_GetState>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
  {
    return;
 8001ca2:	bf00      	nop
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	ffff0000 	.word	0xffff0000
 8001cac:	0800d150 	.word	0x0800d150

08001cb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f009 fafa 	bl	800b2b2 <osDelay>
 8001cbe:	e7fb      	b.n	8001cb8 <StartDefaultTask+0x8>

08001cc0 <GetTime>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetTime */
void GetTime(void const * argument)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetTime */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f009 faf2 	bl	800b2b2 <osDelay>
 8001cce:	e7fb      	b.n	8001cc8 <GetTime+0x8>

08001cd0 <MouseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MouseTask */
void MouseTask(void const * argument)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MouseTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f009 faea 	bl	800b2b2 <osDelay>
 8001cde:	e7fb      	b.n	8001cd8 <MouseTask+0x8>

08001ce0 <CatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CatTask */
void CatTask(void const * argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CatTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f009 fae2 	bl	800b2b2 <osDelay>
 8001cee:	e7fb      	b.n	8001ce8 <CatTask+0x8>

08001cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d02:	f002 fb8b 	bl	800441c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40001000 	.word	0x40001000

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <Error_Handler+0x8>
	...

08001d20 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <BSP_PB_GetState+0x2c>)
 8001d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	4906      	ldr	r1, [pc, #24]	; (8001d50 <BSP_PB_GetState+0x30>)
 8001d36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	f004 f81d 	bl	8005d7c <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000028 	.word	0x20000028
 8001d50:	0800d168 	.word	0x0800d168

08001d54 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a51      	ldr	r2, [pc, #324]	; (8001ea4 <I2Cx_MspInit+0x150>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d14d      	bne.n	8001e00 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d64:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4a4f      	ldr	r2, [pc, #316]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d70:	4b4d      	ldr	r3, [pc, #308]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001d80:	2312      	movs	r3, #18
 8001d82:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	4845      	ldr	r0, [pc, #276]	; (8001eac <I2Cx_MspInit+0x158>)
 8001d98:	f003 fd38 	bl	800580c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	4619      	mov	r1, r3
 8001da8:	4840      	ldr	r0, [pc, #256]	; (8001eac <I2Cx_MspInit+0x158>)
 8001daa:	f003 fd2f 	bl	800580c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001dae:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a37      	ldr	r2, [pc, #220]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001dcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dd0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001dd2:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a34      	ldr	r2, [pc, #208]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001dd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ddc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	210f      	movs	r1, #15
 8001de2:	2048      	movs	r0, #72	; 0x48
 8001de4:	f002 fe9e 	bl	8004b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001de8:	2048      	movs	r0, #72	; 0x48
 8001dea:	f002 feb7 	bl	8004b5c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	210f      	movs	r1, #15
 8001df2:	2049      	movs	r0, #73	; 0x49
 8001df4:	f002 fe96 	bl	8004b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001df8:	2049      	movs	r0, #73	; 0x49
 8001dfa:	f002 feaf 	bl	8004b5c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001dfe:	e04d      	b.n	8001e9c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001e26:	2302      	movs	r3, #2
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	481e      	ldr	r0, [pc, #120]	; (8001eb0 <I2Cx_MspInit+0x15c>)
 8001e36:	f003 fce9 	bl	800580c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <I2Cx_MspInit+0x15c>)
 8001e48:	f003 fce0 	bl	800580c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e56:	6413      	str	r3, [r2, #64]	; 0x40
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a0f      	ldr	r2, [pc, #60]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e6e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <I2Cx_MspInit+0x154>)
 8001e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e7a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	210f      	movs	r1, #15
 8001e80:	201f      	movs	r0, #31
 8001e82:	f002 fe4f 	bl	8004b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001e86:	201f      	movs	r0, #31
 8001e88:	f002 fe68 	bl	8004b5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	210f      	movs	r1, #15
 8001e90:	2020      	movs	r0, #32
 8001e92:	f002 fe47 	bl	8004b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001e96:	2020      	movs	r0, #32
 8001e98:	f002 fe60 	bl	8004b5c <HAL_NVIC_EnableIRQ>
}
 8001e9c:	bf00      	nop
 8001e9e:	3730      	adds	r7, #48	; 0x30
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200008ac 	.word	0x200008ac
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021c00 	.word	0x40021c00
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f004 faa1 	bl	8006404 <HAL_I2C_GetState>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d125      	bne.n	8001f14 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <I2Cx_Init+0x68>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d103      	bne.n	8001ed8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <I2Cx_Init+0x6c>)
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e002      	b.n	8001ede <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <I2Cx_Init+0x70>)
 8001edc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <I2Cx_Init+0x74>)
 8001ee2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff23 	bl	8001d54 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f003 ff8a 	bl	8005e28 <HAL_I2C_Init>
  }
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200008ac 	.word	0x200008ac
 8001f20:	40005c00 	.word	0x40005c00
 8001f24:	40005400 	.word	0x40005400
 8001f28:	40912732 	.word	0x40912732

08001f2c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af04      	add	r7, sp, #16
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	72fb      	strb	r3, [r7, #11]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	813b      	strh	r3, [r7, #8]
 8001f42:	4613      	mov	r3, r2
 8001f44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	b299      	uxth	r1, r3
 8001f4e:	88f8      	ldrh	r0, [r7, #6]
 8001f50:	893a      	ldrh	r2, [r7, #8]
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	9302      	str	r3, [sp, #8]
 8001f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	4603      	mov	r3, r0
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f004 f934 	bl	80061d0 <HAL_I2C_Mem_Read>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001f72:	7afb      	ldrb	r3, [r7, #11]
 8001f74:	4619      	mov	r1, r3
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f832 	bl	8001fe0 <I2Cx_Error>
  }
  return status;    
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b08a      	sub	sp, #40	; 0x28
 8001f8a:	af04      	add	r7, sp, #16
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	4608      	mov	r0, r1
 8001f90:	4611      	mov	r1, r2
 8001f92:	461a      	mov	r2, r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	72fb      	strb	r3, [r7, #11]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	813b      	strh	r3, [r7, #8]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	b299      	uxth	r1, r3
 8001fa8:	88f8      	ldrh	r0, [r7, #6]
 8001faa:	893a      	ldrh	r2, [r7, #8]
 8001fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4603      	mov	r3, r0
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f003 fff3 	bl	8005fa8 <HAL_I2C_Mem_Write>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f805 	bl	8001fe0 <I2Cx_Error>
  }
  return status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f003 ffab 	bl	8005f48 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ff5e 	bl	8001eb4 <I2Cx_Init>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <TS_IO_Init+0x10>)
 8002006:	f7ff ff55 	bl	8001eb4 <I2Cx_Init>
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200008ac 	.word	0x200008ac

08002014 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af02      	add	r7, sp, #8
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	460b      	mov	r3, r1
 8002020:	71bb      	strb	r3, [r7, #6]
 8002022:	4613      	mov	r3, r2
 8002024:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	b29a      	uxth	r2, r3
 800202a:	79f9      	ldrb	r1, [r7, #7]
 800202c:	2301      	movs	r3, #1
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	1d7b      	adds	r3, r7, #5
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	4803      	ldr	r0, [pc, #12]	; (8002044 <TS_IO_Write+0x30>)
 8002038:	f7ff ffa5 	bl	8001f86 <I2Cx_WriteMultiple>
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200008ac 	.word	0x200008ac

08002048 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800205c:	79bb      	ldrb	r3, [r7, #6]
 800205e:	b29a      	uxth	r2, r3
 8002060:	79f9      	ldrb	r1, [r7, #7]
 8002062:	2301      	movs	r3, #1
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	f107 030f 	add.w	r3, r7, #15
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2301      	movs	r3, #1
 800206e:	4804      	ldr	r0, [pc, #16]	; (8002080 <TS_IO_Read+0x38>)
 8002070:	f7ff ff5c 	bl	8001f2c <I2Cx_ReadMultiple>

  return read_value;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200008ac 	.word	0x200008ac

08002084 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f002 f9e5 	bl	800445c <HAL_Delay>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <BSP_AUDIO_OUT_Play+0x4c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	b292      	uxth	r2, r2
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	2034      	movs	r0, #52	; 0x34
 80020b4:	4798      	blx	r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e00f      	b.n	80020e0 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020c6:	d203      	bcs.n	80020d0 <BSP_AUDIO_OUT_Play+0x34>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	e001      	b.n	80020d4 <BSP_AUDIO_OUT_Play+0x38>
 80020d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d4:	461a      	mov	r2, r3
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <BSP_AUDIO_OUT_Play+0x50>)
 80020da:	f001 fe6b 	bl	8003db4 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 80020de:	2300      	movs	r3, #0
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20004f08 	.word	0x20004f08
 80020ec:	200008f8 	.word	0x200008f8

080020f0 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002106:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8002108:	4a08      	ldr	r2, [pc, #32]	; (800212c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800210e:	4807      	ldr	r0, [pc, #28]	; (800212c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002110:	f001 fcd0 	bl	8003ab4 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002122:	601a      	str	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200008f8 	.word	0x200008f8

08002130 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002138:	f7ff fd7c 	bl	8001c34 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800214c:	f7ff fd86 	bl	8001c5c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8002160:	480e      	ldr	r0, [pc, #56]	; (800219c <HAL_SAI_ErrorCallback+0x44>)
 8002162:	f001 ff43 	bl	8003fec <HAL_SAI_GetState>
 8002166:	4603      	mov	r3, r0
 8002168:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800216a:	480d      	ldr	r0, [pc, #52]	; (80021a0 <HAL_SAI_ErrorCallback+0x48>)
 800216c:	f001 ff3e 	bl	8003fec <HAL_SAI_GetState>
 8002170:	4603      	mov	r3, r0
 8002172:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d002      	beq.n	8002180 <HAL_SAI_ErrorCallback+0x28>
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b12      	cmp	r3, #18
 800217e:	d101      	bne.n	8002184 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002180:	f7ff fd80 	bl	8001c84 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002184:	7bbb      	ldrb	r3, [r7, #14]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d002      	beq.n	8002190 <HAL_SAI_ErrorCallback+0x38>
 800218a:	7bbb      	ldrb	r3, [r7, #14]
 800218c:	2b22      	cmp	r3, #34	; 0x22
 800218e:	d101      	bne.n	8002194 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8002190:	f000 f842 	bl	8002218 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200008f8 	.word	0x200008f8
 80021a0:	2000097c 	.word	0x2000097c

080021a4 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <BSP_AUDIO_IN_Record+0x2c>)
 80021bc:	f001 fe88 	bl	8003ed0 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	b2db      	uxtb	r3, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000097c 	.word	0x2000097c

080021d4 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80021dc:	f000 f80e 	bl	80021fc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80021f0:	f000 f80b 	bl	800220a <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <BSP_LCD_Init+0xcc>)
 800222e:	2228      	movs	r2, #40	; 0x28
 8002230:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <BSP_LCD_Init+0xcc>)
 8002234:	2209      	movs	r2, #9
 8002236:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <BSP_LCD_Init+0xcc>)
 800223a:	2235      	movs	r2, #53	; 0x35
 800223c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <BSP_LCD_Init+0xcc>)
 8002240:	220b      	movs	r2, #11
 8002242:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <BSP_LCD_Init+0xcc>)
 8002246:	f240 121b 	movw	r2, #283	; 0x11b
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800224c:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <BSP_LCD_Init+0xcc>)
 800224e:	f240 2215 	movw	r2, #533	; 0x215
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <BSP_LCD_Init+0xcc>)
 8002256:	f240 121d 	movw	r2, #285	; 0x11d
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <BSP_LCD_Init+0xcc>)
 800225e:	f240 2235 	movw	r2, #565	; 0x235
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002264:	2100      	movs	r1, #0
 8002266:	4823      	ldr	r0, [pc, #140]	; (80022f4 <BSP_LCD_Init+0xcc>)
 8002268:	f000 fbd4 	bl	8002a14 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <BSP_LCD_Init+0xcc>)
 800226e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002272:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <BSP_LCD_Init+0xcc>)
 8002276:	f44f 7288 	mov.w	r2, #272	; 0x110
 800227a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <BSP_LCD_Init+0xcc>)
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <BSP_LCD_Init+0xcc>)
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <BSP_LCD_Init+0xcc>)
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <BSP_LCD_Init+0xcc>)
 8002296:	2200      	movs	r2, #0
 8002298:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <BSP_LCD_Init+0xcc>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <BSP_LCD_Init+0xcc>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <BSP_LCD_Init+0xcc>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <BSP_LCD_Init+0xcc>)
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <BSP_LCD_Init+0xd0>)
 80022b0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80022b2:	4810      	ldr	r0, [pc, #64]	; (80022f4 <BSP_LCD_Init+0xcc>)
 80022b4:	f004 fd38 	bl	8006d28 <HAL_LTDC_GetState>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80022be:	2100      	movs	r1, #0
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <BSP_LCD_Init+0xcc>)
 80022c2:	f000 facd 	bl	8002860 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80022c6:	480b      	ldr	r0, [pc, #44]	; (80022f4 <BSP_LCD_Init+0xcc>)
 80022c8:	f004 fb5e 	bl	8006988 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d2:	480a      	ldr	r0, [pc, #40]	; (80022fc <BSP_LCD_Init+0xd4>)
 80022d4:	f003 fd6a 	bl	8005dac <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	2108      	movs	r1, #8
 80022dc:	4808      	ldr	r0, [pc, #32]	; (8002300 <BSP_LCD_Init+0xd8>)
 80022de:	f003 fd65 	bl	8005dac <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80022e2:	f000 fcb7 	bl	8002c54 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <BSP_LCD_Init+0xdc>)
 80022e8:	f000 f8d8 	bl	800249c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20004f0c 	.word	0x20004f0c
 80022f8:	40016800 	.word	0x40016800
 80022fc:	40022000 	.word	0x40022000
 8002300:	40022800 	.word	0x40022800
 8002304:	20000034 	.word	0x20000034

08002308 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <BSP_LCD_GetXSize+0x20>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <BSP_LCD_GetXSize+0x24>)
 8002312:	2134      	movs	r1, #52	; 0x34
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3360      	adds	r3, #96	; 0x60
 800231c:	681b      	ldr	r3, [r3, #0]
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	20000a40 	.word	0x20000a40
 800232c:	20004f0c 	.word	0x20004f0c

08002330 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <BSP_LCD_GetYSize+0x20>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <BSP_LCD_GetYSize+0x24>)
 800233a:	2134      	movs	r1, #52	; 0x34
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	3364      	adds	r3, #100	; 0x64
 8002344:	681b      	ldr	r3, [r3, #0]
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	20000a40 	.word	0x20000a40
 8002354:	20004f0c 	.word	0x20004f0c

08002358 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002358:	b580      	push	{r7, lr}
 800235a:	b090      	sub	sp, #64	; 0x40
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002368:	f7ff ffce 	bl	8002308 <BSP_LCD_GetXSize>
 800236c:	4603      	mov	r3, r0
 800236e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002374:	f7ff ffdc 	bl	8002330 <BSP_LCD_GetYSize>
 8002378:	4603      	mov	r3, r0
 800237a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002384:	23ff      	movs	r3, #255	; 0xff
 8002386:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800239e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023a4:	2307      	movs	r3, #7
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80023a8:	f7ff ffae 	bl	8002308 <BSP_LCD_GetXSize>
 80023ac:	4603      	mov	r3, r0
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80023b0:	f7ff ffbe 	bl	8002330 <BSP_LCD_GetYSize>
 80023b4:	4603      	mov	r3, r0
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4619      	mov	r1, r3
 80023c0:	4812      	ldr	r0, [pc, #72]	; (800240c <BSP_LCD_LayerDefaultInit+0xb4>)
 80023c2:	f004 fc73 	bl	8006cac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	4911      	ldr	r1, [pc, #68]	; (8002410 <BSP_LCD_LayerDefaultInit+0xb8>)
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	3304      	adds	r3, #4
 80023d6:	f04f 32ff 	mov.w	r2, #4294967295
 80023da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	490c      	ldr	r1, [pc, #48]	; (8002410 <BSP_LCD_LayerDefaultInit+0xb8>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3308      	adds	r3, #8
 80023ec:	4a09      	ldr	r2, [pc, #36]	; (8002414 <BSP_LCD_LayerDefaultInit+0xbc>)
 80023ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	4907      	ldr	r1, [pc, #28]	; (8002410 <BSP_LCD_LayerDefaultInit+0xb8>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	3740      	adds	r7, #64	; 0x40
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20004f0c 	.word	0x20004f0c
 8002410:	20000a44 	.word	0x20000a44
 8002414:	20000034 	.word	0x20000034

08002418 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <BSP_LCD_SelectLayer+0x1c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
} 
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000a40 	.word	0x20000a40

08002438 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <BSP_LCD_SetTextColor+0x28>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <BSP_LCD_SetTextColor+0x2c>)
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	601a      	str	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	20000a40 	.word	0x20000a40
 8002464:	20000a44 	.word	0x20000a44

08002468 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <BSP_LCD_SetBackColor+0x2c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4908      	ldr	r1, [pc, #32]	; (8002498 <BSP_LCD_SetBackColor+0x30>)
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3304      	adds	r3, #4
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	601a      	str	r2, [r3, #0]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000a40 	.word	0x20000a40
 8002498:	20000a44 	.word	0x20000a44

0800249c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <BSP_LCD_SetFont+0x2c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4908      	ldr	r1, [pc, #32]	; (80024cc <BSP_LCD_SetFont+0x30>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3308      	adds	r3, #8
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000a40 	.word	0x20000a40
 80024cc:	20000a44 	.word	0x20000a44

080024d0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <BSP_LCD_GetFont+0x24>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4907      	ldr	r1, [pc, #28]	; (80024f8 <BSP_LCD_GetFont+0x28>)
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3308      	adds	r3, #8
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000a40 	.word	0x20000a40
 80024f8:	20000a44 	.word	0x20000a44

080024fc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80024fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fe:	b085      	sub	sp, #20
 8002500:	af02      	add	r7, sp, #8
 8002502:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <BSP_LCD_Clear+0x48>)
 8002506:	681c      	ldr	r4, [r3, #0]
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <BSP_LCD_Clear+0x48>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <BSP_LCD_Clear+0x4c>)
 800250e:	2134      	movs	r1, #52	; 0x34
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	335c      	adds	r3, #92	; 0x5c
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461e      	mov	r6, r3
 800251c:	f7ff fef4 	bl	8002308 <BSP_LCD_GetXSize>
 8002520:	4605      	mov	r5, r0
 8002522:	f7ff ff05 	bl	8002330 <BSP_LCD_GetYSize>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2300      	movs	r3, #0
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	462a      	mov	r2, r5
 8002534:	4631      	mov	r1, r6
 8002536:	4620      	mov	r0, r4
 8002538:	f000 fb40 	bl	8002bbc <LL_FillBuffer>
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002544:	20000a40 	.word	0x20000a40
 8002548:	20004f0c 	.word	0x20004f0c

0800254c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
 8002556:	460b      	mov	r3, r1
 8002558:	80bb      	strh	r3, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <BSP_LCD_DisplayChar+0x80>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	491b      	ldr	r1, [pc, #108]	; (80025d0 <BSP_LCD_DisplayChar+0x84>)
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3308      	adds	r3, #8
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <BSP_LCD_DisplayChar+0x80>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4c14      	ldr	r4, [pc, #80]	; (80025d0 <BSP_LCD_DisplayChar+0x84>)
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4423      	add	r3, r4
 800258a:	3308      	adds	r3, #8
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002590:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <BSP_LCD_DisplayChar+0x80>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4c0d      	ldr	r4, [pc, #52]	; (80025d0 <BSP_LCD_DisplayChar+0x84>)
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4423      	add	r3, r4
 80025a4:	3308      	adds	r3, #8
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	889b      	ldrh	r3, [r3, #4]
 80025aa:	3307      	adds	r3, #7
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da00      	bge.n	80025b2 <BSP_LCD_DisplayChar+0x66>
 80025b0:	3307      	adds	r3, #7
 80025b2:	10db      	asrs	r3, r3, #3
 80025b4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80025b8:	18ca      	adds	r2, r1, r3
 80025ba:	88b9      	ldrh	r1, [r7, #4]
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fa44 	bl	8002a4c <DrawChar>
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd90      	pop	{r4, r7, pc}
 80025cc:	20000a40 	.word	0x20000a40
 80025d0:	20000a44 	.word	0x20000a44

080025d4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60ba      	str	r2, [r7, #8]
 80025dc:	461a      	mov	r2, r3
 80025de:	4603      	mov	r3, r0
 80025e0:	81fb      	strh	r3, [r7, #14]
 80025e2:	460b      	mov	r3, r1
 80025e4:	81bb      	strh	r3, [r7, #12]
 80025e6:	4613      	mov	r3, r2
 80025e8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80025ea:	2301      	movs	r3, #1
 80025ec:	83fb      	strh	r3, [r7, #30]
 80025ee:	2300      	movs	r3, #0
 80025f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80025fe:	e002      	b.n	8002606 <BSP_LCD_DisplayStringAt+0x32>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	3301      	adds	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	617a      	str	r2, [r7, #20]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f6      	bne.n	8002600 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002612:	f7ff fe79 	bl	8002308 <BSP_LCD_GetXSize>
 8002616:	4601      	mov	r1, r0
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <BSP_LCD_DisplayStringAt+0x188>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4850      	ldr	r0, [pc, #320]	; (8002760 <BSP_LCD_DisplayStringAt+0x18c>)
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4403      	add	r3, r0
 8002628:	3308      	adds	r3, #8
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	889b      	ldrh	r3, [r3, #4]
 800262e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002632:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d01c      	beq.n	8002674 <BSP_LCD_DisplayStringAt+0xa0>
 800263a:	2b03      	cmp	r3, #3
 800263c:	dc33      	bgt.n	80026a6 <BSP_LCD_DisplayStringAt+0xd2>
 800263e:	2b01      	cmp	r3, #1
 8002640:	d002      	beq.n	8002648 <BSP_LCD_DisplayStringAt+0x74>
 8002642:	2b02      	cmp	r3, #2
 8002644:	d019      	beq.n	800267a <BSP_LCD_DisplayStringAt+0xa6>
 8002646:	e02e      	b.n	80026a6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad1      	subs	r1, r2, r3
 800264e:	4b43      	ldr	r3, [pc, #268]	; (800275c <BSP_LCD_DisplayStringAt+0x188>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4843      	ldr	r0, [pc, #268]	; (8002760 <BSP_LCD_DisplayStringAt+0x18c>)
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4403      	add	r3, r0
 800265e:	3308      	adds	r3, #8
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	889b      	ldrh	r3, [r3, #4]
 8002664:	fb03 f301 	mul.w	r3, r3, r1
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	89fb      	ldrh	r3, [r7, #14]
 800266e:	4413      	add	r3, r2
 8002670:	83fb      	strh	r3, [r7, #30]
      break;
 8002672:	e01b      	b.n	80026ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002674:	89fb      	ldrh	r3, [r7, #14]
 8002676:	83fb      	strh	r3, [r7, #30]
      break;
 8002678:	e018      	b.n	80026ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	b299      	uxth	r1, r3
 8002682:	4b36      	ldr	r3, [pc, #216]	; (800275c <BSP_LCD_DisplayStringAt+0x188>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4836      	ldr	r0, [pc, #216]	; (8002760 <BSP_LCD_DisplayStringAt+0x18c>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4403      	add	r3, r0
 8002692:	3308      	adds	r3, #8
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	889b      	ldrh	r3, [r3, #4]
 8002698:	fb11 f303 	smulbb	r3, r1, r3
 800269c:	b29a      	uxth	r2, r3
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	83fb      	strh	r3, [r7, #30]
      break;
 80026a4:	e002      	b.n	80026ac <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80026a6:	89fb      	ldrh	r3, [r7, #14]
 80026a8:	83fb      	strh	r3, [r7, #30]
      break;
 80026aa:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80026ac:	8bfb      	ldrh	r3, [r7, #30]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <BSP_LCD_DisplayStringAt+0xe6>
 80026b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da1d      	bge.n	80026f6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80026ba:	2301      	movs	r3, #1
 80026bc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80026be:	e01a      	b.n	80026f6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	89b9      	ldrh	r1, [r7, #12]
 80026c6:	8bfb      	ldrh	r3, [r7, #30]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff3f 	bl	800254c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80026ce:	4b23      	ldr	r3, [pc, #140]	; (800275c <BSP_LCD_DisplayStringAt+0x188>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4923      	ldr	r1, [pc, #140]	; (8002760 <BSP_LCD_DisplayStringAt+0x18c>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3308      	adds	r3, #8
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	889a      	ldrh	r2, [r3, #4]
 80026e4:	8bfb      	ldrh	r3, [r7, #30]
 80026e6:	4413      	add	r3, r2
 80026e8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
    i++;
 80026f0:	8bbb      	ldrh	r3, [r7, #28]
 80026f2:	3301      	adds	r3, #1
 80026f4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2dc      	uxtb	r4, r3
 8002704:	f7ff fe00 	bl	8002308 <BSP_LCD_GetXSize>
 8002708:	8bb9      	ldrh	r1, [r7, #28]
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <BSP_LCD_DisplayStringAt+0x188>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4d14      	ldr	r5, [pc, #80]	; (8002760 <BSP_LCD_DisplayStringAt+0x18c>)
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	442b      	add	r3, r5
 800271a:	3308      	adds	r3, #8
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	889b      	ldrh	r3, [r3, #4]
 8002720:	fb03 f301 	mul.w	r3, r3, r1
 8002724:	1ac3      	subs	r3, r0, r3
 8002726:	b299      	uxth	r1, r3
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <BSP_LCD_DisplayStringAt+0x188>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <BSP_LCD_DisplayStringAt+0x18c>)
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4403      	add	r3, r0
 8002738:	3308      	adds	r3, #8
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	889b      	ldrh	r3, [r3, #4]
 800273e:	4299      	cmp	r1, r3
 8002740:	bf2c      	ite	cs
 8002742:	2301      	movcs	r3, #1
 8002744:	2300      	movcc	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4023      	ands	r3, r4
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1b7      	bne.n	80026c0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bdb0      	pop	{r4, r5, r7, pc}
 800275a:	bf00      	nop
 800275c:	20000a40 	.word	0x20000a40
 8002760:	20000a44 	.word	0x20000a44

08002764 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002770:	f7ff feae 	bl	80024d0 <BSP_LCD_GetFont>
 8002774:	4603      	mov	r3, r0
 8002776:	88db      	ldrh	r3, [r3, #6]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	fb12 f303 	smulbb	r3, r2, r3
 800277e:	b299      	uxth	r1, r3
 8002780:	2303      	movs	r3, #3
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff ff25 	bl	80025d4 <BSP_LCD_DisplayStringAt>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002794:	b5b0      	push	{r4, r5, r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	603a      	str	r2, [r7, #0]
 800279e:	80fb      	strh	r3, [r7, #6]
 80027a0:	460b      	mov	r3, r1
 80027a2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <BSP_LCD_DrawPixel+0x88>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <BSP_LCD_DrawPixel+0x8c>)
 80027aa:	2134      	movs	r1, #52	; 0x34
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3348      	adds	r3, #72	; 0x48
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d116      	bne.n	80027e8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <BSP_LCD_DrawPixel+0x88>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a18      	ldr	r2, [pc, #96]	; (8002820 <BSP_LCD_DrawPixel+0x8c>)
 80027c0:	2134      	movs	r1, #52	; 0x34
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	335c      	adds	r3, #92	; 0x5c
 80027ca:	681c      	ldr	r4, [r3, #0]
 80027cc:	88bd      	ldrh	r5, [r7, #4]
 80027ce:	f7ff fd9b 	bl	8002308 <BSP_LCD_GetXSize>
 80027d2:	4603      	mov	r3, r0
 80027d4:	fb03 f205 	mul.w	r2, r3, r5
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	4413      	add	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4423      	add	r3, r4
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b292      	uxth	r2, r2
 80027e4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80027e6:	e015      	b.n	8002814 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <BSP_LCD_DrawPixel+0x88>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <BSP_LCD_DrawPixel+0x8c>)
 80027ee:	2134      	movs	r1, #52	; 0x34
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	681c      	ldr	r4, [r3, #0]
 80027fa:	88bd      	ldrh	r5, [r7, #4]
 80027fc:	f7ff fd84 	bl	8002308 <BSP_LCD_GetXSize>
 8002800:	4603      	mov	r3, r0
 8002802:	fb03 f205 	mul.w	r2, r3, r5
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4423      	add	r3, r4
 800280e:	461a      	mov	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bdb0      	pop	{r4, r5, r7, pc}
 800281c:	20000a40 	.word	0x20000a40
 8002820:	20004f0c 	.word	0x20004f0c

08002824 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <BSP_LCD_DisplayOn+0x30>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <BSP_LCD_DisplayOn+0x30>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002838:	2201      	movs	r2, #1
 800283a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800283e:	4806      	ldr	r0, [pc, #24]	; (8002858 <BSP_LCD_DisplayOn+0x34>)
 8002840:	f003 fab4 	bl	8005dac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002844:	2201      	movs	r2, #1
 8002846:	2108      	movs	r1, #8
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <BSP_LCD_DisplayOn+0x38>)
 800284a:	f003 faaf 	bl	8005dac <HAL_GPIO_WritePin>
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20004f0c 	.word	0x20004f0c
 8002858:	40022000 	.word	0x40022000
 800285c:	40022800 	.word	0x40022800

08002860 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b090      	sub	sp, #64	; 0x40
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800286a:	4b64      	ldr	r3, [pc, #400]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4a63      	ldr	r2, [pc, #396]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	4b61      	ldr	r3, [pc, #388]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002882:	4b5e      	ldr	r3, [pc, #376]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800289a:	4b58      	ldr	r3, [pc, #352]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a57      	ldr	r2, [pc, #348]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028a0:	f043 0310 	orr.w	r3, r3, #16
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b55      	ldr	r3, [pc, #340]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028b2:	4b52      	ldr	r3, [pc, #328]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a51      	ldr	r2, [pc, #324]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80028ca:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a4b      	ldr	r2, [pc, #300]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80028e2:	4b46      	ldr	r3, [pc, #280]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a45      	ldr	r2, [pc, #276]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b43      	ldr	r3, [pc, #268]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80028fa:	4b40      	ldr	r3, [pc, #256]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002912:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a39      	ldr	r2, [pc, #228]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b37      	ldr	r3, [pc, #220]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800292a:	4b34      	ldr	r3, [pc, #208]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a33      	ldr	r2, [pc, #204]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b31      	ldr	r3, [pc, #196]	; (80029fc <BSP_LCD_MspInit+0x19c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002942:	2310      	movs	r3, #16
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800294e:	2302      	movs	r3, #2
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002952:	230e      	movs	r3, #14
 8002954:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800295a:	4619      	mov	r1, r3
 800295c:	4828      	ldr	r0, [pc, #160]	; (8002a00 <BSP_LCD_MspInit+0x1a0>)
 800295e:	f002 ff55 	bl	800580c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800296c:	2309      	movs	r3, #9
 800296e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002974:	4619      	mov	r1, r3
 8002976:	4823      	ldr	r0, [pc, #140]	; (8002a04 <BSP_LCD_MspInit+0x1a4>)
 8002978:	f002 ff48 	bl	800580c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800297c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002986:	230e      	movs	r3, #14
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800298a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298e:	4619      	mov	r1, r3
 8002990:	481d      	ldr	r0, [pc, #116]	; (8002a08 <BSP_LCD_MspInit+0x1a8>)
 8002992:	f002 ff3b 	bl	800580c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002996:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80029a0:	230e      	movs	r3, #14
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80029a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a8:	4619      	mov	r1, r3
 80029aa:	4818      	ldr	r0, [pc, #96]	; (8002a0c <BSP_LCD_MspInit+0x1ac>)
 80029ac:	f002 ff2e 	bl	800580c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80029b0:	23f7      	movs	r3, #247	; 0xf7
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80029b8:	230e      	movs	r3, #14
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80029bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c0:	4619      	mov	r1, r3
 80029c2:	4813      	ldr	r0, [pc, #76]	; (8002a10 <BSP_LCD_MspInit+0x1b0>)
 80029c4:	f002 ff22 	bl	800580c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80029c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80029d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d6:	4619      	mov	r1, r3
 80029d8:	480b      	ldr	r0, [pc, #44]	; (8002a08 <BSP_LCD_MspInit+0x1a8>)
 80029da:	f002 ff17 	bl	800580c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80029de:	2308      	movs	r3, #8
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80029e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ea:	4619      	mov	r1, r3
 80029ec:	4808      	ldr	r0, [pc, #32]	; (8002a10 <BSP_LCD_MspInit+0x1b0>)
 80029ee:	f002 ff0d 	bl	800580c <HAL_GPIO_Init>
}
 80029f2:	bf00      	nop
 80029f4:	3740      	adds	r7, #64	; 0x40
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40021800 	.word	0x40021800
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40022400 	.word	0x40022400
 8002a10:	40022800 	.word	0x40022800

08002a14 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <BSP_LCD_ClockConfig+0x34>)
 8002a20:	2208      	movs	r2, #8
 8002a22:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <BSP_LCD_ClockConfig+0x34>)
 8002a26:	22c0      	movs	r2, #192	; 0xc0
 8002a28:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <BSP_LCD_ClockConfig+0x34>)
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <BSP_LCD_ClockConfig+0x34>)
 8002a32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002a38:	4803      	ldr	r0, [pc, #12]	; (8002a48 <BSP_LCD_ClockConfig+0x34>)
 8002a3a:	f005 f829 	bl	8007a90 <HAL_RCCEx_PeriphCLKConfig>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000a5c 	.word	0x20000a5c

08002a4c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	603a      	str	r2, [r7, #0]
 8002a56:	80fb      	strh	r3, [r7, #6]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <DrawChar+0x168>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4953      	ldr	r1, [pc, #332]	; (8002bb8 <DrawChar+0x16c>)
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	3308      	adds	r3, #8
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	88db      	ldrh	r3, [r3, #6]
 8002a7a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002a7c:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <DrawChar+0x168>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	494d      	ldr	r1, [pc, #308]	; (8002bb8 <DrawChar+0x16c>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	889b      	ldrh	r3, [r3, #4]
 8002a92:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002a94:	8a3b      	ldrh	r3, [r7, #16]
 8002a96:	3307      	adds	r3, #7
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	da00      	bge.n	8002a9e <DrawChar+0x52>
 8002a9c:	3307      	adds	r3, #7
 8002a9e:	10db      	asrs	r3, r3, #3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	8a3b      	ldrh	r3, [r7, #16]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e076      	b.n	8002ba2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002ab4:	8a3b      	ldrh	r3, [r7, #16]
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da00      	bge.n	8002abe <DrawChar+0x72>
 8002abc:	3307      	adds	r3, #7
 8002abe:	10db      	asrs	r3, r3, #3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fb03 f302 	mul.w	r3, r3, r2
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002ace:	8a3b      	ldrh	r3, [r7, #16]
 8002ad0:	3307      	adds	r3, #7
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	da00      	bge.n	8002ad8 <DrawChar+0x8c>
 8002ad6:	3307      	adds	r3, #7
 8002ad8:	10db      	asrs	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d002      	beq.n	8002ae4 <DrawChar+0x98>
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d004      	beq.n	8002aec <DrawChar+0xa0>
 8002ae2:	e00c      	b.n	8002afe <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	617b      	str	r3, [r7, #20]
      break;
 8002aea:	e016      	b.n	8002b1a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	3201      	adds	r2, #1
 8002af6:	7812      	ldrb	r2, [r2, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
      break;
 8002afc:	e00d      	b.n	8002b1a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	041a      	lsls	r2, r3, #16
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	3301      	adds	r3, #1
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	3202      	adds	r2, #2
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
      break;
 8002b18:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	e036      	b.n	8002b8e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002b20:	8a3a      	ldrh	r2, [r7, #16]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	1ad2      	subs	r2, r2, r3
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	4413      	add	r3, r2
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	4413      	add	r3, r2
 8002b44:	b298      	uxth	r0, r3
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <DrawChar+0x168>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	491b      	ldr	r1, [pc, #108]	; (8002bb8 <DrawChar+0x16c>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	88bb      	ldrh	r3, [r7, #4]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f7ff fe1a 	bl	8002794 <BSP_LCD_DrawPixel>
 8002b60:	e012      	b.n	8002b88 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	4413      	add	r3, r2
 8002b6a:	b298      	uxth	r0, r3
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <DrawChar+0x168>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4911      	ldr	r1, [pc, #68]	; (8002bb8 <DrawChar+0x16c>)
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	88bb      	ldrh	r3, [r7, #4]
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7ff fe06 	bl	8002794 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	8a3b      	ldrh	r3, [r7, #16]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3c4      	bcc.n	8002b20 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002b96:	88bb      	ldrh	r3, [r7, #4]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	8a7b      	ldrh	r3, [r7, #18]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d384      	bcc.n	8002ab4 <DrawChar+0x68>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000a40 	.word	0x20000a40
 8002bb8:	20000a44 	.word	0x20000a44

08002bbc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <LL_FillBuffer+0x88>)
 8002bcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bd0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <LL_FillBuffer+0x8c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <LL_FillBuffer+0x90>)
 8002bd8:	2134      	movs	r1, #52	; 0x34
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3348      	adds	r3, #72	; 0x48
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d103      	bne.n	8002bf0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <LL_FillBuffer+0x88>)
 8002bea:	2202      	movs	r2, #2
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	e002      	b.n	8002bf6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <LL_FillBuffer+0x88>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002bf6:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <LL_FillBuffer+0x88>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <LL_FillBuffer+0x88>)
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <LL_FillBuffer+0x94>)
 8002c00:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002c02:	4810      	ldr	r0, [pc, #64]	; (8002c44 <LL_FillBuffer+0x88>)
 8002c04:	f002 fb76 	bl	80052f4 <HAL_DMA2D_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d115      	bne.n	8002c3a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002c0e:	68f9      	ldr	r1, [r7, #12]
 8002c10:	480c      	ldr	r0, [pc, #48]	; (8002c44 <LL_FillBuffer+0x88>)
 8002c12:	f002 fccd 	bl	80055b0 <HAL_DMA2D_ConfigLayer>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10e      	bne.n	8002c3a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69f9      	ldr	r1, [r7, #28]
 8002c26:	4807      	ldr	r0, [pc, #28]	; (8002c44 <LL_FillBuffer+0x88>)
 8002c28:	f002 fbae 	bl	8005388 <HAL_DMA2D_Start>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d103      	bne.n	8002c3a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002c32:	210a      	movs	r1, #10
 8002c34:	4803      	ldr	r0, [pc, #12]	; (8002c44 <LL_FillBuffer+0x88>)
 8002c36:	f002 fbd2 	bl	80053de <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000a00 	.word	0x20000a00
 8002c48:	20000a40 	.word	0x20000a40
 8002c4c:	20004f0c 	.word	0x20004f0c
 8002c50:	4002b000 	.word	0x4002b000

08002c54 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002c5a:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <BSP_SDRAM_Init+0xb0>)
 8002c5c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <BSP_SDRAM_Init+0xb4>)
 8002c60:	2202      	movs	r2, #2
 8002c62:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <BSP_SDRAM_Init+0xb4>)
 8002c66:	2207      	movs	r2, #7
 8002c68:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <BSP_SDRAM_Init+0xb4>)
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <BSP_SDRAM_Init+0xb4>)
 8002c72:	2207      	movs	r2, #7
 8002c74:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <BSP_SDRAM_Init+0xb4>)
 8002c78:	2202      	movs	r2, #2
 8002c7a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002c7c:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <BSP_SDRAM_Init+0xb4>)
 8002c7e:	2202      	movs	r2, #2
 8002c80:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <BSP_SDRAM_Init+0xb4>)
 8002c84:	2202      	movs	r2, #2
 8002c86:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002c96:	2204      	movs	r2, #4
 8002c98:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002ca2:	2240      	movs	r2, #64	; 0x40
 8002ca4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cac:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cba:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002cbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002cca:	2100      	movs	r1, #0
 8002ccc:	480c      	ldr	r0, [pc, #48]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002cce:	f000 f87f 	bl	8002dd0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002cd2:	490d      	ldr	r1, [pc, #52]	; (8002d08 <BSP_SDRAM_Init+0xb4>)
 8002cd4:	480a      	ldr	r0, [pc, #40]	; (8002d00 <BSP_SDRAM_Init+0xac>)
 8002cd6:	f005 ffe7 	bl	8008ca8 <HAL_SDRAM_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <BSP_SDRAM_Init+0xb8>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e002      	b.n	8002cee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <BSP_SDRAM_Init+0xb8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002cee:	f240 6003 	movw	r0, #1539	; 0x603
 8002cf2:	f000 f80d 	bl	8002d10 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <BSP_SDRAM_Init+0xb8>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20004fb4 	.word	0x20004fb4
 8002d04:	a0000140 	.word	0xa0000140
 8002d08:	20000ae0 	.word	0x20000ae0
 8002d0c:	20000044 	.word	0x20000044

08002d10 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d24:	2210      	movs	r2, #16
 8002d26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002d2e:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d38:	4923      	ldr	r1, [pc, #140]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d3a:	4824      	ldr	r0, [pc, #144]	; (8002dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d3c:	f005 ffe8 	bl	8008d10 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f001 fb8b 	bl	800445c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d48:	2202      	movs	r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d4e:	2210      	movs	r2, #16
 8002d50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d62:	4919      	ldr	r1, [pc, #100]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d64:	4819      	ldr	r0, [pc, #100]	; (8002dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d66:	f005 ffd3 	bl	8008d10 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d72:	2210      	movs	r2, #16
 8002d74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d78:	2208      	movs	r2, #8
 8002d7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d86:	4910      	ldr	r1, [pc, #64]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d88:	4810      	ldr	r0, [pc, #64]	; (8002dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d8a:	f005 ffc1 	bl	8008d10 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002d8e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002d92:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d96:	2204      	movs	r2, #4
 8002d98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002daa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002db0:	4905      	ldr	r1, [pc, #20]	; (8002dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002db2:	4806      	ldr	r0, [pc, #24]	; (8002dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002db4:	f005 ffac 	bl	8008d10 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4804      	ldr	r0, [pc, #16]	; (8002dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dbc:	f005 ffd3 	bl	8008d66 <HAL_SDRAM_ProgramRefreshRate>
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000afc 	.word	0x20000afc
 8002dcc:	20004fb4 	.word	0x20004fb4

08002dd0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b090      	sub	sp, #64	; 0x40
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002dda:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6393      	str	r3, [r2, #56]	; 0x38
 8002de6:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002df2:	4b6a      	ldr	r3, [pc, #424]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a69      	ldr	r2, [pc, #420]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b67      	ldr	r3, [pc, #412]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0a:	4b64      	ldr	r3, [pc, #400]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a63      	ldr	r2, [pc, #396]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e22:	4b5e      	ldr	r3, [pc, #376]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a5d      	ldr	r2, [pc, #372]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e3a:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a57      	ldr	r2, [pc, #348]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e40:	f043 0310 	orr.w	r3, r3, #16
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e52:	4b52      	ldr	r3, [pc, #328]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a51      	ldr	r2, [pc, #324]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e58:	f043 0320 	orr.w	r3, r3, #32
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b4f      	ldr	r3, [pc, #316]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e6a:	4b4c      	ldr	r3, [pc, #304]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a4b      	ldr	r2, [pc, #300]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e82:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a45      	ldr	r2, [pc, #276]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <BSP_SDRAM_MspInit+0x1cc>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002eaa:	2308      	movs	r3, #8
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	483a      	ldr	r0, [pc, #232]	; (8002fa0 <BSP_SDRAM_MspInit+0x1d0>)
 8002eb6:	f002 fca9 	bl	800580c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002eba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4837      	ldr	r0, [pc, #220]	; (8002fa4 <BSP_SDRAM_MspInit+0x1d4>)
 8002ec8:	f002 fca0 	bl	800580c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002ecc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4833      	ldr	r0, [pc, #204]	; (8002fa8 <BSP_SDRAM_MspInit+0x1d8>)
 8002eda:	f002 fc97 	bl	800580c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ede:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4830      	ldr	r0, [pc, #192]	; (8002fac <BSP_SDRAM_MspInit+0x1dc>)
 8002eec:	f002 fc8e 	bl	800580c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002ef0:	f248 1333 	movw	r3, #33075	; 0x8133
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002efa:	4619      	mov	r1, r3
 8002efc:	482c      	ldr	r0, [pc, #176]	; (8002fb0 <BSP_SDRAM_MspInit+0x1e0>)
 8002efe:	f002 fc85 	bl	800580c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002f02:	2328      	movs	r3, #40	; 0x28
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4829      	ldr	r0, [pc, #164]	; (8002fb4 <BSP_SDRAM_MspInit+0x1e4>)
 8002f0e:	f002 fc7d 	bl	800580c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f24:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002f26:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f2c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f34:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f3c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f4a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f54:	2203      	movs	r2, #3
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <BSP_SDRAM_MspInit+0x1ec>)
 8002f68:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f70:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002f76:	4810      	ldr	r0, [pc, #64]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f78:	f001 ff8c 	bl	8004e94 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002f7c:	480e      	ldr	r0, [pc, #56]	; (8002fb8 <BSP_SDRAM_MspInit+0x1e8>)
 8002f7e:	f001 fedb 	bl	8004d38 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	210f      	movs	r1, #15
 8002f86:	2038      	movs	r0, #56	; 0x38
 8002f88:	f001 fdcc 	bl	8004b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002f8c:	2038      	movs	r0, #56	; 0x38
 8002f8e:	f001 fde5 	bl	8004b5c <HAL_NVIC_EnableIRQ>
}
 8002f92:	bf00      	nop
 8002f94:	3740      	adds	r7, #64	; 0x40
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	40020c00 	.word	0x40020c00
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40021400 	.word	0x40021400
 8002fb0:	40021800 	.word	0x40021800
 8002fb4:	40021c00 	.word	0x40021c00
 8002fb8:	20000b0c 	.word	0x20000b0c
 8002fbc:	40026410 	.word	0x40026410

08002fc0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	460a      	mov	r2, r1
 8002fca:	80fb      	strh	r3, [r7, #6]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <BSP_TS_Init+0x68>)
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002fda:	4a14      	ldr	r2, [pc, #80]	; (800302c <BSP_TS_Init+0x6c>)
 8002fdc:	88bb      	ldrh	r3, [r7, #4]
 8002fde:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <BSP_TS_Init+0x70>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2070      	movs	r0, #112	; 0x70
 8002fe6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <BSP_TS_Init+0x70>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2070      	movs	r0, #112	; 0x70
 8002fee:	4798      	blx	r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b51      	cmp	r3, #81	; 0x51
 8002ff4:	d111      	bne.n	800301a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <BSP_TS_Init+0x74>)
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <BSP_TS_Init+0x70>)
 8002ffa:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <BSP_TS_Init+0x78>)
 8002ffe:	2270      	movs	r2, #112	; 0x70
 8003000:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <BSP_TS_Init+0x7c>)
 8003004:	2208      	movs	r2, #8
 8003006:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <BSP_TS_Init+0x74>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <BSP_TS_Init+0x78>)
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	b292      	uxth	r2, r2
 8003014:	4610      	mov	r0, r2
 8003016:	4798      	blx	r3
 8003018:	e001      	b.n	800301e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800301a:	2303      	movs	r3, #3
 800301c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800301e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000b70 	.word	0x20000b70
 800302c:	20000b72 	.word	0x20000b72
 8003030:	20000000 	.word	0x20000000
 8003034:	20000b6c 	.word	0x20000b6c
 8003038:	20000b75 	.word	0x20000b75
 800303c:	20000b74 	.word	0x20000b74

08003040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <HAL_MspInit+0x4c>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a10      	ldr	r2, [pc, #64]	; (800308c <HAL_MspInit+0x4c>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_MspInit+0x4c>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_MspInit+0x4c>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <HAL_MspInit+0x4c>)
 8003064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003068:	6453      	str	r3, [r2, #68]	; 0x44
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_MspInit+0x4c>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	210f      	movs	r1, #15
 800307a:	f06f 0001 	mvn.w	r0, #1
 800307e:	f001 fd51 	bl	8004b24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a2a      	ldr	r2, [pc, #168]	; (8003158 <HAL_ADC_MspInit+0xc8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d124      	bne.n	80030fc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_ADC_MspInit+0xcc>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4a29      	ldr	r2, [pc, #164]	; (800315c <HAL_ADC_MspInit+0xcc>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6453      	str	r3, [r2, #68]	; 0x44
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_ADC_MspInit+0xcc>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_ADC_MspInit+0xcc>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a23      	ldr	r2, [pc, #140]	; (800315c <HAL_ADC_MspInit+0xcc>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b21      	ldr	r3, [pc, #132]	; (800315c <HAL_ADC_MspInit+0xcc>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e6:	2303      	movs	r3, #3
 80030e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4619      	mov	r1, r3
 80030f4:	481a      	ldr	r0, [pc, #104]	; (8003160 <HAL_ADC_MspInit+0xd0>)
 80030f6:	f002 fb89 	bl	800580c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80030fa:	e029      	b.n	8003150 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_ADC_MspInit+0xd4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d124      	bne.n	8003150 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_ADC_MspInit+0xcc>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_ADC_MspInit+0xcc>)
 800310c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003110:	6453      	str	r3, [r2, #68]	; 0x44
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_ADC_MspInit+0xcc>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <HAL_ADC_MspInit+0xcc>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a0e      	ldr	r2, [pc, #56]	; (800315c <HAL_ADC_MspInit+0xcc>)
 8003124:	f043 0320 	orr.w	r3, r3, #32
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_ADC_MspInit+0xcc>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003136:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800313a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800313c:	2303      	movs	r3, #3
 800313e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	4619      	mov	r1, r3
 800314a:	4807      	ldr	r0, [pc, #28]	; (8003168 <HAL_ADC_MspInit+0xd8>)
 800314c:	f002 fb5e 	bl	800580c <HAL_GPIO_Init>
}
 8003150:	bf00      	nop
 8003152:	3730      	adds	r7, #48	; 0x30
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40012000 	.word	0x40012000
 800315c:	40023800 	.word	0x40023800
 8003160:	40020000 	.word	0x40020000
 8003164:	40012200 	.word	0x40012200
 8003168:	40021400 	.word	0x40021400

0800316c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <HAL_DAC_MspInit+0x84>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d12b      	bne.n	80031e6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_DAC_MspInit+0x88>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a18      	ldr	r2, [pc, #96]	; (80031f4 <HAL_DAC_MspInit+0x88>)
 8003194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <HAL_DAC_MspInit+0x88>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_DAC_MspInit+0x88>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_DAC_MspInit+0x88>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_DAC_MspInit+0x88>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031be:	2310      	movs	r3, #16
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c2:	2303      	movs	r3, #3
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	4809      	ldr	r0, [pc, #36]	; (80031f8 <HAL_DAC_MspInit+0x8c>)
 80031d2:	f002 fb1b 	bl	800580c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	2036      	movs	r0, #54	; 0x36
 80031dc:	f001 fca2 	bl	8004b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031e0:	2036      	movs	r0, #54	; 0x36
 80031e2:	f001 fcbb 	bl	8004b5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80031e6:	bf00      	nop
 80031e8:	3728      	adds	r7, #40	; 0x28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40007400 	.word	0x40007400
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020000 	.word	0x40020000

080031fc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_DMA2D_MspInit+0x38>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d10b      	bne.n	8003226 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_DMA2D_MspInit+0x3c>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_DMA2D_MspInit+0x3c>)
 8003214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <HAL_DMA2D_MspInit+0x3c>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	4002b000 	.word	0x4002b000
 8003238:	40023800 	.word	0x40023800

0800323c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2f      	ldr	r2, [pc, #188]	; (8003318 <HAL_I2C_MspInit+0xdc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d129      	bne.n	80032b2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_I2C_MspInit+0xe0>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a2e      	ldr	r2, [pc, #184]	; (800331c <HAL_I2C_MspInit+0xe0>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_I2C_MspInit+0xe0>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800327c:	2312      	movs	r3, #18
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003288:	2304      	movs	r3, #4
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	4619      	mov	r1, r3
 8003292:	4823      	ldr	r0, [pc, #140]	; (8003320 <HAL_I2C_MspInit+0xe4>)
 8003294:	f002 faba 	bl	800580c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_I2C_MspInit+0xe0>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_I2C_MspInit+0xe0>)
 800329e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032a2:	6413      	str	r3, [r2, #64]	; 0x40
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_I2C_MspInit+0xe0>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80032b0:	e02d      	b.n	800330e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <HAL_I2C_MspInit+0xe8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d128      	bne.n	800330e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_I2C_MspInit+0xe0>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4a16      	ldr	r2, [pc, #88]	; (800331c <HAL_I2C_MspInit+0xe0>)
 80032c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c6:	6313      	str	r3, [r2, #48]	; 0x30
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_I2C_MspInit+0xe0>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80032d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032da:	2312      	movs	r3, #18
 80032dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032de:	2301      	movs	r3, #1
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032e6:	2304      	movs	r3, #4
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	4619      	mov	r1, r3
 80032f0:	480d      	ldr	r0, [pc, #52]	; (8003328 <HAL_I2C_MspInit+0xec>)
 80032f2:	f002 fa8b 	bl	800580c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_I2C_MspInit+0xe0>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <HAL_I2C_MspInit+0xe0>)
 80032fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_I2C_MspInit+0xe0>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
}
 800330e:	bf00      	nop
 8003310:	3730      	adds	r7, #48	; 0x30
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40005400 	.word	0x40005400
 800331c:	40023800 	.word	0x40023800
 8003320:	40020400 	.word	0x40020400
 8003324:	40005c00 	.word	0x40005c00
 8003328:	40021c00 	.word	0x40021c00

0800332c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_I2C_MspDeInit+0x64>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d110      	bne.n	8003360 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_I2C_MspDeInit+0x68>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_I2C_MspDeInit+0x68>)
 8003344:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800334a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800334e:	4812      	ldr	r0, [pc, #72]	; (8003398 <HAL_I2C_MspDeInit+0x6c>)
 8003350:	f002 fc08 	bl	8005b64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003358:	480f      	ldr	r0, [pc, #60]	; (8003398 <HAL_I2C_MspDeInit+0x6c>)
 800335a:	f002 fc03 	bl	8005b64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800335e:	e013      	b.n	8003388 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <HAL_I2C_MspDeInit+0x70>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10e      	bne.n	8003388 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_I2C_MspDeInit+0x68>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_I2C_MspDeInit+0x68>)
 8003370:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	4809      	ldr	r0, [pc, #36]	; (80033a0 <HAL_I2C_MspDeInit+0x74>)
 800337a:	f002 fbf3 	bl	8005b64 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800337e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <HAL_I2C_MspDeInit+0x74>)
 8003384:	f002 fbee 	bl	8005b64 <HAL_GPIO_DeInit>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40005400 	.word	0x40005400
 8003394:	40023800 	.word	0x40023800
 8003398:	40020400 	.word	0x40020400
 800339c:	40005c00 	.word	0x40005c00
 80033a0:	40021c00 	.word	0x40021c00

080033a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	; 0x38
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a55      	ldr	r2, [pc, #340]	; (8003518 <HAL_LTDC_MspInit+0x174>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f040 80a3 	bne.w	800350e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80033c8:	4b54      	ldr	r3, [pc, #336]	; (800351c <HAL_LTDC_MspInit+0x178>)
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_LTDC_MspInit+0x178>)
 80033ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033d2:	6453      	str	r3, [r2, #68]	; 0x44
 80033d4:	4b51      	ldr	r3, [pc, #324]	; (800351c <HAL_LTDC_MspInit+0x178>)
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033dc:	623b      	str	r3, [r7, #32]
 80033de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033e0:	4b4e      	ldr	r3, [pc, #312]	; (800351c <HAL_LTDC_MspInit+0x178>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a4d      	ldr	r2, [pc, #308]	; (800351c <HAL_LTDC_MspInit+0x178>)
 80033e6:	f043 0310 	orr.w	r3, r3, #16
 80033ea:	6313      	str	r3, [r2, #48]	; 0x30
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <HAL_LTDC_MspInit+0x178>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033f8:	4b48      	ldr	r3, [pc, #288]	; (800351c <HAL_LTDC_MspInit+0x178>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	4a47      	ldr	r2, [pc, #284]	; (800351c <HAL_LTDC_MspInit+0x178>)
 80033fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003402:	6313      	str	r3, [r2, #48]	; 0x30
 8003404:	4b45      	ldr	r3, [pc, #276]	; (800351c <HAL_LTDC_MspInit+0x178>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003410:	4b42      	ldr	r3, [pc, #264]	; (800351c <HAL_LTDC_MspInit+0x178>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4a41      	ldr	r2, [pc, #260]	; (800351c <HAL_LTDC_MspInit+0x178>)
 8003416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800341a:	6313      	str	r3, [r2, #48]	; 0x30
 800341c:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_LTDC_MspInit+0x178>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003428:	4b3c      	ldr	r3, [pc, #240]	; (800351c <HAL_LTDC_MspInit+0x178>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	4a3b      	ldr	r2, [pc, #236]	; (800351c <HAL_LTDC_MspInit+0x178>)
 800342e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003432:	6313      	str	r3, [r2, #48]	; 0x30
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_LTDC_MspInit+0x178>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_LTDC_MspInit+0x178>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	4a35      	ldr	r2, [pc, #212]	; (800351c <HAL_LTDC_MspInit+0x178>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6313      	str	r3, [r2, #48]	; 0x30
 800344c:	4b33      	ldr	r3, [pc, #204]	; (800351c <HAL_LTDC_MspInit+0x178>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003458:	2310      	movs	r3, #16
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003468:	230e      	movs	r3, #14
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800346c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003470:	4619      	mov	r1, r3
 8003472:	482b      	ldr	r0, [pc, #172]	; (8003520 <HAL_LTDC_MspInit+0x17c>)
 8003474:	f002 f9ca 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003478:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	2300      	movs	r3, #0
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800348a:	230e      	movs	r3, #14
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800348e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003492:	4619      	mov	r1, r3
 8003494:	4823      	ldr	r0, [pc, #140]	; (8003524 <HAL_LTDC_MspInit+0x180>)
 8003496:	f002 f9b9 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800349a:	23f7      	movs	r3, #247	; 0xf7
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349e:	2302      	movs	r3, #2
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	2300      	movs	r3, #0
 80034a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034aa:	230e      	movs	r3, #14
 80034ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80034ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b2:	4619      	mov	r1, r3
 80034b4:	481c      	ldr	r0, [pc, #112]	; (8003528 <HAL_LTDC_MspInit+0x184>)
 80034b6:	f002 f9a9 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80034ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034cc:	2309      	movs	r3, #9
 80034ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80034d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d4:	4619      	mov	r1, r3
 80034d6:	4815      	ldr	r0, [pc, #84]	; (800352c <HAL_LTDC_MspInit+0x188>)
 80034d8:	f002 f998 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80034dc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034ee:	230e      	movs	r3, #14
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f6:	4619      	mov	r1, r3
 80034f8:	480d      	ldr	r0, [pc, #52]	; (8003530 <HAL_LTDC_MspInit+0x18c>)
 80034fa:	f002 f987 	bl	800580c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2105      	movs	r1, #5
 8003502:	2058      	movs	r0, #88	; 0x58
 8003504:	f001 fb0e 	bl	8004b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003508:	2058      	movs	r0, #88	; 0x58
 800350a:	f001 fb27 	bl	8004b5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800350e:	bf00      	nop
 8003510:	3738      	adds	r7, #56	; 0x38
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40016800 	.word	0x40016800
 800351c:	40023800 	.word	0x40023800
 8003520:	40021000 	.word	0x40021000
 8003524:	40022400 	.word	0x40022400
 8003528:	40022800 	.word	0x40022800
 800352c:	40021800 	.word	0x40021800
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a07      	ldr	r2, [pc, #28]	; (8003560 <HAL_RTC_MspInit+0x2c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d105      	bne.n	8003552 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <HAL_RTC_MspInit+0x30>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a06      	ldr	r2, [pc, #24]	; (8003564 <HAL_RTC_MspInit+0x30>)
 800354c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40002800 	.word	0x40002800
 8003564:	40023800 	.word	0x40023800

08003568 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2d      	ldr	r2, [pc, #180]	; (800363c <HAL_SPI_MspInit+0xd4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d154      	bne.n	8003634 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800358a:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
 8003596:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80035a2:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	4a26      	ldr	r2, [pc, #152]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	6313      	str	r3, [r2, #48]	; 0x30
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 80035c0:	f043 0302 	orr.w	r3, r3, #2
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <HAL_SPI_MspInit+0xd8>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80035d2:	2302      	movs	r3, #2
 80035d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035e2:	2305      	movs	r3, #5
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	4815      	ldr	r0, [pc, #84]	; (8003644 <HAL_SPI_MspInit+0xdc>)
 80035ee:	f002 f90d 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035f2:	2301      	movs	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	2302      	movs	r3, #2
 80035f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fe:	2303      	movs	r3, #3
 8003600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003602:	2305      	movs	r3, #5
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003606:	f107 0314 	add.w	r3, r7, #20
 800360a:	4619      	mov	r1, r3
 800360c:	480d      	ldr	r0, [pc, #52]	; (8003644 <HAL_SPI_MspInit+0xdc>)
 800360e:	f002 f8fd 	bl	800580c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003612:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003624:	2305      	movs	r3, #5
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	4806      	ldr	r0, [pc, #24]	; (8003648 <HAL_SPI_MspInit+0xe0>)
 8003630:	f002 f8ec 	bl	800580c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003634:	bf00      	nop
 8003636:	3728      	adds	r7, #40	; 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40003800 	.word	0x40003800
 8003640:	40023800 	.word	0x40023800
 8003644:	40022000 	.word	0x40022000
 8003648:	40020400 	.word	0x40020400

0800364c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2e      	ldr	r2, [pc, #184]	; (8003714 <HAL_TIM_Base_MspInit+0xc8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10c      	bne.n	8003678 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	4a2d      	ldr	r2, [pc, #180]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6453      	str	r3, [r2, #68]	; 0x44
 800366a:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003676:	e046      	b.n	8003706 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d10c      	bne.n	800369c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003682:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a24      	ldr	r2, [pc, #144]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	69bb      	ldr	r3, [r7, #24]
}
 800369a:	e034      	b.n	8003706 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_TIM_Base_MspInit+0xd0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10c      	bne.n	80036c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036ac:	f043 0302 	orr.w	r3, r3, #2
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697b      	ldr	r3, [r7, #20]
}
 80036be:	e022      	b.n	8003706 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a16      	ldr	r2, [pc, #88]	; (8003720 <HAL_TIM_Base_MspInit+0xd4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d10c      	bne.n	80036e4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a12      	ldr	r2, [pc, #72]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036d0:	f043 0308 	orr.w	r3, r3, #8
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
}
 80036e2:	e010      	b.n	8003706 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_TIM_Base_MspInit+0xd8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10b      	bne.n	8003706 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036f4:	f043 0302 	orr.w	r3, r3, #2
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <HAL_TIM_Base_MspInit+0xcc>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
}
 8003706:	bf00      	nop
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40010000 	.word	0x40010000
 8003718:	40023800 	.word	0x40023800
 800371c:	40000400 	.word	0x40000400
 8003720:	40000c00 	.word	0x40000c00
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_TIM_MspPostInit+0xa8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11c      	bne.n	8003784 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_TIM_MspPostInit+0xac>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <HAL_TIM_MspPostInit+0xac>)
 8003750:	f043 0302 	orr.w	r3, r3, #2
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_TIM_MspPostInit+0xac>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003762:	2310      	movs	r3, #16
 8003764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003772:	2302      	movs	r3, #2
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4619      	mov	r1, r3
 800377c:	4816      	ldr	r0, [pc, #88]	; (80037d8 <HAL_TIM_MspPostInit+0xb0>)
 800377e:	f002 f845 	bl	800580c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003782:	e020      	b.n	80037c6 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <HAL_TIM_MspPostInit+0xb4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d11b      	bne.n	80037c6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_TIM_MspPostInit+0xac>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a10      	ldr	r2, [pc, #64]	; (80037d4 <HAL_TIM_MspPostInit+0xac>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_TIM_MspPostInit+0xac>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037a6:	2304      	movs	r3, #4
 80037a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2300      	movs	r3, #0
 80037b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80037b6:	2303      	movs	r3, #3
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	4619      	mov	r1, r3
 80037c0:	4807      	ldr	r0, [pc, #28]	; (80037e0 <HAL_TIM_MspPostInit+0xb8>)
 80037c2:	f002 f823 	bl	800580c <HAL_GPIO_Init>
}
 80037c6:	bf00      	nop
 80037c8:	3728      	adds	r7, #40	; 0x28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020400 	.word	0x40020400
 80037dc:	40010400 	.word	0x40010400
 80037e0:	40022000 	.word	0x40022000

080037e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08e      	sub	sp, #56	; 0x38
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a57      	ldr	r2, [pc, #348]	; (8003960 <HAL_UART_MspInit+0x17c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d128      	bne.n	8003858 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003806:	4b57      	ldr	r3, [pc, #348]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a56      	ldr	r2, [pc, #344]	; (8003964 <HAL_UART_MspInit+0x180>)
 800380c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b54      	ldr	r3, [pc, #336]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800381e:	4b51      	ldr	r3, [pc, #324]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a50      	ldr	r2, [pc, #320]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003824:	f043 0320 	orr.w	r3, r3, #32
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b4e      	ldr	r3, [pc, #312]	; (8003964 <HAL_UART_MspInit+0x180>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003836:	23c0      	movs	r3, #192	; 0xc0
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003842:	2303      	movs	r3, #3
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003846:	2308      	movs	r3, #8
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	4845      	ldr	r0, [pc, #276]	; (8003968 <HAL_UART_MspInit+0x184>)
 8003852:	f001 ffdb 	bl	800580c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003856:	e07f      	b.n	8003958 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a43      	ldr	r2, [pc, #268]	; (800396c <HAL_UART_MspInit+0x188>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d14d      	bne.n	80038fe <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003862:	4b40      	ldr	r3, [pc, #256]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a3f      	ldr	r2, [pc, #252]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003868:	f043 0310 	orr.w	r3, r3, #16
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800387a:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_UART_MspInit+0x180>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a33      	ldr	r2, [pc, #204]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <HAL_UART_MspInit+0x180>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	2300      	movs	r3, #0
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038ba:	2307      	movs	r3, #7
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80038be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c2:	4619      	mov	r1, r3
 80038c4:	482a      	ldr	r0, [pc, #168]	; (8003970 <HAL_UART_MspInit+0x18c>)
 80038c6:	f001 ffa1 	bl	800580c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80038ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d8:	2300      	movs	r3, #0
 80038da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038dc:	2307      	movs	r3, #7
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80038e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e4:	4619      	mov	r1, r3
 80038e6:	4823      	ldr	r0, [pc, #140]	; (8003974 <HAL_UART_MspInit+0x190>)
 80038e8:	f001 ff90 	bl	800580c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2107      	movs	r1, #7
 80038f0:	2025      	movs	r0, #37	; 0x25
 80038f2:	f001 f917 	bl	8004b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038f6:	2025      	movs	r0, #37	; 0x25
 80038f8:	f001 f930 	bl	8004b5c <HAL_NVIC_EnableIRQ>
}
 80038fc:	e02c      	b.n	8003958 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_UART_MspInit+0x194>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d127      	bne.n	8003958 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_UART_MspInit+0x180>)
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_UART_MspInit+0x180>)
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	6453      	str	r3, [r2, #68]	; 0x44
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003920:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <HAL_UART_MspInit+0x180>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6313      	str	r3, [r2, #48]	; 0x30
 800392c:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <HAL_UART_MspInit+0x180>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003938:	23c0      	movs	r3, #192	; 0xc0
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003944:	2303      	movs	r3, #3
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003948:	2308      	movs	r3, #8
 800394a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003950:	4619      	mov	r1, r3
 8003952:	480a      	ldr	r0, [pc, #40]	; (800397c <HAL_UART_MspInit+0x198>)
 8003954:	f001 ff5a 	bl	800580c <HAL_GPIO_Init>
}
 8003958:	bf00      	nop
 800395a:	3738      	adds	r7, #56	; 0x38
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40007800 	.word	0x40007800
 8003964:	40023800 	.word	0x40023800
 8003968:	40021400 	.word	0x40021400
 800396c:	40011000 	.word	0x40011000
 8003970:	40020400 	.word	0x40020400
 8003974:	40020000 	.word	0x40020000
 8003978:	40011400 	.word	0x40011400
 800397c:	40020800 	.word	0x40020800

08003980 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003994:	4b3a      	ldr	r3, [pc, #232]	; (8003a80 <HAL_FMC_MspInit+0x100>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d16d      	bne.n	8003a78 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800399c:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <HAL_FMC_MspInit+0x100>)
 800399e:	2201      	movs	r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80039a2:	4b38      	ldr	r3, [pc, #224]	; (8003a84 <HAL_FMC_MspInit+0x104>)
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	4a37      	ldr	r2, [pc, #220]	; (8003a84 <HAL_FMC_MspInit+0x104>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6393      	str	r3, [r2, #56]	; 0x38
 80039ae:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <HAL_FMC_MspInit+0x104>)
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80039ba:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c0:	2302      	movs	r3, #2
 80039c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c8:	2303      	movs	r3, #3
 80039ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039cc:	230c      	movs	r3, #12
 80039ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	4619      	mov	r1, r3
 80039d4:	482c      	ldr	r0, [pc, #176]	; (8003a88 <HAL_FMC_MspInit+0x108>)
 80039d6:	f001 ff19 	bl	800580c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80039da:	f248 1333 	movw	r3, #33075	; 0x8133
 80039de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e8:	2303      	movs	r3, #3
 80039ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80039ec:	230c      	movs	r3, #12
 80039ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4825      	ldr	r0, [pc, #148]	; (8003a8c <HAL_FMC_MspInit+0x10c>)
 80039f6:	f001 ff09 	bl	800580c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80039fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80039fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	481e      	ldr	r0, [pc, #120]	; (8003a90 <HAL_FMC_MspInit+0x110>)
 8003a16:	f001 fef9 	bl	800580c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003a1a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a20:	2302      	movs	r3, #2
 8003a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4817      	ldr	r0, [pc, #92]	; (8003a94 <HAL_FMC_MspInit+0x114>)
 8003a36:	f001 fee9 	bl	800580c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8003a3a:	2328      	movs	r3, #40	; 0x28
 8003a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a46:	2303      	movs	r3, #3
 8003a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4811      	ldr	r0, [pc, #68]	; (8003a98 <HAL_FMC_MspInit+0x118>)
 8003a54:	f001 feda 	bl	800580c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003a68:	230c      	movs	r3, #12
 8003a6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	480a      	ldr	r0, [pc, #40]	; (8003a9c <HAL_FMC_MspInit+0x11c>)
 8003a72:	f001 fecb 	bl	800580c <HAL_GPIO_Init>
 8003a76:	e000      	b.n	8003a7a <HAL_FMC_MspInit+0xfa>
    return;
 8003a78:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000b78 	.word	0x20000b78
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40021800 	.word	0x40021800
 8003a90:	40020c00 	.word	0x40020c00
 8003a94:	40021400 	.word	0x40021400
 8003a98:	40021c00 	.word	0x40021c00
 8003a9c:	40020800 	.word	0x40020800

08003aa0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003aa8:	f7ff ff6a 	bl	8003980 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e14d      	b.n	8003d6e <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f95a 	bl	8003da0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fabd 	bl	8004074 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d00c      	beq.n	8003b1c <HAL_SAI_Init+0x68>
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d80d      	bhi.n	8003b22 <HAL_SAI_Init+0x6e>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_SAI_Init+0x5c>
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d003      	beq.n	8003b16 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8003b0e:	e008      	b.n	8003b22 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
      break;
 8003b14:	e006      	b.n	8003b24 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003b16:	2310      	movs	r3, #16
 8003b18:	61fb      	str	r3, [r7, #28]
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	61fb      	str	r3, [r7, #28]
      break;
 8003b20:	e000      	b.n	8003b24 <HAL_SAI_Init+0x70>
    break;
 8003b22:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d81e      	bhi.n	8003b6a <HAL_SAI_Init+0xb6>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <HAL_SAI_Init+0x80>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b45 	.word	0x08003b45
 8003b38:	08003b4b 	.word	0x08003b4b
 8003b3c:	08003b53 	.word	0x08003b53
 8003b40:	08003b5b 	.word	0x08003b5b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
      }
      break;
 8003b48:	e010      	b.n	8003b6c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8003b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4e:	617b      	str	r3, [r7, #20]
      }
      break;
 8003b50:	e00c      	b.n	8003b6c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8003b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b56:	617b      	str	r3, [r7, #20]
      }
      break;
 8003b58:	e008      	b.n	8003b6c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8003b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b5e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
      }
      break;
 8003b68:	e000      	b.n	8003b6c <HAL_SAI_Init+0xb8>
  default:
    break;
 8003b6a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a81      	ldr	r2, [pc, #516]	; (8003d78 <HAL_SAI_Init+0x2c4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_SAI_Init+0xcc>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a80      	ldr	r2, [pc, #512]	; (8003d7c <HAL_SAI_Init+0x2c8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d103      	bne.n	8003b88 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003b80:	4a7f      	ldr	r2, [pc, #508]	; (8003d80 <HAL_SAI_Init+0x2cc>)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e002      	b.n	8003b8e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003b88:	4a7e      	ldr	r2, [pc, #504]	; (8003d84 <HAL_SAI_Init+0x2d0>)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d043      	beq.n	8003c1e <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a76      	ldr	r2, [pc, #472]	; (8003d78 <HAL_SAI_Init+0x2c4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_SAI_Init+0xfa>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a74      	ldr	r2, [pc, #464]	; (8003d7c <HAL_SAI_Init+0x2c8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d104      	bne.n	8003bb8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003bae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bb2:	f004 fb5d 	bl	8008270 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bb6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a72      	ldr	r2, [pc, #456]	; (8003d88 <HAL_SAI_Init+0x2d4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_SAI_Init+0x118>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a71      	ldr	r2, [pc, #452]	; (8003d8c <HAL_SAI_Init+0x2d8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d104      	bne.n	8003bd6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003bcc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003bd0:	f004 fb4e 	bl	8008270 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bd4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	461a      	mov	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	025b      	lsls	r3, r3, #9
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a67      	ldr	r2, [pc, #412]	; (8003d90 <HAL_SAI_Init+0x2dc>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	08da      	lsrs	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	4b64      	ldr	r3, [pc, #400]	; (8003d90 <HAL_SAI_Init+0x2dc>)
 8003c00:	fba3 2301 	umull	r2, r3, r3, r1
 8003c04:	08da      	lsrs	r2, r3, #3
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	1aca      	subs	r2, r1, r3
 8003c10:	2a08      	cmp	r2, #8
 8003c12:	d904      	bls.n	8003c1e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_SAI_Init+0x17a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d109      	bne.n	8003c42 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_SAI_Init+0x186>
 8003c36:	2300      	movs	r3, #0
 8003c38:	e001      	b.n	8003c3e <HAL_SAI_Init+0x18a>
 8003c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	e008      	b.n	8003c54 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_SAI_Init+0x19c>
 8003c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c4e:	e000      	b.n	8003c52 <HAL_SAI_Init+0x19e>
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_SAI_Init+0x2e0>)
 8003c60:	400b      	ands	r3, r1
 8003c62:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6819      	ldr	r1, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003c78:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8003c8c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003c98:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	051b      	lsls	r3, r3, #20
 8003ca0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <HAL_SAI_Init+0x2e4>)
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699a      	ldr	r2, [r3, #24]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6899      	ldr	r1, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <HAL_SAI_Init+0x2e8>)
 8003ce4:	400b      	ands	r3, r1
 8003ce6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6899      	ldr	r1, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003cf8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8003cfe:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8003d04:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8003d0e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68d9      	ldr	r1, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f24f 0320 	movw	r3, #61472	; 0xf020
 8003d26:	400b      	ands	r3, r1
 8003d28:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68d9      	ldr	r1, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	3b01      	subs	r3, #1
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40015804 	.word	0x40015804
 8003d7c:	40015824 	.word	0x40015824
 8003d80:	40015800 	.word	0x40015800
 8003d84:	40015c00 	.word	0x40015c00
 8003d88:	40015c04 	.word	0x40015c04
 8003d8c:	40015c24 	.word	0x40015c24
 8003d90:	cccccccd 	.word	0xcccccccd
 8003d94:	ff05c010 	.word	0xff05c010
 8003d98:	ffff1ff0 	.word	0xffff1ff0
 8003d9c:	fff88000 	.word	0xfff88000

08003da0 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SAI_Transmit_DMA+0x1a>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e074      	b.n	8003ebc <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d16d      	bne.n	8003eba <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_SAI_Transmit_DMA+0x38>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e067      	b.n	8003ebc <HAL_SAI_Transmit_DMA+0x108>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2212      	movs	r2, #18
 8003e16:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <HAL_SAI_Transmit_DMA+0x110>)
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e26:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <HAL_SAI_Transmit_DMA+0x114>)
 8003e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2e:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <HAL_SAI_Transmit_DMA+0x118>)
 8003e30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e36:	2200      	movs	r2, #0
 8003e38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e42:	4619      	mov	r1, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	331c      	adds	r3, #28
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003e52:	f001 f87d 	bl	8004f50 <HAL_DMA_Start_IT>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e029      	b.n	8003ebc <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003e86:	2100      	movs	r1, #0
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f8bd 	bl	8004008 <SAI_InterruptFlag>
 8003e8e:	4601      	mov	r1, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003eac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003eba:	2302      	movs	r3, #2
  }
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	08004141 	.word	0x08004141
 8003ec8:	080040e1 	.word	0x080040e1
 8003ecc:	080041d9 	.word	0x080041d9

08003ed0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SAI_Receive_DMA+0x1a>
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e074      	b.n	8003fd8 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d16d      	bne.n	8003fd6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_SAI_Receive_DMA+0x38>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e067      	b.n	8003fd8 <HAL_SAI_Receive_DMA+0x108>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2222      	movs	r2, #34	; 0x22
 8003f32:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a29      	ldr	r2, [pc, #164]	; (8003fe0 <HAL_SAI_Receive_DMA+0x110>)
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4a28      	ldr	r2, [pc, #160]	; (8003fe4 <HAL_SAI_Receive_DMA+0x114>)
 8003f44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <HAL_SAI_Receive_DMA+0x118>)
 8003f4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	2200      	movs	r2, #0
 8003f54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	331c      	adds	r3, #28
 8003f60:	4619      	mov	r1, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f6e:	f000 ffef 	bl	8004f50 <HAL_DMA_Start_IT>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e029      	b.n	8003fd8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d107      	bne.n	8003fa2 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fa0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f82f 	bl	8004008 <SAI_InterruptFlag>
 8003faa:	4601      	mov	r1, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	080041bd 	.word	0x080041bd
 8003fe4:	0800415d 	.word	0x0800415d
 8003fe8:	080041d9 	.word	0x080041d9

08003fec <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003ffa:	b2db      	uxtb	r3, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004012:	2301      	movs	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d103      	bne.n	8004024 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f043 0308 	orr.w	r3, r3, #8
 8004022:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	2b08      	cmp	r3, #8
 800402a:	d10b      	bne.n	8004044 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004030:	2b03      	cmp	r3, #3
 8004032:	d003      	beq.n	800403c <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d103      	bne.n	8004044 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f043 0310 	orr.w	r3, r3, #16
 8004042:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d003      	beq.n	8004054 <SAI_InterruptFlag+0x4c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d104      	bne.n	800405e <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e003      	b.n	8004066 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004066:	68fb      	ldr	r3, [r7, #12]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004074:	b490      	push	{r4, r7}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <SAI_Disable+0x64>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <SAI_Disable+0x68>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0b1b      	lsrs	r3, r3, #12
 8004088:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800409c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800409e:	4623      	mov	r3, r4
 80040a0:	1e5c      	subs	r4, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	73fb      	strb	r3, [r7, #15]
      break;
 80040ba:	e006      	b.n	80040ca <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e9      	bne.n	800409e <SAI_Disable+0x2a>

  return status;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc90      	pop	{r4, r7}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000048 	.word	0x20000048
 80040dc:	95cbec1b 	.word	0x95cbec1b

080040e0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d01c      	beq.n	8004132 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800410e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004110:	2100      	movs	r1, #0
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff ff78 	bl	8004008 <SAI_InterruptFlag>
 8004118:	4603      	mov	r3, r0
 800411a:	43d9      	mvns	r1, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	400a      	ands	r2, r1
 8004128:	611a      	str	r2, [r3, #16]

    hsai->State= HAL_SAI_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7fd fffc 	bl	8002130 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7fd fff8 	bl	8002144 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004172:	d01c      	beq.n	80041ae <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004182:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800418c:	2100      	movs	r1, #0
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff ff3a 	bl	8004008 <SAI_InterruptFlag>
 8004194:	4603      	mov	r3, r0
 8004196:	43d9      	mvns	r1, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	400a      	ands	r2, r1
 80041a4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7fe f810 	bl	80021d4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7fe f80c 	bl	80021e8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d004      	beq.n	800420a <SAI_DMAError+0x32>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	2b01      	cmp	r3, #1
 8004208:	d112      	bne.n	8004230 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004218:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff ff2a 	bl	8004074 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7fd ff91 	bl	8002158 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	; 0x30
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004250:	2200      	movs	r2, #0
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	2036      	movs	r0, #54	; 0x36
 8004256:	f000 fc65 	bl	8004b24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800425a:	2036      	movs	r0, #54	; 0x36
 800425c:	f000 fc7e 	bl	8004b5c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004260:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <HAL_InitTick+0xa0>)
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <HAL_InitTick+0xa0>)
 8004266:	f043 0310 	orr.w	r3, r3, #16
 800426a:	6413      	str	r3, [r2, #64]	; 0x40
 800426c:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <HAL_InitTick+0xa0>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004278:	f107 0210 	add.w	r2, r7, #16
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f003 fbd2 	bl	8007a2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004288:	f003 fba8 	bl	80079dc <HAL_RCC_GetPCLK1Freq>
 800428c:	4603      	mov	r3, r0
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <HAL_InitTick+0xa4>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0c9b      	lsrs	r3, r3, #18
 800429c:	3b01      	subs	r3, #1
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <HAL_InitTick+0xa8>)
 80042a2:	4a12      	ldr	r2, [pc, #72]	; (80042ec <HAL_InitTick+0xac>)
 80042a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_InitTick+0xa8>)
 80042a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042ae:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <HAL_InitTick+0xa8>)
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <HAL_InitTick+0xa8>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_InitTick+0xa8>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80042c0:	4809      	ldr	r0, [pc, #36]	; (80042e8 <HAL_InitTick+0xa8>)
 80042c2:	f004 fe1b 	bl	8008efc <HAL_TIM_Base_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d104      	bne.n	80042d6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80042cc:	4806      	ldr	r0, [pc, #24]	; (80042e8 <HAL_InitTick+0xa8>)
 80042ce:	f004 fe6d 	bl	8008fac <HAL_TIM_Base_Start_IT>
 80042d2:	4603      	mov	r3, r0
 80042d4:	e000      	b.n	80042d8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3730      	adds	r7, #48	; 0x30
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	431bde83 	.word	0x431bde83
 80042e8:	20004fe8 	.word	0x20004fe8
 80042ec:	40001000 	.word	0x40001000

080042f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042f4:	e7fe      	b.n	80042f4 <NMI_Handler+0x4>

080042f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f6:	b480      	push	{r7}
 80042f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042fa:	e7fe      	b.n	80042fa <HardFault_Handler+0x4>

080042fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004300:	e7fe      	b.n	8004300 <MemManage_Handler+0x4>

08004302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004306:	e7fe      	b.n	8004306 <BusFault_Handler+0x4>

08004308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800430c:	e7fe      	b.n	800430c <UsageFault_Handler+0x4>

0800430e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004320:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004324:	f001 fd5c 	bl	8005de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}

0800432c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <USART1_IRQHandler+0x10>)
 8004332:	f006 f813 	bl	800a35c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20004c64 	.word	0x20004c64

08004340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004344:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004348:	f001 fd4a 	bl	8005de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}

08004350 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <TIM6_DAC_IRQHandler+0x20>)
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800435e:	4804      	ldr	r0, [pc, #16]	; (8004370 <TIM6_DAC_IRQHandler+0x20>)
 8004360:	f000 fc2c 	bl	8004bbc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004364:	4803      	ldr	r0, [pc, #12]	; (8004374 <TIM6_DAC_IRQHandler+0x24>)
 8004366:	f004 fefa 	bl	800915e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20004cec 	.word	0x20004cec
 8004374:	20004fe8 	.word	0x20004fe8

08004378 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800437c:	4802      	ldr	r0, [pc, #8]	; (8004388 <LTDC_IRQHandler+0x10>)
 800437e:	f002 fbd3 	bl	8006b28 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20004b24 	.word	0x20004b24

0800438c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <SystemInit+0x20>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	4a05      	ldr	r2, [pc, #20]	; (80043ac <SystemInit+0x20>)
 8004398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800439c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043b6:	e003      	b.n	80043c0 <LoopCopyDataInit>

080043b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043be:	3104      	adds	r1, #4

080043c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043c0:	480b      	ldr	r0, [pc, #44]	; (80043f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043c8:	d3f6      	bcc.n	80043b8 <CopyDataInit>
  ldr  r2, =_sbss
 80043ca:	4a0b      	ldr	r2, [pc, #44]	; (80043f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043cc:	e002      	b.n	80043d4 <LoopFillZerobss>

080043ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043d0:	f842 3b04 	str.w	r3, [r2], #4

080043d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043d8:	d3f9      	bcc.n	80043ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043da:	f7ff ffd7 	bl	800438c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043de:	f008 fd13 	bl	800ce08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043e2:	f7fc fa6d 	bl	80008c0 <main>
  bx  lr    
 80043e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80043ec:	0800f0cc 	.word	0x0800f0cc
  ldr  r0, =_sdata
 80043f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043f4:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 80043f8:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 80043fc:	20005038 	.word	0x20005038

08004400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004400:	e7fe      	b.n	8004400 <ADC_IRQHandler>

08004402 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004406:	2003      	movs	r0, #3
 8004408:	f000 fb81 	bl	8004b0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800440c:	2000      	movs	r0, #0
 800440e:	f7ff ff17 	bl	8004240 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004412:	f7fe fe15 	bl	8003040 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <HAL_IncTick+0x20>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_IncTick+0x24>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4413      	add	r3, r2
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <HAL_IncTick+0x24>)
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000050 	.word	0x20000050
 8004440:	20005034 	.word	0x20005034

08004444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return uwTick;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_GetTick+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20005034 	.word	0x20005034

0800445c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004464:	f7ff ffee 	bl	8004444 <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d005      	beq.n	8004482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_Delay+0x44>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004482:	bf00      	nop
 8004484:	f7ff ffde 	bl	8004444 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	429a      	cmp	r2, r3
 8004492:	d8f7      	bhi.n	8004484 <HAL_Delay+0x28>
  {
  }
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000050 	.word	0x20000050

080044a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e031      	b.n	800451e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fe fde4 	bl	8003090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_ADC_Init+0x84>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	f043 0202 	orr.w	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f964 	bl	80047c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	f043 0201 	orr.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
 800450e:	e001      	b.n	8004514 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	ffffeefd 	.word	0xffffeefd

0800452c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e12a      	b.n	800479e <HAL_ADC_ConfigChannel+0x272>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b09      	cmp	r3, #9
 8004556:	d93a      	bls.n	80045ce <HAL_ADC_ConfigChannel+0xa2>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004560:	d035      	beq.n	80045ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68d9      	ldr	r1, [r3, #12]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	3b1e      	subs	r3, #30
 8004578:	2207      	movs	r2, #7
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	400a      	ands	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a87      	ldr	r2, [pc, #540]	; (80047ac <HAL_ADC_ConfigChannel+0x280>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d10a      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68d9      	ldr	r1, [r3, #12]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	061a      	lsls	r2, r3, #24
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045a6:	e035      	b.n	8004614 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4618      	mov	r0, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4403      	add	r3, r0
 80045c0:	3b1e      	subs	r3, #30
 80045c2:	409a      	lsls	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045cc:	e022      	b.n	8004614 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6919      	ldr	r1, [r3, #16]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	2207      	movs	r2, #7
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43da      	mvns	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	400a      	ands	r2, r1
 80045f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6919      	ldr	r1, [r3, #16]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	4618      	mov	r0, r3
 8004604:	4603      	mov	r3, r0
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4403      	add	r3, r0
 800460a:	409a      	lsls	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b06      	cmp	r3, #6
 800461a:	d824      	bhi.n	8004666 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	3b05      	subs	r3, #5
 800462e:	221f      	movs	r2, #31
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43da      	mvns	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	400a      	ands	r2, r1
 800463c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	b29b      	uxth	r3, r3
 800464a:	4618      	mov	r0, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	3b05      	subs	r3, #5
 8004658:	fa00 f203 	lsl.w	r2, r0, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	635a      	str	r2, [r3, #52]	; 0x34
 8004664:	e04c      	b.n	8004700 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d824      	bhi.n	80046b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	3b23      	subs	r3, #35	; 0x23
 8004680:	221f      	movs	r2, #31
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43da      	mvns	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	400a      	ands	r2, r1
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	4618      	mov	r0, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	3b23      	subs	r3, #35	; 0x23
 80046aa:	fa00 f203 	lsl.w	r2, r0, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
 80046b6:	e023      	b.n	8004700 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	3b41      	subs	r3, #65	; 0x41
 80046ca:	221f      	movs	r2, #31
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43da      	mvns	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	400a      	ands	r2, r1
 80046d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	4618      	mov	r0, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	3b41      	subs	r3, #65	; 0x41
 80046f4:	fa00 f203 	lsl.w	r2, r0, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2a      	ldr	r2, [pc, #168]	; (80047b0 <HAL_ADC_ConfigChannel+0x284>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10a      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x1f4>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004712:	d105      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004714:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_ADC_ConfigChannel+0x288>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <HAL_ADC_ConfigChannel+0x288>)
 800471a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800471e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_ADC_ConfigChannel+0x284>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d109      	bne.n	800473e <HAL_ADC_ConfigChannel+0x212>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b12      	cmp	r3, #18
 8004730:	d105      	bne.n	800473e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_ADC_ConfigChannel+0x288>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_ADC_ConfigChannel+0x288>)
 8004738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800473c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_ADC_ConfigChannel+0x284>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d125      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x268>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_ADC_ConfigChannel+0x280>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <HAL_ADC_ConfigChannel+0x22e>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b11      	cmp	r3, #17
 8004758:	d11c      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_ADC_ConfigChannel+0x288>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <HAL_ADC_ConfigChannel+0x288>)
 8004760:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004764:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a10      	ldr	r2, [pc, #64]	; (80047ac <HAL_ADC_ConfigChannel+0x280>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d111      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004770:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <HAL_ADC_ConfigChannel+0x28c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a11      	ldr	r2, [pc, #68]	; (80047bc <HAL_ADC_ConfigChannel+0x290>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	0c9a      	lsrs	r2, r3, #18
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004786:	e002      	b.n	800478e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3b01      	subs	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f9      	bne.n	8004788 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	10000012 	.word	0x10000012
 80047b0:	40012000 	.word	0x40012000
 80047b4:	40012300 	.word	0x40012300
 80047b8:	20000048 	.word	0x20000048
 80047bc:	431bde83 	.word	0x431bde83

080047c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80047c8:	4b78      	ldr	r3, [pc, #480]	; (80049ac <ADC_Init+0x1ec>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4a77      	ldr	r2, [pc, #476]	; (80049ac <ADC_Init+0x1ec>)
 80047ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80047d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80047d4:	4b75      	ldr	r3, [pc, #468]	; (80049ac <ADC_Init+0x1ec>)
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4973      	ldr	r1, [pc, #460]	; (80049ac <ADC_Init+0x1ec>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	021a      	lsls	r2, r3, #8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004814:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004836:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6899      	ldr	r1, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	4a58      	ldr	r2, [pc, #352]	; (80049b0 <ADC_Init+0x1f0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d022      	beq.n	800489a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004862:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6899      	ldr	r1, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e00f      	b.n	80048ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0202 	bic.w	r2, r2, #2
 80048c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6899      	ldr	r1, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	005a      	lsls	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004906:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6859      	ldr	r1, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	3b01      	subs	r3, #1
 8004914:	035a      	lsls	r2, r3, #13
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	e007      	b.n	8004930 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800492e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	3b01      	subs	r3, #1
 800494c:	051a      	lsls	r2, r3, #20
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004972:	025a      	lsls	r2, r3, #9
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6899      	ldr	r1, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	029a      	lsls	r2, r3, #10
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012300 	.word	0x40012300
 80049b0:	0f000001 	.word	0x0f000001

080049b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <__NVIC_SetPriorityGrouping+0x40>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049d0:	4013      	ands	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <__NVIC_SetPriorityGrouping+0x44>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049e2:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <__NVIC_SetPriorityGrouping+0x40>)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	60d3      	str	r3, [r2, #12]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	e000ed00 	.word	0xe000ed00
 80049f8:	05fa0000 	.word	0x05fa0000

080049fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <__NVIC_GetPriorityGrouping+0x18>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	f003 0307 	and.w	r3, r3, #7
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	e000ed00 	.word	0xe000ed00

08004a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	db0b      	blt.n	8004a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	4907      	ldr	r1, [pc, #28]	; (8004a50 <__NVIC_EnableIRQ+0x38>)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	2001      	movs	r0, #1
 8004a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	e000e100 	.word	0xe000e100

08004a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	db0a      	blt.n	8004a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	490c      	ldr	r1, [pc, #48]	; (8004aa0 <__NVIC_SetPriority+0x4c>)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	0112      	lsls	r2, r2, #4
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	440b      	add	r3, r1
 8004a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a7c:	e00a      	b.n	8004a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	4908      	ldr	r1, [pc, #32]	; (8004aa4 <__NVIC_SetPriority+0x50>)
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	3b04      	subs	r3, #4
 8004a8c:	0112      	lsls	r2, r2, #4
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	440b      	add	r3, r1
 8004a92:	761a      	strb	r2, [r3, #24]
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000e100 	.word	0xe000e100
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f1c3 0307 	rsb	r3, r3, #7
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	bf28      	it	cs
 8004ac6:	2304      	movcs	r3, #4
 8004ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3304      	adds	r3, #4
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d902      	bls.n	8004ad8 <NVIC_EncodePriority+0x30>
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	3b03      	subs	r3, #3
 8004ad6:	e000      	b.n	8004ada <NVIC_EncodePriority+0x32>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	401a      	ands	r2, r3
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af0:	f04f 31ff 	mov.w	r1, #4294967295
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	43d9      	mvns	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	4313      	orrs	r3, r2
         );
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff4c 	bl	80049b4 <__NVIC_SetPriorityGrouping>
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b36:	f7ff ff61 	bl	80049fc <__NVIC_GetPriorityGrouping>
 8004b3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f7ff ffb1 	bl	8004aa8 <NVIC_EncodePriority>
 8004b46:	4602      	mov	r2, r0
 8004b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff ff80 	bl	8004a54 <__NVIC_SetPriority>
}
 8004b54:	bf00      	nop
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff54 	bl	8004a18 <__NVIC_EnableIRQ>
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e014      	b.n	8004bb4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fe fae6 	bl	800316c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	d120      	bne.n	8004c16 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be2:	d118      	bne.n	8004c16 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2204      	movs	r2, #4
 8004be8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f043 0201 	orr.w	r2, r3, #1
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f82d 	bl	8004c70 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c24:	d120      	bne.n	8004c68 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c34:	d118      	bne.n	8004c68 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f043 0202 	orr.w	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004c60:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f85d 	bl	8004d22 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	795b      	ldrb	r3, [r3, #5]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_DAC_ConfigChannel+0x18>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e03c      	b.n	8004d16 <HAL_DAC_ConfigChannel+0x92>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6819      	ldr	r1, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	22c0      	movs	r2, #192	; 0xc0
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	400a      	ands	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d44:	f7ff fb7e 	bl	8004444 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e099      	b.n	8004e88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d74:	e00f      	b.n	8004d96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d76:	f7ff fb65 	bl	8004444 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b05      	cmp	r3, #5
 8004d82:	d908      	bls.n	8004d96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e078      	b.n	8004e88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e8      	bne.n	8004d76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4b38      	ldr	r3, [pc, #224]	; (8004e90 <HAL_DMA_Init+0x158>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d107      	bne.n	8004e00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d117      	bne.n	8004e5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00e      	beq.n	8004e5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f9dd 	bl	80051fc <DMA_CheckFifoParam>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2240      	movs	r2, #64	; 0x40
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e56:	2301      	movs	r3, #1
 8004e58:	e016      	b.n	8004e88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f994 	bl	8005190 <DMA_CalcBaseAndBitshift>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e70:	223f      	movs	r2, #63	; 0x3f
 8004e72:	409a      	lsls	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	f010803f 	.word	0xf010803f

08004e94 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e050      	b.n	8004f48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e048      	b.n	8004f48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2221      	movs	r2, #33	; 0x21
 8004ef4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f94a 	bl	8005190 <DMA_CalcBaseAndBitshift>
 8004efc:	4603      	mov	r3, r0
 8004efe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f04:	223f      	movs	r2, #63	; 0x3f
 8004f06:	409a      	lsls	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_DMA_Start_IT+0x26>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e048      	b.n	8005008 <HAL_DMA_Start_IT+0xb8>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d137      	bne.n	8004ffa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f8c8 	bl	8005134 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa8:	223f      	movs	r2, #63	; 0x3f
 8004faa:	409a      	lsls	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0216 	orr.w	r2, r2, #22
 8004fbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0208 	orr.w	r2, r2, #8
 8004fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e005      	b.n	8005006 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005002:	2302      	movs	r3, #2
 8005004:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800501e:	f7ff fa11 	bl	8004444 <HAL_GetTick>
 8005022:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d008      	beq.n	8005042 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e052      	b.n	80050e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0216 	bic.w	r2, r2, #22
 8005050:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005060:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <HAL_DMA_Abort+0x62>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0208 	bic.w	r2, r2, #8
 8005080:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005092:	e013      	b.n	80050bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005094:	f7ff f9d6 	bl	8004444 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b05      	cmp	r3, #5
 80050a0:	d90c      	bls.n	80050bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2203      	movs	r2, #3
 80050b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e015      	b.n	80050e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e4      	bne.n	8005094 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	223f      	movs	r2, #63	; 0x3f
 80050d0:	409a      	lsls	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d004      	beq.n	800510e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2280      	movs	r2, #128	; 0x80
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e00c      	b.n	8005128 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2205      	movs	r2, #5
 8005112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005150:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d108      	bne.n	8005174 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005172:	e007      	b.n	8005184 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	3b10      	subs	r3, #16
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <DMA_CalcBaseAndBitshift+0x60>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <DMA_CalcBaseAndBitshift+0x64>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d908      	bls.n	80051d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <DMA_CalcBaseAndBitshift+0x68>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	1d1a      	adds	r2, r3, #4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	659a      	str	r2, [r3, #88]	; 0x58
 80051ce:	e006      	b.n	80051de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <DMA_CalcBaseAndBitshift+0x68>)
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	aaaaaaab 	.word	0xaaaaaaab
 80051f4:	0800f0b4 	.word	0x0800f0b4
 80051f8:	fffffc00 	.word	0xfffffc00

080051fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11f      	bne.n	8005256 <DMA_CheckFifoParam+0x5a>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d856      	bhi.n	80052ca <DMA_CheckFifoParam+0xce>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <DMA_CheckFifoParam+0x28>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005235 	.word	0x08005235
 8005228:	08005247 	.word	0x08005247
 800522c:	08005235 	.word	0x08005235
 8005230:	080052cb 	.word	0x080052cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d046      	beq.n	80052ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005244:	e043      	b.n	80052ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800524e:	d140      	bne.n	80052d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005254:	e03d      	b.n	80052d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525e:	d121      	bne.n	80052a4 <DMA_CheckFifoParam+0xa8>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b03      	cmp	r3, #3
 8005264:	d837      	bhi.n	80052d6 <DMA_CheckFifoParam+0xda>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <DMA_CheckFifoParam+0x70>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	0800527d 	.word	0x0800527d
 8005270:	08005283 	.word	0x08005283
 8005274:	0800527d 	.word	0x0800527d
 8005278:	08005295 	.word	0x08005295
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
      break;
 8005280:	e030      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d025      	beq.n	80052da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005292:	e022      	b.n	80052da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800529c:	d11f      	bne.n	80052de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052a2:	e01c      	b.n	80052de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d903      	bls.n	80052b2 <DMA_CheckFifoParam+0xb6>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d003      	beq.n	80052b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052b0:	e018      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	73fb      	strb	r3, [r7, #15]
      break;
 80052b6:	e015      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00e      	beq.n	80052e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	73fb      	strb	r3, [r7, #15]
      break;
 80052c8:	e00b      	b.n	80052e2 <DMA_CheckFifoParam+0xe6>
      break;
 80052ca:	bf00      	nop
 80052cc:	e00a      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
      break;
 80052ce:	bf00      	nop
 80052d0:	e008      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
      break;
 80052d2:	bf00      	nop
 80052d4:	e006      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
      break;
 80052d6:	bf00      	nop
 80052d8:	e004      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
      break;
 80052da:	bf00      	nop
 80052dc:	e002      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80052de:	bf00      	nop
 80052e0:	e000      	b.n	80052e4 <DMA_CheckFifoParam+0xe8>
      break;
 80052e2:	bf00      	nop
    }
  } 
  
  return status; 
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop

080052f4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e039      	b.n	800537a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fd ff6e 	bl	80031fc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	f023 0107 	bic.w	r1, r3, #7
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <HAL_DMA2D_Init+0x90>)
 800535c:	4013      	ands	r3, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68d1      	ldr	r1, [r2, #12]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	430b      	orrs	r3, r1
 8005368:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	ffffc000 	.word	0xffffc000

08005388 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_DMA2D_Start+0x1c>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e018      	b.n	80053d6 <HAL_DMA2D_Start+0x4e>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f988 	bl	80056d4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b086      	sub	sp, #24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d056      	beq.n	80054a8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80053fa:	f7ff f823 	bl	8004444 <HAL_GetTick>
 80053fe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005400:	e04b      	b.n	800549a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005410:	2b00      	cmp	r3, #0
 8005412:	d023      	beq.n	800545c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	f043 0202 	orr.w	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	f043 0201 	orr.w	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2221      	movs	r2, #33	; 0x21
 8005446:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2204      	movs	r2, #4
 800544c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0a5      	b.n	80055a8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d01a      	beq.n	800549a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005464:	f7fe ffee 	bl	8004444 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <HAL_DMA2D_PollForTransfer+0x9c>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10f      	bne.n	800549a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2203      	movs	r2, #3
 800548a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e086      	b.n	80055a8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ac      	beq.n	8005402 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d061      	beq.n	800558e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80054ca:	f7fe ffbb 	bl	8004444 <HAL_GetTick>
 80054ce:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80054d0:	e056      	b.n	8005580 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02e      	beq.n	8005542 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	f043 0204 	orr.w	r2, r3, #4
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	f043 0202 	orr.w	r2, r3, #2
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	f043 0201 	orr.w	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2229      	movs	r2, #41	; 0x29
 800552c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2204      	movs	r2, #4
 8005532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e032      	b.n	80055a8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d01a      	beq.n	8005580 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800554a:	f7fe ff7b 	bl	8004444 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d302      	bcc.n	8005560 <HAL_DMA2D_PollForTransfer+0x182>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10f      	bne.n	8005580 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2203      	movs	r2, #3
 8005570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e013      	b.n	80055a8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0a1      	beq.n	80054d2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2212      	movs	r2, #18
 8005594:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_DMA2D_ConfigLayer+0x20>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e079      	b.n	80056c4 <HAL_DMA2D_ConfigLayer+0x114>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	3318      	adds	r3, #24
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80055fa:	4b35      	ldr	r3, [pc, #212]	; (80056d0 <HAL_DMA2D_ConfigLayer+0x120>)
 80055fc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b0a      	cmp	r3, #10
 8005604:	d003      	beq.n	800560e <HAL_DMA2D_ConfigLayer+0x5e>
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b09      	cmp	r3, #9
 800560c:	d107      	bne.n	800561e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e005      	b.n	800562a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	061b      	lsls	r3, r3, #24
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d120      	bne.n	8005672 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	43db      	mvns	r3, r3
 800563a:	ea02 0103 	and.w	r1, r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	430a      	orrs	r2, r1
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b0a      	cmp	r3, #10
 8005658:	d003      	beq.n	8005662 <HAL_DMA2D_ConfigLayer+0xb2>
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b09      	cmp	r3, #9
 8005660:	d127      	bne.n	80056b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800566e:	629a      	str	r2, [r3, #40]	; 0x28
 8005670:	e01f      	b.n	80056b2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	43db      	mvns	r3, r3
 800567c:	ea02 0103 	and.w	r1, r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	430a      	orrs	r2, r1
 8005688:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b0a      	cmp	r3, #10
 800569a:	d003      	beq.n	80056a4 <HAL_DMA2D_ConfigLayer+0xf4>
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b09      	cmp	r3, #9
 80056a2:	d106      	bne.n	80056b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80056b0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	ff03000f 	.word	0xff03000f

080056d4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b08b      	sub	sp, #44	; 0x2c
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	041a      	lsls	r2, r3, #16
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	431a      	orrs	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800570c:	d174      	bne.n	80057f8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005714:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800571c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005724:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d108      	bne.n	8005746 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	431a      	orrs	r2, r3
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	4313      	orrs	r3, r2
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
 8005744:	e053      	b.n	80057ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d106      	bne.n	800575c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4313      	orrs	r3, r2
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 800575a:	e048      	b.n	80057ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b02      	cmp	r3, #2
 8005762:	d111      	bne.n	8005788 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	0cdb      	lsrs	r3, r3, #19
 8005768:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	0a9b      	lsrs	r3, r3, #10
 800576e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	08db      	lsrs	r3, r3, #3
 8005774:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	02db      	lsls	r3, r3, #11
 800577e:	4313      	orrs	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
 8005786:	e032      	b.n	80057ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d117      	bne.n	80057c0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	0fdb      	lsrs	r3, r3, #31
 8005794:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	0cdb      	lsrs	r3, r3, #19
 800579a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	0adb      	lsrs	r3, r3, #11
 80057a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	029b      	lsls	r3, r3, #10
 80057b0:	431a      	orrs	r2, r3
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	03db      	lsls	r3, r3, #15
 80057b6:	4313      	orrs	r3, r2
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	e016      	b.n	80057ee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	0f1b      	lsrs	r3, r3, #28
 80057c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	0d1b      	lsrs	r3, r3, #20
 80057ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	0b1b      	lsrs	r3, r3, #12
 80057d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	011a      	lsls	r2, r3, #4
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	431a      	orrs	r2, r3
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	031b      	lsls	r3, r3, #12
 80057e6:	4313      	orrs	r3, r2
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80057f6:	e003      	b.n	8005800 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	60da      	str	r2, [r3, #12]
}
 8005800:	bf00      	nop
 8005802:	372c      	adds	r7, #44	; 0x2c
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800580c:	b480      	push	{r7}
 800580e:	b089      	sub	sp, #36	; 0x24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005822:	2300      	movs	r3, #0
 8005824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	e175      	b.n	8005b18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800582c:	2201      	movs	r2, #1
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4013      	ands	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	f040 8164 	bne.w	8005b12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d00b      	beq.n	800586a <HAL_GPIO_Init+0x5e>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d007      	beq.n	800586a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800585e:	2b11      	cmp	r3, #17
 8005860:	d003      	beq.n	800586a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b12      	cmp	r3, #18
 8005868:	d130      	bne.n	80058cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	2203      	movs	r2, #3
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4013      	ands	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4313      	orrs	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058a0:	2201      	movs	r2, #1
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	43db      	mvns	r3, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	f003 0201 	and.w	r2, r3, #1
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	2203      	movs	r2, #3
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4013      	ands	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x100>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b12      	cmp	r3, #18
 800590a:	d123      	bne.n	8005954 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	08da      	lsrs	r2, r3, #3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3208      	adds	r2, #8
 8005914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	220f      	movs	r2, #15
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	43db      	mvns	r3, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4013      	ands	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	4313      	orrs	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	08da      	lsrs	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3208      	adds	r2, #8
 800594e:	69b9      	ldr	r1, [r7, #24]
 8005950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	2203      	movs	r2, #3
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4013      	ands	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 0203 	and.w	r2, r3, #3
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4313      	orrs	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80be 	beq.w	8005b12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005996:	4b66      	ldr	r3, [pc, #408]	; (8005b30 <HAL_GPIO_Init+0x324>)
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	4a65      	ldr	r2, [pc, #404]	; (8005b30 <HAL_GPIO_Init+0x324>)
 800599c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059a0:	6453      	str	r3, [r2, #68]	; 0x44
 80059a2:	4b63      	ldr	r3, [pc, #396]	; (8005b30 <HAL_GPIO_Init+0x324>)
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80059ae:	4a61      	ldr	r2, [pc, #388]	; (8005b34 <HAL_GPIO_Init+0x328>)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	3302      	adds	r3, #2
 80059b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	220f      	movs	r2, #15
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <HAL_GPIO_Init+0x32c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d037      	beq.n	8005a4a <HAL_GPIO_Init+0x23e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a57      	ldr	r2, [pc, #348]	; (8005b3c <HAL_GPIO_Init+0x330>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d031      	beq.n	8005a46 <HAL_GPIO_Init+0x23a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a56      	ldr	r2, [pc, #344]	; (8005b40 <HAL_GPIO_Init+0x334>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d02b      	beq.n	8005a42 <HAL_GPIO_Init+0x236>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a55      	ldr	r2, [pc, #340]	; (8005b44 <HAL_GPIO_Init+0x338>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d025      	beq.n	8005a3e <HAL_GPIO_Init+0x232>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a54      	ldr	r2, [pc, #336]	; (8005b48 <HAL_GPIO_Init+0x33c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d01f      	beq.n	8005a3a <HAL_GPIO_Init+0x22e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a53      	ldr	r2, [pc, #332]	; (8005b4c <HAL_GPIO_Init+0x340>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d019      	beq.n	8005a36 <HAL_GPIO_Init+0x22a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a52      	ldr	r2, [pc, #328]	; (8005b50 <HAL_GPIO_Init+0x344>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <HAL_GPIO_Init+0x226>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a51      	ldr	r2, [pc, #324]	; (8005b54 <HAL_GPIO_Init+0x348>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00d      	beq.n	8005a2e <HAL_GPIO_Init+0x222>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a50      	ldr	r2, [pc, #320]	; (8005b58 <HAL_GPIO_Init+0x34c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <HAL_GPIO_Init+0x21e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a4f      	ldr	r2, [pc, #316]	; (8005b5c <HAL_GPIO_Init+0x350>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d101      	bne.n	8005a26 <HAL_GPIO_Init+0x21a>
 8005a22:	2309      	movs	r3, #9
 8005a24:	e012      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a26:	230a      	movs	r3, #10
 8005a28:	e010      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	e00e      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a2e:	2307      	movs	r3, #7
 8005a30:	e00c      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a32:	2306      	movs	r3, #6
 8005a34:	e00a      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a36:	2305      	movs	r3, #5
 8005a38:	e008      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	e006      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e004      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e002      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <HAL_GPIO_Init+0x240>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	f002 0203 	and.w	r2, r2, #3
 8005a52:	0092      	lsls	r2, r2, #2
 8005a54:	4093      	lsls	r3, r2
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a5c:	4935      	ldr	r1, [pc, #212]	; (8005b34 <HAL_GPIO_Init+0x328>)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	3302      	adds	r3, #2
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a6a:	4b3d      	ldr	r3, [pc, #244]	; (8005b60 <HAL_GPIO_Init+0x354>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a8e:	4a34      	ldr	r2, [pc, #208]	; (8005b60 <HAL_GPIO_Init+0x354>)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a94:	4b32      	ldr	r3, [pc, #200]	; (8005b60 <HAL_GPIO_Init+0x354>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ab8:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <HAL_GPIO_Init+0x354>)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005abe:	4b28      	ldr	r3, [pc, #160]	; (8005b60 <HAL_GPIO_Init+0x354>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ae2:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <HAL_GPIO_Init+0x354>)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <HAL_GPIO_Init+0x354>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b0c:	4a14      	ldr	r2, [pc, #80]	; (8005b60 <HAL_GPIO_Init+0x354>)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	f67f ae86 	bls.w	800582c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	3724      	adds	r7, #36	; 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40013800 	.word	0x40013800
 8005b38:	40020000 	.word	0x40020000
 8005b3c:	40020400 	.word	0x40020400
 8005b40:	40020800 	.word	0x40020800
 8005b44:	40020c00 	.word	0x40020c00
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	40021400 	.word	0x40021400
 8005b50:	40021800 	.word	0x40021800
 8005b54:	40021c00 	.word	0x40021c00
 8005b58:	40022000 	.word	0x40022000
 8005b5c:	40022400 	.word	0x40022400
 8005b60:	40013c00 	.word	0x40013c00

08005b64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e0d9      	b.n	8005d34 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b80:	2201      	movs	r2, #1
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	f040 80c9 	bne.w	8005d2e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005b9c:	4a6b      	ldr	r2, [pc, #428]	; (8005d4c <HAL_GPIO_DeInit+0x1e8>)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	089b      	lsrs	r3, r3, #2
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	220f      	movs	r2, #15
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a63      	ldr	r2, [pc, #396]	; (8005d50 <HAL_GPIO_DeInit+0x1ec>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d037      	beq.n	8005c36 <HAL_GPIO_DeInit+0xd2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a62      	ldr	r2, [pc, #392]	; (8005d54 <HAL_GPIO_DeInit+0x1f0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d031      	beq.n	8005c32 <HAL_GPIO_DeInit+0xce>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a61      	ldr	r2, [pc, #388]	; (8005d58 <HAL_GPIO_DeInit+0x1f4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d02b      	beq.n	8005c2e <HAL_GPIO_DeInit+0xca>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a60      	ldr	r2, [pc, #384]	; (8005d5c <HAL_GPIO_DeInit+0x1f8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d025      	beq.n	8005c2a <HAL_GPIO_DeInit+0xc6>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a5f      	ldr	r2, [pc, #380]	; (8005d60 <HAL_GPIO_DeInit+0x1fc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01f      	beq.n	8005c26 <HAL_GPIO_DeInit+0xc2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a5e      	ldr	r2, [pc, #376]	; (8005d64 <HAL_GPIO_DeInit+0x200>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d019      	beq.n	8005c22 <HAL_GPIO_DeInit+0xbe>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a5d      	ldr	r2, [pc, #372]	; (8005d68 <HAL_GPIO_DeInit+0x204>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <HAL_GPIO_DeInit+0xba>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a5c      	ldr	r2, [pc, #368]	; (8005d6c <HAL_GPIO_DeInit+0x208>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00d      	beq.n	8005c1a <HAL_GPIO_DeInit+0xb6>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a5b      	ldr	r2, [pc, #364]	; (8005d70 <HAL_GPIO_DeInit+0x20c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d007      	beq.n	8005c16 <HAL_GPIO_DeInit+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a5a      	ldr	r2, [pc, #360]	; (8005d74 <HAL_GPIO_DeInit+0x210>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d101      	bne.n	8005c12 <HAL_GPIO_DeInit+0xae>
 8005c0e:	2309      	movs	r3, #9
 8005c10:	e012      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c12:	230a      	movs	r3, #10
 8005c14:	e010      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c16:	2308      	movs	r3, #8
 8005c18:	e00e      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c1a:	2307      	movs	r3, #7
 8005c1c:	e00c      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c1e:	2306      	movs	r3, #6
 8005c20:	e00a      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c22:	2305      	movs	r3, #5
 8005c24:	e008      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c26:	2304      	movs	r3, #4
 8005c28:	e006      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e004      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e002      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <HAL_GPIO_DeInit+0xd4>
 8005c36:	2300      	movs	r3, #0
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	f002 0203 	and.w	r2, r2, #3
 8005c3e:	0092      	lsls	r2, r2, #2
 8005c40:	4093      	lsls	r3, r2
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d132      	bne.n	8005cae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005c48:	4b4b      	ldr	r3, [pc, #300]	; (8005d78 <HAL_GPIO_DeInit+0x214>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	4949      	ldr	r1, [pc, #292]	; (8005d78 <HAL_GPIO_DeInit+0x214>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005c56:	4b48      	ldr	r3, [pc, #288]	; (8005d78 <HAL_GPIO_DeInit+0x214>)
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	4946      	ldr	r1, [pc, #280]	; (8005d78 <HAL_GPIO_DeInit+0x214>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c64:	4b44      	ldr	r3, [pc, #272]	; (8005d78 <HAL_GPIO_DeInit+0x214>)
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	4942      	ldr	r1, [pc, #264]	; (8005d78 <HAL_GPIO_DeInit+0x214>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005c72:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <HAL_GPIO_DeInit+0x214>)
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	493f      	ldr	r1, [pc, #252]	; (8005d78 <HAL_GPIO_DeInit+0x214>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	220f      	movs	r2, #15
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005c90:	4a2e      	ldr	r2, [pc, #184]	; (8005d4c <HAL_GPIO_DeInit+0x1e8>)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	3302      	adds	r3, #2
 8005c98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	43da      	mvns	r2, r3
 8005ca0:	482a      	ldr	r0, [pc, #168]	; (8005d4c <HAL_GPIO_DeInit+0x1e8>)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	400a      	ands	r2, r1
 8005ca8:	3302      	adds	r3, #2
 8005caa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	2103      	movs	r1, #3
 8005cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	401a      	ands	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	08da      	lsrs	r2, r3, #3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3208      	adds	r2, #8
 8005ccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	220f      	movs	r2, #15
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	08d2      	lsrs	r2, r2, #3
 8005ce4:	4019      	ands	r1, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3208      	adds	r2, #8
 8005cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	2103      	movs	r1, #3
 8005cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	401a      	ands	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	401a      	ands	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	2103      	movs	r1, #3
 8005d22:	fa01 f303 	lsl.w	r3, r1, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	401a      	ands	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	3301      	adds	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b0f      	cmp	r3, #15
 8005d38:	f67f af22 	bls.w	8005b80 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40013800 	.word	0x40013800
 8005d50:	40020000 	.word	0x40020000
 8005d54:	40020400 	.word	0x40020400
 8005d58:	40020800 	.word	0x40020800
 8005d5c:	40020c00 	.word	0x40020c00
 8005d60:	40021000 	.word	0x40021000
 8005d64:	40021400 	.word	0x40021400
 8005d68:	40021800 	.word	0x40021800
 8005d6c:	40021c00 	.word	0x40021c00
 8005d70:	40022000 	.word	0x40022000
 8005d74:	40022400 	.word	0x40022400
 8005d78:	40013c00 	.word	0x40013c00

08005d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	887b      	ldrh	r3, [r7, #2]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
 8005d98:	e001      	b.n	8005d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	807b      	strh	r3, [r7, #2]
 8005db8:	4613      	mov	r3, r2
 8005dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dbc:	787b      	ldrb	r3, [r7, #1]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dc2:	887a      	ldrh	r2, [r7, #2]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005dc8:	e003      	b.n	8005dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005dca:	887b      	ldrh	r3, [r7, #2]
 8005dcc:	041a      	lsls	r2, r3, #16
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	619a      	str	r2, [r3, #24]
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005dea:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005df6:	4a05      	ldr	r2, [pc, #20]	; (8005e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005df8:	88fb      	ldrh	r3, [r7, #6]
 8005dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f806 	bl	8005e10 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40013c00 	.word	0x40013c00

08005e10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e07f      	b.n	8005f3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fd f9f4 	bl	800323c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2224      	movs	r2, #36	; 0x24
 8005e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d107      	bne.n	8005ea2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e9e:	609a      	str	r2, [r3, #8]
 8005ea0:	e006      	b.n	8005eb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d104      	bne.n	8005ec2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ec0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6859      	ldr	r1, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <HAL_I2C_Init+0x11c>)
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	ea42 0103 	orr.w	r1, r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69d9      	ldr	r1, [r3, #28]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	02008000 	.word	0x02008000

08005f48 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e021      	b.n	8005f9e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2224      	movs	r2, #36	; 0x24
 8005f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fd f9da 	bl	800332c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	817b      	strh	r3, [r7, #10]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	813b      	strh	r3, [r7, #8]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	f040 80f9 	bne.w	80061c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_I2C_Mem_Write+0x34>
 8005fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d105      	bne.n	8005fe8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0ed      	b.n	80061c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2C_Mem_Write+0x4e>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e0e6      	b.n	80061c4 <HAL_I2C_Mem_Write+0x21c>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ffe:	f7fe fa21 	bl	8004444 <HAL_GetTick>
 8006002:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	2319      	movs	r3, #25
 800600a:	2201      	movs	r2, #1
 800600c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fad1 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e0d1      	b.n	80061c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2221      	movs	r2, #33	; 0x21
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2240      	movs	r2, #64	; 0x40
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a3a      	ldr	r2, [r7, #32]
 800603a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006040:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006048:	88f8      	ldrh	r0, [r7, #6]
 800604a:	893a      	ldrh	r2, [r7, #8]
 800604c:	8979      	ldrh	r1, [r7, #10]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	4603      	mov	r3, r0
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f9e1 	bl	8006420 <I2C_RequestMemoryWrite>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0a9      	b.n	80061c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2bff      	cmp	r3, #255	; 0xff
 8006078:	d90e      	bls.n	8006098 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	22ff      	movs	r2, #255	; 0xff
 800607e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006084:	b2da      	uxtb	r2, r3
 8006086:	8979      	ldrh	r1, [r7, #10]
 8006088:	2300      	movs	r3, #0
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 fbb3 	bl	80067fc <I2C_TransferConfig>
 8006096:	e00f      	b.n	80060b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	8979      	ldrh	r1, [r7, #10]
 80060aa:	2300      	movs	r3, #0
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fba2 	bl	80067fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fabb 	bl	8006638 <I2C_WaitOnTXISFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e07b      	b.n	80061c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d034      	beq.n	8006170 <HAL_I2C_Mem_Write+0x1c8>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d130      	bne.n	8006170 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	2200      	movs	r2, #0
 8006116:	2180      	movs	r1, #128	; 0x80
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa4d 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e04d      	b.n	80061c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	2bff      	cmp	r3, #255	; 0xff
 8006130:	d90e      	bls.n	8006150 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613c:	b2da      	uxtb	r2, r3
 800613e:	8979      	ldrh	r1, [r7, #10]
 8006140:	2300      	movs	r3, #0
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fb57 	bl	80067fc <I2C_TransferConfig>
 800614e:	e00f      	b.n	8006170 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	b2da      	uxtb	r2, r3
 8006160:	8979      	ldrh	r1, [r7, #10]
 8006162:	2300      	movs	r3, #0
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fb46 	bl	80067fc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d19e      	bne.n	80060b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fa9a 	bl	80066b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e01a      	b.n	80061c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2220      	movs	r2, #32
 8006194:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6859      	ldr	r1, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <HAL_I2C_Mem_Write+0x224>)
 80061a2:	400b      	ands	r3, r1
 80061a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e000      	b.n	80061c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80061c2:	2302      	movs	r3, #2
  }
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	fe00e800 	.word	0xfe00e800

080061d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	817b      	strh	r3, [r7, #10]
 80061e2:	460b      	mov	r3, r1
 80061e4:	813b      	strh	r3, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	f040 80fd 	bne.w	80063f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_I2C_Mem_Read+0x34>
 80061fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0f1      	b.n	80063f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_I2C_Mem_Read+0x4e>
 800621a:	2302      	movs	r3, #2
 800621c:	e0ea      	b.n	80063f4 <HAL_I2C_Mem_Read+0x224>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006226:	f7fe f90d 	bl	8004444 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	2319      	movs	r3, #25
 8006232:	2201      	movs	r2, #1
 8006234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f9bd 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0d5      	b.n	80063f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2222      	movs	r2, #34	; 0x22
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2240      	movs	r2, #64	; 0x40
 8006254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006270:	88f8      	ldrh	r0, [r7, #6]
 8006272:	893a      	ldrh	r2, [r7, #8]
 8006274:	8979      	ldrh	r1, [r7, #10]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4603      	mov	r3, r0
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f921 	bl	80064c8 <I2C_RequestMemoryRead>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0ad      	b.n	80063f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	2bff      	cmp	r3, #255	; 0xff
 80062a0:	d90e      	bls.n	80062c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	22ff      	movs	r2, #255	; 0xff
 80062a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	8979      	ldrh	r1, [r7, #10]
 80062b0:	4b52      	ldr	r3, [pc, #328]	; (80063fc <HAL_I2C_Mem_Read+0x22c>)
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fa9f 	bl	80067fc <I2C_TransferConfig>
 80062be:	e00f      	b.n	80062e0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	8979      	ldrh	r1, [r7, #10]
 80062d2:	4b4a      	ldr	r3, [pc, #296]	; (80063fc <HAL_I2C_Mem_Read+0x22c>)
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fa8e 	bl	80067fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	2200      	movs	r2, #0
 80062e8:	2104      	movs	r1, #4
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f964 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e07c      	b.n	80063f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d034      	beq.n	80063a0 <HAL_I2C_Mem_Read+0x1d0>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d130      	bne.n	80063a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	2200      	movs	r2, #0
 8006346:	2180      	movs	r1, #128	; 0x80
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f935 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e04d      	b.n	80063f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	2bff      	cmp	r3, #255	; 0xff
 8006360:	d90e      	bls.n	8006380 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	22ff      	movs	r2, #255	; 0xff
 8006366:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636c:	b2da      	uxtb	r2, r3
 800636e:	8979      	ldrh	r1, [r7, #10]
 8006370:	2300      	movs	r3, #0
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fa3f 	bl	80067fc <I2C_TransferConfig>
 800637e:	e00f      	b.n	80063a0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638e:	b2da      	uxtb	r2, r3
 8006390:	8979      	ldrh	r1, [r7, #10]
 8006392:	2300      	movs	r3, #0
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fa2e 	bl	80067fc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d19a      	bne.n	80062e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f982 	bl	80066b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e01a      	b.n	80063f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2220      	movs	r2, #32
 80063c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6859      	ldr	r1, [r3, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <HAL_I2C_Mem_Read+0x230>)
 80063d2:	400b      	ands	r3, r1
 80063d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e000      	b.n	80063f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
  }
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	80002400 	.word	0x80002400
 8006400:	fe00e800 	.word	0xfe00e800

08006404 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	461a      	mov	r2, r3
 800642e:	4603      	mov	r3, r0
 8006430:	817b      	strh	r3, [r7, #10]
 8006432:	460b      	mov	r3, r1
 8006434:	813b      	strh	r3, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	b2da      	uxtb	r2, r3
 800643e:	8979      	ldrh	r1, [r7, #10]
 8006440:	4b20      	ldr	r3, [pc, #128]	; (80064c4 <I2C_RequestMemoryWrite+0xa4>)
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f9d7 	bl	80067fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	69b9      	ldr	r1, [r7, #24]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f8f0 	bl	8006638 <I2C_WaitOnTXISFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e02c      	b.n	80064bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d105      	bne.n	8006474 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006468:	893b      	ldrh	r3, [r7, #8]
 800646a:	b2da      	uxtb	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
 8006472:	e015      	b.n	80064a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006474:	893b      	ldrh	r3, [r7, #8]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	b29b      	uxth	r3, r3
 800647a:	b2da      	uxtb	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	69b9      	ldr	r1, [r7, #24]
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f8d6 	bl	8006638 <I2C_WaitOnTXISFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e012      	b.n	80064bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006496:	893b      	ldrh	r3, [r7, #8]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	2200      	movs	r2, #0
 80064a8:	2180      	movs	r1, #128	; 0x80
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f884 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	80002000 	.word	0x80002000

080064c8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	817b      	strh	r3, [r7, #10]
 80064da:	460b      	mov	r3, r1
 80064dc:	813b      	strh	r3, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	8979      	ldrh	r1, [r7, #10]
 80064e8:	4b20      	ldr	r3, [pc, #128]	; (800656c <I2C_RequestMemoryRead+0xa4>)
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2300      	movs	r3, #0
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f984 	bl	80067fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	69b9      	ldr	r1, [r7, #24]
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f89d 	bl	8006638 <I2C_WaitOnTXISFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e02c      	b.n	8006562 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d105      	bne.n	800651a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800650e:	893b      	ldrh	r3, [r7, #8]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
 8006518:	e015      	b.n	8006546 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800651a:	893b      	ldrh	r3, [r7, #8]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	b29b      	uxth	r3, r3
 8006520:	b2da      	uxtb	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	69b9      	ldr	r1, [r7, #24]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f883 	bl	8006638 <I2C_WaitOnTXISFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e012      	b.n	8006562 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800653c:	893b      	ldrh	r3, [r7, #8]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2200      	movs	r2, #0
 800654e:	2140      	movs	r1, #64	; 0x40
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f831 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e000      	b.n	8006562 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	80002000 	.word	0x80002000

08006570 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b02      	cmp	r3, #2
 8006584:	d103      	bne.n	800658e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2200      	movs	r2, #0
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b01      	cmp	r3, #1
 800659a:	d007      	beq.n	80065ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	619a      	str	r2, [r3, #24]
  }
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	4613      	mov	r3, r2
 80065c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065c8:	e022      	b.n	8006610 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d01e      	beq.n	8006610 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d2:	f7fd ff37 	bl	8004444 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d113      	bne.n	8006610 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ec:	f043 0220 	orr.w	r2, r3, #32
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e00f      	b.n	8006630 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4013      	ands	r3, r2
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	429a      	cmp	r2, r3
 800662c:	d0cd      	beq.n	80065ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006644:	e02c      	b.n	80066a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f870 	bl	8006730 <I2C_IsAcknowledgeFailed>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e02a      	b.n	80066b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d01e      	beq.n	80066a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006662:	f7fd feef 	bl	8004444 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d113      	bne.n	80066a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	f043 0220 	orr.w	r2, r3, #32
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e007      	b.n	80066b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d1cb      	bne.n	8006646 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066c4:	e028      	b.n	8006718 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f830 	bl	8006730 <I2C_IsAcknowledgeFailed>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e026      	b.n	8006728 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066da:	f7fd feb3 	bl	8004444 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d302      	bcc.n	80066f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d113      	bne.n	8006718 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e007      	b.n	8006728 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b20      	cmp	r3, #32
 8006724:	d1cf      	bne.n	80066c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b10      	cmp	r3, #16
 8006748:	d151      	bne.n	80067ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800674a:	e022      	b.n	8006792 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d01e      	beq.n	8006792 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006754:	f7fd fe76 	bl	8004444 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	429a      	cmp	r2, r3
 8006762:	d302      	bcc.n	800676a <I2C_IsAcknowledgeFailed+0x3a>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d113      	bne.n	8006792 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	f043 0220 	orr.w	r2, r3, #32
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e02e      	b.n	80067f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b20      	cmp	r3, #32
 800679e:	d1d5      	bne.n	800674c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2210      	movs	r2, #16
 80067a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2220      	movs	r2, #32
 80067ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fedd 	bl	8006570 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6859      	ldr	r1, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80067c2:	400b      	ands	r3, r1
 80067c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	f043 0204 	orr.w	r2, r3, #4
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	fe00e800 	.word	0xfe00e800

080067fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	817b      	strh	r3, [r7, #10]
 800680a:	4613      	mov	r3, r2
 800680c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	0d5b      	lsrs	r3, r3, #21
 8006818:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <I2C_TransferConfig+0x58>)
 800681e:	430b      	orrs	r3, r1
 8006820:	43db      	mvns	r3, r3
 8006822:	ea02 0103 	and.w	r1, r2, r3
 8006826:	897b      	ldrh	r3, [r7, #10]
 8006828:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800682c:	7a7b      	ldrb	r3, [r7, #9]
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	431a      	orrs	r2, r3
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	431a      	orrs	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006846:	bf00      	nop
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	03ff63ff 	.word	0x03ff63ff

08006858 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b20      	cmp	r3, #32
 800686c:	d138      	bne.n	80068e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006878:	2302      	movs	r3, #2
 800687a:	e032      	b.n	80068e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2224      	movs	r2, #36	; 0x24
 8006888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0201 	bic.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6819      	ldr	r1, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	e000      	b.n	80068e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068e0:	2302      	movs	r3, #2
  }
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b20      	cmp	r3, #32
 8006902:	d139      	bne.n	8006978 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800690e:	2302      	movs	r3, #2
 8006910:	e033      	b.n	800697a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2224      	movs	r2, #36	; 0x24
 800691e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006940:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	e000      	b.n	800697a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006978:	2302      	movs	r3, #2
  }
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
	...

08006988 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e0bf      	b.n	8006b1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fc fcf8 	bl	80033a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80069ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6999      	ldr	r1, [r3, #24]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6899      	ldr	r1, [r3, #8]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	4b4a      	ldr	r3, [pc, #296]	; (8006b24 <HAL_LTDC_Init+0x19c>)
 80069fc:	400b      	ands	r3, r1
 80069fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	041b      	lsls	r3, r3, #16
 8006a06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6899      	ldr	r1, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68d9      	ldr	r1, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <HAL_LTDC_Init+0x19c>)
 8006a2a:	400b      	ands	r3, r1
 8006a2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68d9      	ldr	r1, [r3, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6919      	ldr	r1, [r3, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4b33      	ldr	r3, [pc, #204]	; (8006b24 <HAL_LTDC_Init+0x19c>)
 8006a58:	400b      	ands	r3, r1
 8006a5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6919      	ldr	r1, [r3, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6959      	ldr	r1, [r3, #20]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b27      	ldr	r3, [pc, #156]	; (8006b24 <HAL_LTDC_Init+0x19c>)
 8006a86:	400b      	ands	r3, r1
 8006a88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6959      	ldr	r1, [r3, #20]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0206 	orr.w	r2, r2, #6
 8006af6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	f000f800 	.word	0xf000f800

08006b28 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0304 	and.w	r3, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d023      	beq.n	8006b92 <HAL_LTDC_IRQHandler+0x6a>
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01e      	beq.n	8006b92 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0204 	bic.w	r2, r2, #4
 8006b62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b72:	f043 0201 	orr.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2204      	movs	r2, #4
 8006b80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f86f 	bl	8006c70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d023      	beq.n	8006be4 <HAL_LTDC_IRQHandler+0xbc>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01e      	beq.n	8006be4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0202 	bic.w	r2, r2, #2
 8006bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bc4:	f043 0202 	orr.w	r2, r3, #2
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f846 	bl	8006c70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01b      	beq.n	8006c26 <HAL_LTDC_IRQHandler+0xfe>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d016      	beq.n	8006c26 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f82f 	bl	8006c84 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01b      	beq.n	8006c68 <HAL_LTDC_IRQHandler+0x140>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d016      	beq.n	8006c68 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0208 	bic.w	r2, r2, #8
 8006c48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2208      	movs	r2, #8
 8006c50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f818 	bl	8006c98 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006cac:	b5b0      	push	{r4, r5, r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_LTDC_ConfigLayer+0x1a>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e02c      	b.n	8006d20 <HAL_LTDC_ConfigLayer+0x74>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2134      	movs	r1, #52	; 0x34
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4614      	mov	r4, r2
 8006cea:	461d      	mov	r5, r3
 8006cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f81f 	bl	8006d44 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bdb0      	pop	{r4, r5, r7, pc}

08006d28 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006d36:	b2db      	uxtb	r3, r3
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b089      	sub	sp, #36	; 0x24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	0c1b      	lsrs	r3, r3, #16
 8006d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d60:	4413      	add	r3, r2
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	01db      	lsls	r3, r3, #7
 8006d70:	4413      	add	r3, r2
 8006d72:	3384      	adds	r3, #132	; 0x84
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	01d2      	lsls	r2, r2, #7
 8006d80:	440a      	add	r2, r1
 8006d82:	3284      	adds	r2, #132	; 0x84
 8006d84:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d88:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d9a:	4413      	add	r3, r2
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	01db      	lsls	r3, r3, #7
 8006da8:	440b      	add	r3, r1
 8006daa:	3384      	adds	r3, #132	; 0x84
 8006dac:	4619      	mov	r1, r3
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dc2:	4413      	add	r3, r2
 8006dc4:	041b      	lsls	r3, r3, #16
 8006dc6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	01db      	lsls	r3, r3, #7
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3384      	adds	r3, #132	; 0x84
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	6812      	ldr	r2, [r2, #0]
 8006ddc:	4611      	mov	r1, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	01d2      	lsls	r2, r2, #7
 8006de2:	440a      	add	r2, r1
 8006de4:	3284      	adds	r2, #132	; 0x84
 8006de6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006dea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dfa:	4413      	add	r3, r2
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4619      	mov	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	01db      	lsls	r3, r3, #7
 8006e08:	440b      	add	r3, r1
 8006e0a:	3384      	adds	r3, #132	; 0x84
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	01db      	lsls	r3, r3, #7
 8006e1e:	4413      	add	r3, r2
 8006e20:	3384      	adds	r3, #132	; 0x84
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	01d2      	lsls	r2, r2, #7
 8006e2e:	440a      	add	r2, r1
 8006e30:	3284      	adds	r2, #132	; 0x84
 8006e32:	f023 0307 	bic.w	r3, r3, #7
 8006e36:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	01db      	lsls	r3, r3, #7
 8006e42:	4413      	add	r3, r2
 8006e44:	3384      	adds	r3, #132	; 0x84
 8006e46:	461a      	mov	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006e5e:	041b      	lsls	r3, r3, #16
 8006e60:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	061b      	lsls	r3, r3, #24
 8006e68:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	01db      	lsls	r3, r3, #7
 8006e74:	4413      	add	r3, r2
 8006e76:	3384      	adds	r3, #132	; 0x84
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	01db      	lsls	r3, r3, #7
 8006e84:	4413      	add	r3, r2
 8006e86:	3384      	adds	r3, #132	; 0x84
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e94:	461a      	mov	r2, r3
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	01db      	lsls	r3, r3, #7
 8006ea8:	440b      	add	r3, r1
 8006eaa:	3384      	adds	r3, #132	; 0x84
 8006eac:	4619      	mov	r1, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	01db      	lsls	r3, r3, #7
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3384      	adds	r3, #132	; 0x84
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	01d2      	lsls	r2, r2, #7
 8006ece:	440a      	add	r2, r1
 8006ed0:	3284      	adds	r2, #132	; 0x84
 8006ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ed6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	01db      	lsls	r3, r3, #7
 8006ee2:	4413      	add	r3, r2
 8006ee4:	3384      	adds	r3, #132	; 0x84
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	01db      	lsls	r3, r3, #7
 8006ef8:	4413      	add	r3, r2
 8006efa:	3384      	adds	r3, #132	; 0x84
 8006efc:	69da      	ldr	r2, [r3, #28]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4619      	mov	r1, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	01db      	lsls	r3, r3, #7
 8006f08:	440b      	add	r3, r1
 8006f0a:	3384      	adds	r3, #132	; 0x84
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4b58      	ldr	r3, [pc, #352]	; (8007070 <LTDC_SetConfig+0x32c>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	68f9      	ldr	r1, [r7, #12]
 8006f1e:	6809      	ldr	r1, [r1, #0]
 8006f20:	4608      	mov	r0, r1
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	01c9      	lsls	r1, r1, #7
 8006f26:	4401      	add	r1, r0
 8006f28:	3184      	adds	r1, #132	; 0x84
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	01db      	lsls	r3, r3, #7
 8006f38:	4413      	add	r3, r2
 8006f3a:	3384      	adds	r3, #132	; 0x84
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	01db      	lsls	r3, r3, #7
 8006f48:	4413      	add	r3, r2
 8006f4a:	3384      	adds	r3, #132	; 0x84
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	01db      	lsls	r3, r3, #7
 8006f5c:	4413      	add	r3, r2
 8006f5e:	3384      	adds	r3, #132	; 0x84
 8006f60:	461a      	mov	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006f70:	2304      	movs	r3, #4
 8006f72:	61fb      	str	r3, [r7, #28]
 8006f74:	e01b      	b.n	8006fae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d102      	bne.n	8006f84 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	e014      	b.n	8006fae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d00b      	beq.n	8006fa4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d007      	beq.n	8006fa4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d003      	beq.n	8006fa4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006fa0:	2b07      	cmp	r3, #7
 8006fa2:	d102      	bne.n	8006faa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	e001      	b.n	8006fae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006faa:	2301      	movs	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	01db      	lsls	r3, r3, #7
 8006fb8:	4413      	add	r3, r2
 8006fba:	3384      	adds	r3, #132	; 0x84
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	01d2      	lsls	r2, r2, #7
 8006fc8:	440a      	add	r2, r1
 8006fca:	3284      	adds	r2, #132	; 0x84
 8006fcc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	fb02 f303 	mul.w	r3, r2, r3
 8006fdc:	041a      	lsls	r2, r3, #16
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6859      	ldr	r1, [r3, #4]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	1acb      	subs	r3, r1, r3
 8006fe8:	69f9      	ldr	r1, [r7, #28]
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	3303      	adds	r3, #3
 8006ff0:	68f9      	ldr	r1, [r7, #12]
 8006ff2:	6809      	ldr	r1, [r1, #0]
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	01c9      	lsls	r1, r1, #7
 8006ffa:	4401      	add	r1, r0
 8006ffc:	3184      	adds	r1, #132	; 0x84
 8006ffe:	4313      	orrs	r3, r2
 8007000:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	01db      	lsls	r3, r3, #7
 800700c:	4413      	add	r3, r2
 800700e:	3384      	adds	r3, #132	; 0x84
 8007010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4619      	mov	r1, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	01db      	lsls	r3, r3, #7
 800701c:	440b      	add	r3, r1
 800701e:	3384      	adds	r3, #132	; 0x84
 8007020:	4619      	mov	r1, r3
 8007022:	4b14      	ldr	r3, [pc, #80]	; (8007074 <LTDC_SetConfig+0x330>)
 8007024:	4013      	ands	r3, r2
 8007026:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	01db      	lsls	r3, r3, #7
 8007032:	4413      	add	r3, r2
 8007034:	3384      	adds	r3, #132	; 0x84
 8007036:	461a      	mov	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	01db      	lsls	r3, r3, #7
 8007048:	4413      	add	r3, r2
 800704a:	3384      	adds	r3, #132	; 0x84
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	4611      	mov	r1, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	01d2      	lsls	r2, r2, #7
 8007058:	440a      	add	r2, r1
 800705a:	3284      	adds	r2, #132	; 0x84
 800705c:	f043 0301 	orr.w	r3, r3, #1
 8007060:	6013      	str	r3, [r2, #0]
}
 8007062:	bf00      	nop
 8007064:	3724      	adds	r7, #36	; 0x24
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	fffff8f8 	.word	0xfffff8f8
 8007074:	fffff800 	.word	0xfffff800

08007078 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a04      	ldr	r2, [pc, #16]	; (8007094 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007086:	6013      	str	r3, [r2, #0]
}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40007000 	.word	0x40007000

08007098 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80070a2:	4b23      	ldr	r3, [pc, #140]	; (8007130 <HAL_PWREx_EnableOverDrive+0x98>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	4a22      	ldr	r2, [pc, #136]	; (8007130 <HAL_PWREx_EnableOverDrive+0x98>)
 80070a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ac:	6413      	str	r3, [r2, #64]	; 0x40
 80070ae:	4b20      	ldr	r3, [pc, #128]	; (8007130 <HAL_PWREx_EnableOverDrive+0x98>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80070ba:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1d      	ldr	r2, [pc, #116]	; (8007134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070c6:	f7fd f9bd 	bl	8004444 <HAL_GetTick>
 80070ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80070cc:	e009      	b.n	80070e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070ce:	f7fd f9b9 	bl	8004444 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070dc:	d901      	bls.n	80070e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e022      	b.n	8007128 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80070e2:	4b14      	ldr	r3, [pc, #80]	; (8007134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ee:	d1ee      	bne.n	80070ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80070f0:	4b10      	ldr	r3, [pc, #64]	; (8007134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070fc:	f7fd f9a2 	bl	8004444 <HAL_GetTick>
 8007100:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007102:	e009      	b.n	8007118 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007104:	f7fd f99e 	bl	8004444 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007112:	d901      	bls.n	8007118 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e007      	b.n	8007128 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <HAL_PWREx_EnableOverDrive+0x9c>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007124:	d1ee      	bne.n	8007104 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40023800 	.word	0x40023800
 8007134:	40007000 	.word	0x40007000

08007138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007140:	2300      	movs	r3, #0
 8007142:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e291      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8087 	beq.w	800726a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800715c:	4b96      	ldr	r3, [pc, #600]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 030c 	and.w	r3, r3, #12
 8007164:	2b04      	cmp	r3, #4
 8007166:	d00c      	beq.n	8007182 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007168:	4b93      	ldr	r3, [pc, #588]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 030c 	and.w	r3, r3, #12
 8007170:	2b08      	cmp	r3, #8
 8007172:	d112      	bne.n	800719a <HAL_RCC_OscConfig+0x62>
 8007174:	4b90      	ldr	r3, [pc, #576]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800717c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007180:	d10b      	bne.n	800719a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007182:	4b8d      	ldr	r3, [pc, #564]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d06c      	beq.n	8007268 <HAL_RCC_OscConfig+0x130>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d168      	bne.n	8007268 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e26b      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a2:	d106      	bne.n	80071b2 <HAL_RCC_OscConfig+0x7a>
 80071a4:	4b84      	ldr	r3, [pc, #528]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a83      	ldr	r2, [pc, #524]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	e02e      	b.n	8007210 <HAL_RCC_OscConfig+0xd8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10c      	bne.n	80071d4 <HAL_RCC_OscConfig+0x9c>
 80071ba:	4b7f      	ldr	r3, [pc, #508]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a7e      	ldr	r2, [pc, #504]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	4b7c      	ldr	r3, [pc, #496]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a7b      	ldr	r2, [pc, #492]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	e01d      	b.n	8007210 <HAL_RCC_OscConfig+0xd8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071dc:	d10c      	bne.n	80071f8 <HAL_RCC_OscConfig+0xc0>
 80071de:	4b76      	ldr	r3, [pc, #472]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a75      	ldr	r2, [pc, #468]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071e8:	6013      	str	r3, [r2, #0]
 80071ea:	4b73      	ldr	r3, [pc, #460]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a72      	ldr	r2, [pc, #456]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	e00b      	b.n	8007210 <HAL_RCC_OscConfig+0xd8>
 80071f8:	4b6f      	ldr	r3, [pc, #444]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a6e      	ldr	r2, [pc, #440]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80071fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	4b6c      	ldr	r3, [pc, #432]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a6b      	ldr	r2, [pc, #428]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 800720a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800720e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d013      	beq.n	8007240 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007218:	f7fd f914 	bl	8004444 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007220:	f7fd f910 	bl	8004444 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b64      	cmp	r3, #100	; 0x64
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e21f      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007232:	4b61      	ldr	r3, [pc, #388]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <HAL_RCC_OscConfig+0xe8>
 800723e:	e014      	b.n	800726a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007240:	f7fd f900 	bl	8004444 <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007248:	f7fd f8fc 	bl	8004444 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b64      	cmp	r3, #100	; 0x64
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e20b      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800725a:	4b57      	ldr	r3, [pc, #348]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f0      	bne.n	8007248 <HAL_RCC_OscConfig+0x110>
 8007266:	e000      	b.n	800726a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d069      	beq.n	800734a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007276:	4b50      	ldr	r3, [pc, #320]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 030c 	and.w	r3, r3, #12
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00b      	beq.n	800729a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007282:	4b4d      	ldr	r3, [pc, #308]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b08      	cmp	r3, #8
 800728c:	d11c      	bne.n	80072c8 <HAL_RCC_OscConfig+0x190>
 800728e:	4b4a      	ldr	r3, [pc, #296]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d116      	bne.n	80072c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800729a:	4b47      	ldr	r3, [pc, #284]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <HAL_RCC_OscConfig+0x17a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d001      	beq.n	80072b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e1df      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b2:	4b41      	ldr	r3, [pc, #260]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	493d      	ldr	r1, [pc, #244]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072c6:	e040      	b.n	800734a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d023      	beq.n	8007318 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072d0:	4b39      	ldr	r3, [pc, #228]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a38      	ldr	r2, [pc, #224]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072dc:	f7fd f8b2 	bl	8004444 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072e4:	f7fd f8ae 	bl	8004444 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e1bd      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f6:	4b30      	ldr	r3, [pc, #192]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007302:	4b2d      	ldr	r3, [pc, #180]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	4929      	ldr	r1, [pc, #164]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]
 8007316:	e018      	b.n	800734a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007318:	4b27      	ldr	r3, [pc, #156]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a26      	ldr	r2, [pc, #152]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007324:	f7fd f88e 	bl	8004444 <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800732c:	f7fd f88a 	bl	8004444 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e199      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733e:	4b1e      	ldr	r3, [pc, #120]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f0      	bne.n	800732c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d038      	beq.n	80073c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d019      	beq.n	8007392 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800735e:	4b16      	ldr	r3, [pc, #88]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007364:	f043 0301 	orr.w	r3, r3, #1
 8007368:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800736a:	f7fd f86b 	bl	8004444 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007372:	f7fd f867 	bl	8004444 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e176      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0x23a>
 8007390:	e01a      	b.n	80073c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007396:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <HAL_RCC_OscConfig+0x280>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739e:	f7fd f851 	bl	8004444 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073a4:	e00a      	b.n	80073bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073a6:	f7fd f84d 	bl	8004444 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d903      	bls.n	80073bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e15c      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
 80073b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073bc:	4b91      	ldr	r3, [pc, #580]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80073be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1ee      	bne.n	80073a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80a4 	beq.w	800751e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073d6:	4b8b      	ldr	r3, [pc, #556]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10d      	bne.n	80073fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80073e2:	4b88      	ldr	r3, [pc, #544]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	4a87      	ldr	r2, [pc, #540]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80073e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ec:	6413      	str	r3, [r2, #64]	; 0x40
 80073ee:	4b85      	ldr	r3, [pc, #532]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f6:	60bb      	str	r3, [r7, #8]
 80073f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073fa:	2301      	movs	r3, #1
 80073fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073fe:	4b82      	ldr	r3, [pc, #520]	; (8007608 <HAL_RCC_OscConfig+0x4d0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007406:	2b00      	cmp	r3, #0
 8007408:	d118      	bne.n	800743c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800740a:	4b7f      	ldr	r3, [pc, #508]	; (8007608 <HAL_RCC_OscConfig+0x4d0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a7e      	ldr	r2, [pc, #504]	; (8007608 <HAL_RCC_OscConfig+0x4d0>)
 8007410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007416:	f7fd f815 	bl	8004444 <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800741e:	f7fd f811 	bl	8004444 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b64      	cmp	r3, #100	; 0x64
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e120      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007430:	4b75      	ldr	r3, [pc, #468]	; (8007608 <HAL_RCC_OscConfig+0x4d0>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f0      	beq.n	800741e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d106      	bne.n	8007452 <HAL_RCC_OscConfig+0x31a>
 8007444:	4b6f      	ldr	r3, [pc, #444]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007448:	4a6e      	ldr	r2, [pc, #440]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	6713      	str	r3, [r2, #112]	; 0x70
 8007450:	e02d      	b.n	80074ae <HAL_RCC_OscConfig+0x376>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10c      	bne.n	8007474 <HAL_RCC_OscConfig+0x33c>
 800745a:	4b6a      	ldr	r3, [pc, #424]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800745c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745e:	4a69      	ldr	r2, [pc, #420]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	6713      	str	r3, [r2, #112]	; 0x70
 8007466:	4b67      	ldr	r3, [pc, #412]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746a:	4a66      	ldr	r2, [pc, #408]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800746c:	f023 0304 	bic.w	r3, r3, #4
 8007470:	6713      	str	r3, [r2, #112]	; 0x70
 8007472:	e01c      	b.n	80074ae <HAL_RCC_OscConfig+0x376>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b05      	cmp	r3, #5
 800747a:	d10c      	bne.n	8007496 <HAL_RCC_OscConfig+0x35e>
 800747c:	4b61      	ldr	r3, [pc, #388]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	4a60      	ldr	r2, [pc, #384]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007482:	f043 0304 	orr.w	r3, r3, #4
 8007486:	6713      	str	r3, [r2, #112]	; 0x70
 8007488:	4b5e      	ldr	r3, [pc, #376]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748c:	4a5d      	ldr	r2, [pc, #372]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	6713      	str	r3, [r2, #112]	; 0x70
 8007494:	e00b      	b.n	80074ae <HAL_RCC_OscConfig+0x376>
 8007496:	4b5b      	ldr	r3, [pc, #364]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	4a5a      	ldr	r2, [pc, #360]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	6713      	str	r3, [r2, #112]	; 0x70
 80074a2:	4b58      	ldr	r3, [pc, #352]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a6:	4a57      	ldr	r2, [pc, #348]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80074a8:	f023 0304 	bic.w	r3, r3, #4
 80074ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d015      	beq.n	80074e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074b6:	f7fc ffc5 	bl	8004444 <HAL_GetTick>
 80074ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074bc:	e00a      	b.n	80074d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074be:	f7fc ffc1 	bl	8004444 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e0ce      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d4:	4b4b      	ldr	r3, [pc, #300]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80074d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0ee      	beq.n	80074be <HAL_RCC_OscConfig+0x386>
 80074e0:	e014      	b.n	800750c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e2:	f7fc ffaf 	bl	8004444 <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074e8:	e00a      	b.n	8007500 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ea:	f7fc ffab 	bl	8004444 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e0b8      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007500:	4b40      	ldr	r3, [pc, #256]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1ee      	bne.n	80074ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d105      	bne.n	800751e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007512:	4b3c      	ldr	r3, [pc, #240]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	4a3b      	ldr	r2, [pc, #236]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80a4 	beq.w	8007670 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007528:	4b36      	ldr	r3, [pc, #216]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 030c 	and.w	r3, r3, #12
 8007530:	2b08      	cmp	r3, #8
 8007532:	d06b      	beq.n	800760c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b02      	cmp	r3, #2
 800753a:	d149      	bne.n	80075d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800753c:	4b31      	ldr	r3, [pc, #196]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a30      	ldr	r2, [pc, #192]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007548:	f7fc ff7c 	bl	8004444 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007550:	f7fc ff78 	bl	8004444 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e087      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007562:	4b28      	ldr	r3, [pc, #160]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f0      	bne.n	8007550 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	69da      	ldr	r2, [r3, #28]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	019b      	lsls	r3, r3, #6
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	3b01      	subs	r3, #1
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	061b      	lsls	r3, r3, #24
 8007592:	4313      	orrs	r3, r2
 8007594:	4a1b      	ldr	r2, [pc, #108]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 8007596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800759a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800759c:	4b19      	ldr	r3, [pc, #100]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a18      	ldr	r2, [pc, #96]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80075a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a8:	f7fc ff4c 	bl	8004444 <HAL_GetTick>
 80075ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ae:	e008      	b.n	80075c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b0:	f7fc ff48 	bl	8004444 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e057      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c2:	4b10      	ldr	r3, [pc, #64]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0f0      	beq.n	80075b0 <HAL_RCC_OscConfig+0x478>
 80075ce:	e04f      	b.n	8007670 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d0:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80075d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075dc:	f7fc ff32 	bl	8004444 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075e4:	f7fc ff2e 	bl	8004444 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e03d      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f6:	4b03      	ldr	r3, [pc, #12]	; (8007604 <HAL_RCC_OscConfig+0x4cc>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f0      	bne.n	80075e4 <HAL_RCC_OscConfig+0x4ac>
 8007602:	e035      	b.n	8007670 <HAL_RCC_OscConfig+0x538>
 8007604:	40023800 	.word	0x40023800
 8007608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800760c:	4b1b      	ldr	r3, [pc, #108]	; (800767c <HAL_RCC_OscConfig+0x544>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d028      	beq.n	800766c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007624:	429a      	cmp	r2, r3
 8007626:	d121      	bne.n	800766c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007632:	429a      	cmp	r2, r3
 8007634:	d11a      	bne.n	800766c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800763c:	4013      	ands	r3, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007642:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007644:	4293      	cmp	r3, r2
 8007646:	d111      	bne.n	800766c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	085b      	lsrs	r3, r3, #1
 8007654:	3b01      	subs	r3, #1
 8007656:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007658:	429a      	cmp	r2, r3
 800765a:	d107      	bne.n	800766c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007668:	429a      	cmp	r2, r3
 800766a:	d001      	beq.n	8007670 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40023800 	.word	0x40023800

08007680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e0d0      	b.n	800783a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007698:	4b6a      	ldr	r3, [pc, #424]	; (8007844 <HAL_RCC_ClockConfig+0x1c4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d910      	bls.n	80076c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a6:	4b67      	ldr	r3, [pc, #412]	; (8007844 <HAL_RCC_ClockConfig+0x1c4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f023 020f 	bic.w	r2, r3, #15
 80076ae:	4965      	ldr	r1, [pc, #404]	; (8007844 <HAL_RCC_ClockConfig+0x1c4>)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076b6:	4b63      	ldr	r3, [pc, #396]	; (8007844 <HAL_RCC_ClockConfig+0x1c4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d001      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e0b8      	b.n	800783a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d020      	beq.n	8007716 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076e0:	4b59      	ldr	r3, [pc, #356]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	4a58      	ldr	r2, [pc, #352]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 80076e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0308 	and.w	r3, r3, #8
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076f8:	4b53      	ldr	r3, [pc, #332]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	4a52      	ldr	r2, [pc, #328]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 80076fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007702:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007704:	4b50      	ldr	r3, [pc, #320]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	494d      	ldr	r1, [pc, #308]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 8007712:	4313      	orrs	r3, r2
 8007714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d040      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d107      	bne.n	800773a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800772a:	4b47      	ldr	r3, [pc, #284]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d115      	bne.n	8007762 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e07f      	b.n	800783a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b02      	cmp	r3, #2
 8007740:	d107      	bne.n	8007752 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007742:	4b41      	ldr	r3, [pc, #260]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e073      	b.n	800783a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007752:	4b3d      	ldr	r3, [pc, #244]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e06b      	b.n	800783a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007762:	4b39      	ldr	r3, [pc, #228]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f023 0203 	bic.w	r2, r3, #3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	4936      	ldr	r1, [pc, #216]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 8007770:	4313      	orrs	r3, r2
 8007772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007774:	f7fc fe66 	bl	8004444 <HAL_GetTick>
 8007778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777a:	e00a      	b.n	8007792 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800777c:	f7fc fe62 	bl	8004444 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	f241 3288 	movw	r2, #5000	; 0x1388
 800778a:	4293      	cmp	r3, r2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e053      	b.n	800783a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007792:	4b2d      	ldr	r3, [pc, #180]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 020c 	and.w	r2, r3, #12
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d1eb      	bne.n	800777c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077a4:	4b27      	ldr	r3, [pc, #156]	; (8007844 <HAL_RCC_ClockConfig+0x1c4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 030f 	and.w	r3, r3, #15
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d210      	bcs.n	80077d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077b2:	4b24      	ldr	r3, [pc, #144]	; (8007844 <HAL_RCC_ClockConfig+0x1c4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f023 020f 	bic.w	r2, r3, #15
 80077ba:	4922      	ldr	r1, [pc, #136]	; (8007844 <HAL_RCC_ClockConfig+0x1c4>)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	4313      	orrs	r3, r2
 80077c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c2:	4b20      	ldr	r3, [pc, #128]	; (8007844 <HAL_RCC_ClockConfig+0x1c4>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d001      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e032      	b.n	800783a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d008      	beq.n	80077f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077e0:	4b19      	ldr	r3, [pc, #100]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	4916      	ldr	r1, [pc, #88]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0308 	and.w	r3, r3, #8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	490e      	ldr	r1, [pc, #56]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 800780e:	4313      	orrs	r3, r2
 8007810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007812:	f000 f821 	bl	8007858 <HAL_RCC_GetSysClockFreq>
 8007816:	4602      	mov	r2, r0
 8007818:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <HAL_RCC_ClockConfig+0x1c8>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	091b      	lsrs	r3, r3, #4
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	490a      	ldr	r1, [pc, #40]	; (800784c <HAL_RCC_ClockConfig+0x1cc>)
 8007824:	5ccb      	ldrb	r3, [r1, r3]
 8007826:	fa22 f303 	lsr.w	r3, r2, r3
 800782a:	4a09      	ldr	r2, [pc, #36]	; (8007850 <HAL_RCC_ClockConfig+0x1d0>)
 800782c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <HAL_RCC_ClockConfig+0x1d4>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4618      	mov	r0, r3
 8007834:	f7fc fd04 	bl	8004240 <HAL_InitTick>

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	40023c00 	.word	0x40023c00
 8007848:	40023800 	.word	0x40023800
 800784c:	0800f09c 	.word	0x0800f09c
 8007850:	20000048 	.word	0x20000048
 8007854:	2000004c 	.word	0x2000004c

08007858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007858:	b5b0      	push	{r4, r5, r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800785e:	2100      	movs	r1, #0
 8007860:	6079      	str	r1, [r7, #4]
 8007862:	2100      	movs	r1, #0
 8007864:	60f9      	str	r1, [r7, #12]
 8007866:	2100      	movs	r1, #0
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800786a:	2100      	movs	r1, #0
 800786c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800786e:	4952      	ldr	r1, [pc, #328]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007870:	6889      	ldr	r1, [r1, #8]
 8007872:	f001 010c 	and.w	r1, r1, #12
 8007876:	2908      	cmp	r1, #8
 8007878:	d00d      	beq.n	8007896 <HAL_RCC_GetSysClockFreq+0x3e>
 800787a:	2908      	cmp	r1, #8
 800787c:	f200 8094 	bhi.w	80079a8 <HAL_RCC_GetSysClockFreq+0x150>
 8007880:	2900      	cmp	r1, #0
 8007882:	d002      	beq.n	800788a <HAL_RCC_GetSysClockFreq+0x32>
 8007884:	2904      	cmp	r1, #4
 8007886:	d003      	beq.n	8007890 <HAL_RCC_GetSysClockFreq+0x38>
 8007888:	e08e      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800788a:	4b4c      	ldr	r3, [pc, #304]	; (80079bc <HAL_RCC_GetSysClockFreq+0x164>)
 800788c:	60bb      	str	r3, [r7, #8]
      break;
 800788e:	e08e      	b.n	80079ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007890:	4b4b      	ldr	r3, [pc, #300]	; (80079c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8007892:	60bb      	str	r3, [r7, #8]
      break;
 8007894:	e08b      	b.n	80079ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007896:	4948      	ldr	r1, [pc, #288]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007898:	6849      	ldr	r1, [r1, #4]
 800789a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800789e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80078a0:	4945      	ldr	r1, [pc, #276]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80078a2:	6849      	ldr	r1, [r1, #4]
 80078a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80078a8:	2900      	cmp	r1, #0
 80078aa:	d024      	beq.n	80078f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ac:	4942      	ldr	r1, [pc, #264]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80078ae:	6849      	ldr	r1, [r1, #4]
 80078b0:	0989      	lsrs	r1, r1, #6
 80078b2:	4608      	mov	r0, r1
 80078b4:	f04f 0100 	mov.w	r1, #0
 80078b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80078bc:	f04f 0500 	mov.w	r5, #0
 80078c0:	ea00 0204 	and.w	r2, r0, r4
 80078c4:	ea01 0305 	and.w	r3, r1, r5
 80078c8:	493d      	ldr	r1, [pc, #244]	; (80079c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80078ca:	fb01 f003 	mul.w	r0, r1, r3
 80078ce:	2100      	movs	r1, #0
 80078d0:	fb01 f102 	mul.w	r1, r1, r2
 80078d4:	1844      	adds	r4, r0, r1
 80078d6:	493a      	ldr	r1, [pc, #232]	; (80079c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80078d8:	fba2 0101 	umull	r0, r1, r2, r1
 80078dc:	1863      	adds	r3, r4, r1
 80078de:	4619      	mov	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	f7f8 fc92 	bl	8000210 <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4613      	mov	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e04a      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078f6:	4b30      	ldr	r3, [pc, #192]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	099b      	lsrs	r3, r3, #6
 80078fc:	461a      	mov	r2, r3
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007906:	f04f 0100 	mov.w	r1, #0
 800790a:	ea02 0400 	and.w	r4, r2, r0
 800790e:	ea03 0501 	and.w	r5, r3, r1
 8007912:	4620      	mov	r0, r4
 8007914:	4629      	mov	r1, r5
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	014b      	lsls	r3, r1, #5
 8007920:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007924:	0142      	lsls	r2, r0, #5
 8007926:	4610      	mov	r0, r2
 8007928:	4619      	mov	r1, r3
 800792a:	1b00      	subs	r0, r0, r4
 800792c:	eb61 0105 	sbc.w	r1, r1, r5
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	018b      	lsls	r3, r1, #6
 800793a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800793e:	0182      	lsls	r2, r0, #6
 8007940:	1a12      	subs	r2, r2, r0
 8007942:	eb63 0301 	sbc.w	r3, r3, r1
 8007946:	f04f 0000 	mov.w	r0, #0
 800794a:	f04f 0100 	mov.w	r1, #0
 800794e:	00d9      	lsls	r1, r3, #3
 8007950:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007954:	00d0      	lsls	r0, r2, #3
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	1912      	adds	r2, r2, r4
 800795c:	eb45 0303 	adc.w	r3, r5, r3
 8007960:	f04f 0000 	mov.w	r0, #0
 8007964:	f04f 0100 	mov.w	r1, #0
 8007968:	0299      	lsls	r1, r3, #10
 800796a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800796e:	0290      	lsls	r0, r2, #10
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4610      	mov	r0, r2
 8007976:	4619      	mov	r1, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	461a      	mov	r2, r3
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	f7f8 fc46 	bl	8000210 <__aeabi_uldivmod>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4613      	mov	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	0c1b      	lsrs	r3, r3, #16
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	3301      	adds	r3, #1
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	60bb      	str	r3, [r7, #8]
      break;
 80079a6:	e002      	b.n	80079ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <HAL_RCC_GetSysClockFreq+0x164>)
 80079aa:	60bb      	str	r3, [r7, #8]
      break;
 80079ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079ae:	68bb      	ldr	r3, [r7, #8]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bdb0      	pop	{r4, r5, r7, pc}
 80079b8:	40023800 	.word	0x40023800
 80079bc:	00f42400 	.word	0x00f42400
 80079c0:	017d7840 	.word	0x017d7840

080079c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079c8:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80079ca:	681b      	ldr	r3, [r3, #0]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000048 	.word	0x20000048

080079dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079e0:	f7ff fff0 	bl	80079c4 <HAL_RCC_GetHCLKFreq>
 80079e4:	4602      	mov	r2, r0
 80079e6:	4b05      	ldr	r3, [pc, #20]	; (80079fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	0a9b      	lsrs	r3, r3, #10
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	4903      	ldr	r1, [pc, #12]	; (8007a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079f2:	5ccb      	ldrb	r3, [r1, r3]
 80079f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	40023800 	.word	0x40023800
 8007a00:	0800f0ac 	.word	0x0800f0ac

08007a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a08:	f7ff ffdc 	bl	80079c4 <HAL_RCC_GetHCLKFreq>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	0b5b      	lsrs	r3, r3, #13
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	4903      	ldr	r1, [pc, #12]	; (8007a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a1a:	5ccb      	ldrb	r3, [r1, r3]
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40023800 	.word	0x40023800
 8007a28:	0800f0ac 	.word	0x0800f0ac

08007a2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	220f      	movs	r2, #15
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a3c:	4b12      	ldr	r3, [pc, #72]	; (8007a88 <HAL_RCC_GetClockConfig+0x5c>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 0203 	and.w	r2, r3, #3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a48:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <HAL_RCC_GetClockConfig+0x5c>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <HAL_RCC_GetClockConfig+0x5c>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007a60:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <HAL_RCC_GetClockConfig+0x5c>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	08db      	lsrs	r3, r3, #3
 8007a66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a6e:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <HAL_RCC_GetClockConfig+0x60>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 020f 	and.w	r2, r3, #15
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	40023c00 	.word	0x40023c00

08007a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d012      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ab8:	4b69      	ldr	r3, [pc, #420]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	4a68      	ldr	r2, [pc, #416]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007abe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007ac2:	6093      	str	r3, [r2, #8]
 8007ac4:	4b66      	ldr	r3, [pc, #408]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	4964      	ldr	r1, [pc, #400]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007ada:	2301      	movs	r3, #1
 8007adc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d017      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007aea:	4b5d      	ldr	r3, [pc, #372]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af8:	4959      	ldr	r1, [pc, #356]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b08:	d101      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007b16:	2301      	movs	r3, #1
 8007b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d017      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b26:	4b4e      	ldr	r3, [pc, #312]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	494a      	ldr	r1, [pc, #296]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b44:	d101      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007b46:	2301      	movs	r3, #1
 8007b48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007b52:	2301      	movs	r3, #1
 8007b54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007b62:	2301      	movs	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 808b 	beq.w	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b74:	4b3a      	ldr	r3, [pc, #232]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	4a39      	ldr	r2, [pc, #228]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8007b80:	4b37      	ldr	r3, [pc, #220]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b88:	60bb      	str	r3, [r7, #8]
 8007b8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b8c:	4b35      	ldr	r3, [pc, #212]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a34      	ldr	r2, [pc, #208]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b98:	f7fc fc54 	bl	8004444 <HAL_GetTick>
 8007b9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ba0:	f7fc fc50 	bl	8004444 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b64      	cmp	r3, #100	; 0x64
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e357      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bb2:	4b2c      	ldr	r3, [pc, #176]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0f0      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bbe:	4b28      	ldr	r3, [pc, #160]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d035      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d02e      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bdc:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007be6:	4b1e      	ldr	r3, [pc, #120]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	4a1d      	ldr	r2, [pc, #116]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bf2:	4b1b      	ldr	r3, [pc, #108]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf6:	4a1a      	ldr	r2, [pc, #104]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007bfe:	4a18      	ldr	r2, [pc, #96]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c04:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d114      	bne.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c10:	f7fc fc18 	bl	8004444 <HAL_GetTick>
 8007c14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c16:	e00a      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c18:	f7fc fc14 	bl	8004444 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e319      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0ee      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c46:	d111      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c56:	400b      	ands	r3, r1
 8007c58:	4901      	ldr	r1, [pc, #4]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]
 8007c5e:	e00b      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007c60:	40023800 	.word	0x40023800
 8007c64:	40007000 	.word	0x40007000
 8007c68:	0ffffcff 	.word	0x0ffffcff
 8007c6c:	4bb1      	ldr	r3, [pc, #708]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	4ab0      	ldr	r2, [pc, #704]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c76:	6093      	str	r3, [r2, #8]
 8007c78:	4bae      	ldr	r3, [pc, #696]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c84:	49ab      	ldr	r1, [pc, #684]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d010      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c96:	4ba7      	ldr	r3, [pc, #668]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c9c:	4aa5      	ldr	r2, [pc, #660]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ca2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007ca6:	4ba3      	ldr	r3, [pc, #652]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ca8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	49a0      	ldr	r1, [pc, #640]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cc4:	4b9b      	ldr	r3, [pc, #620]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd2:	4998      	ldr	r1, [pc, #608]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ce6:	4b93      	ldr	r3, [pc, #588]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf4:	498f      	ldr	r1, [pc, #572]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d08:	4b8a      	ldr	r3, [pc, #552]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d16:	4987      	ldr	r1, [pc, #540]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d2a:	4b82      	ldr	r3, [pc, #520]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d38:	497e      	ldr	r1, [pc, #504]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d4c:	4b79      	ldr	r3, [pc, #484]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d52:	f023 0203 	bic.w	r2, r3, #3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5a:	4976      	ldr	r1, [pc, #472]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d6e:	4b71      	ldr	r3, [pc, #452]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d74:	f023 020c 	bic.w	r2, r3, #12
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7c:	496d      	ldr	r1, [pc, #436]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d90:	4b68      	ldr	r3, [pc, #416]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9e:	4965      	ldr	r1, [pc, #404]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007db2:	4b60      	ldr	r3, [pc, #384]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc0:	495c      	ldr	r1, [pc, #368]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007dd4:	4b57      	ldr	r3, [pc, #348]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de2:	4954      	ldr	r1, [pc, #336]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007df6:	4b4f      	ldr	r3, [pc, #316]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e04:	494b      	ldr	r1, [pc, #300]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e18:	4b46      	ldr	r3, [pc, #280]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e26:	4943      	ldr	r1, [pc, #268]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007e3a:	4b3e      	ldr	r3, [pc, #248]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e48:	493a      	ldr	r1, [pc, #232]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e5c:	4b35      	ldr	r3, [pc, #212]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e6a:	4932      	ldr	r1, [pc, #200]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d011      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007e7e:	4b2d      	ldr	r3, [pc, #180]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e8c:	4929      	ldr	r1, [pc, #164]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e9c:	d101      	bne.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ecc:	4919      	ldr	r1, [pc, #100]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ee0:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ef0:	4910      	ldr	r1, [pc, #64]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d006      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80d9 	beq.w	80080be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f0c:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a08      	ldr	r2, [pc, #32]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007f12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f18:	f7fc fa94 	bl	8004444 <HAL_GetTick>
 8007f1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f1e:	e00b      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f20:	f7fc fa90 	bl	8004444 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2b64      	cmp	r3, #100	; 0x64
 8007f2c:	d904      	bls.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e197      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007f32:	bf00      	nop
 8007f34:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f38:	4b6c      	ldr	r3, [pc, #432]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1ed      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d021      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d11d      	bne.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f58:	4b64      	ldr	r3, [pc, #400]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5e:	0c1b      	lsrs	r3, r3, #16
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f66:	4b61      	ldr	r3, [pc, #388]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6c:	0e1b      	lsrs	r3, r3, #24
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	019a      	lsls	r2, r3, #6
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	041b      	lsls	r3, r3, #16
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	061b      	lsls	r3, r3, #24
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	071b      	lsls	r3, r3, #28
 8007f8c:	4957      	ldr	r1, [pc, #348]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fa8:	d00a      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d02e      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fbe:	d129      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007fc0:	4b4a      	ldr	r3, [pc, #296]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	f003 0303 	and.w	r3, r3, #3
 8007fcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fce:	4b47      	ldr	r3, [pc, #284]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd4:	0f1b      	lsrs	r3, r3, #28
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	019a      	lsls	r2, r3, #6
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	041b      	lsls	r3, r3, #16
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	061b      	lsls	r3, r3, #24
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	071b      	lsls	r3, r3, #28
 8007ff4:	493d      	ldr	r1, [pc, #244]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ffc:	4b3b      	ldr	r3, [pc, #236]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008002:	f023 021f 	bic.w	r2, r3, #31
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	3b01      	subs	r3, #1
 800800c:	4937      	ldr	r1, [pc, #220]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800800e:	4313      	orrs	r3, r2
 8008010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d01d      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008020:	4b32      	ldr	r3, [pc, #200]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008026:	0e1b      	lsrs	r3, r3, #24
 8008028:	f003 030f 	and.w	r3, r3, #15
 800802c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800802e:	4b2f      	ldr	r3, [pc, #188]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008034:	0f1b      	lsrs	r3, r3, #28
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	019a      	lsls	r2, r3, #6
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	041b      	lsls	r3, r3, #16
 8008048:	431a      	orrs	r2, r3
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	061b      	lsls	r3, r3, #24
 800804e:	431a      	orrs	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	071b      	lsls	r3, r3, #28
 8008054:	4925      	ldr	r1, [pc, #148]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d011      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	019a      	lsls	r2, r3, #6
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	061b      	lsls	r3, r3, #24
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	071b      	lsls	r3, r3, #28
 8008084:	4919      	ldr	r1, [pc, #100]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008086:	4313      	orrs	r3, r2
 8008088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800808c:	4b17      	ldr	r3, [pc, #92]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a16      	ldr	r2, [pc, #88]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008098:	f7fc f9d4 	bl	8004444 <HAL_GetTick>
 800809c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800809e:	e008      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080a0:	f7fc f9d0 	bl	8004444 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b64      	cmp	r3, #100	; 0x64
 80080ac:	d901      	bls.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e0d7      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080b2:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0f0      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	f040 80cd 	bne.w	8008260 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080c6:	4b09      	ldr	r3, [pc, #36]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a08      	ldr	r2, [pc, #32]	; (80080ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080d2:	f7fc f9b7 	bl	8004444 <HAL_GetTick>
 80080d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080d8:	e00a      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080da:	f7fc f9b3 	bl	8004444 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b64      	cmp	r3, #100	; 0x64
 80080e6:	d903      	bls.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e0ba      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80080ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080f0:	4b5e      	ldr	r3, [pc, #376]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080fc:	d0ed      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d009      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800811a:	2b00      	cmp	r3, #0
 800811c:	d02e      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d12a      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008126:	4b51      	ldr	r3, [pc, #324]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008134:	4b4d      	ldr	r3, [pc, #308]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813a:	0f1b      	lsrs	r3, r3, #28
 800813c:	f003 0307 	and.w	r3, r3, #7
 8008140:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	019a      	lsls	r2, r3, #6
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	041b      	lsls	r3, r3, #16
 800814c:	431a      	orrs	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	061b      	lsls	r3, r3, #24
 8008154:	431a      	orrs	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	071b      	lsls	r3, r3, #28
 800815a:	4944      	ldr	r1, [pc, #272]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800815c:	4313      	orrs	r3, r2
 800815e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008162:	4b42      	ldr	r3, [pc, #264]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008168:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008170:	3b01      	subs	r3, #1
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	493d      	ldr	r1, [pc, #244]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d022      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800818c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008190:	d11d      	bne.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008192:	4b36      	ldr	r3, [pc, #216]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008198:	0e1b      	lsrs	r3, r3, #24
 800819a:	f003 030f 	and.w	r3, r3, #15
 800819e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80081a0:	4b32      	ldr	r3, [pc, #200]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a6:	0f1b      	lsrs	r3, r3, #28
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	019a      	lsls	r2, r3, #6
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	041b      	lsls	r3, r3, #16
 80081ba:	431a      	orrs	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	061b      	lsls	r3, r3, #24
 80081c0:	431a      	orrs	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	071b      	lsls	r3, r3, #28
 80081c6:	4929      	ldr	r1, [pc, #164]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d028      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081da:	4b24      	ldr	r3, [pc, #144]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e0:	0e1b      	lsrs	r3, r3, #24
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081e8:	4b20      	ldr	r3, [pc, #128]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ee:	0c1b      	lsrs	r3, r3, #16
 80081f0:	f003 0303 	and.w	r3, r3, #3
 80081f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	019a      	lsls	r2, r3, #6
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	431a      	orrs	r2, r3
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	061b      	lsls	r3, r3, #24
 8008206:	431a      	orrs	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	071b      	lsls	r3, r3, #28
 800820e:	4917      	ldr	r1, [pc, #92]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008210:	4313      	orrs	r3, r2
 8008212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008216:	4b15      	ldr	r3, [pc, #84]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800821c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	4911      	ldr	r1, [pc, #68]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008226:	4313      	orrs	r3, r2
 8008228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a0e      	ldr	r2, [pc, #56]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008238:	f7fc f904 	bl	8004444 <HAL_GetTick>
 800823c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800823e:	e008      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008240:	f7fc f900 	bl	8004444 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b64      	cmp	r3, #100	; 0x64
 800824c:	d901      	bls.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e007      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008252:	4b06      	ldr	r3, [pc, #24]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800825a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800825e:	d1ef      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3720      	adds	r7, #32
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	40023800 	.word	0x40023800

08008270 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800828e:	f040 808c 	bne.w	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008292:	4b95      	ldr	r3, [pc, #596]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008298:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082a0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082a8:	d07c      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082b0:	d87d      	bhi.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082be:	d039      	beq.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80082c0:	e075      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80082c2:	4b89      	ldr	r3, [pc, #548]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d108      	bne.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80082ce:	4b86      	ldr	r3, [pc, #536]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082d6:	4a85      	ldr	r2, [pc, #532]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80082d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	e007      	b.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80082e0:	4b81      	ldr	r3, [pc, #516]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082e8:	4a81      	ldr	r2, [pc, #516]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80082ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80082f0:	4b7d      	ldr	r3, [pc, #500]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80082f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f6:	0e1b      	lsrs	r3, r3, #24
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80082fe:	4b7a      	ldr	r3, [pc, #488]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008304:	099b      	lsrs	r3, r3, #6
 8008306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	fb02 f203 	mul.w	r2, r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	fbb2 f3f3 	udiv	r3, r2, r3
 8008316:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008318:	4b73      	ldr	r3, [pc, #460]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800831a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	f003 031f 	and.w	r3, r3, #31
 8008324:	3301      	adds	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008330:	617b      	str	r3, [r7, #20]
        break;
 8008332:	e03d      	b.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008334:	4b6c      	ldr	r3, [pc, #432]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008340:	4b69      	ldr	r3, [pc, #420]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008348:	4a68      	ldr	r2, [pc, #416]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800834a:	fbb2 f3f3 	udiv	r3, r2, r3
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	e007      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008352:	4b65      	ldr	r3, [pc, #404]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800835a:	4a65      	ldr	r2, [pc, #404]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800835c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008360:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008362:	4b61      	ldr	r3, [pc, #388]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008368:	0e1b      	lsrs	r3, r3, #24
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008370:	4b5d      	ldr	r3, [pc, #372]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008376:	099b      	lsrs	r3, r3, #6
 8008378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	fb02 f203 	mul.w	r2, r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	fbb2 f3f3 	udiv	r3, r2, r3
 8008388:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800838a:	4b57      	ldr	r3, [pc, #348]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800838c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008390:	f003 031f 	and.w	r3, r3, #31
 8008394:	3301      	adds	r3, #1
 8008396:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a0:	617b      	str	r3, [r7, #20]
        break;
 80083a2:	e005      	b.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80083a4:	4b53      	ldr	r3, [pc, #332]	; (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80083a6:	617b      	str	r3, [r7, #20]
        break;
 80083a8:	e002      	b.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80083aa:	bf00      	nop
 80083ac:	e000      	b.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80083ae:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083b6:	f040 808c 	bne.w	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80083ba:	4b4b      	ldr	r3, [pc, #300]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80083c8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d0:	d07c      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d8:	d87d      	bhi.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083e6:	d039      	beq.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80083e8:	e075      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80083ea:	4b3f      	ldr	r3, [pc, #252]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d108      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80083f6:	4b3c      	ldr	r3, [pc, #240]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083fe:	4a3b      	ldr	r2, [pc, #236]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008400:	fbb2 f3f3 	udiv	r3, r2, r3
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	e007      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008408:	4b37      	ldr	r3, [pc, #220]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008410:	4a37      	ldr	r2, [pc, #220]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008412:	fbb2 f3f3 	udiv	r3, r2, r3
 8008416:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008418:	4b33      	ldr	r3, [pc, #204]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800841a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841e:	0e1b      	lsrs	r3, r3, #24
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008426:	4b30      	ldr	r3, [pc, #192]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	099b      	lsrs	r3, r3, #6
 800842e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	fb02 f203 	mul.w	r2, r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	fbb2 f3f3 	udiv	r3, r2, r3
 800843e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008440:	4b29      	ldr	r3, [pc, #164]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	f003 031f 	and.w	r3, r3, #31
 800844c:	3301      	adds	r3, #1
 800844e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	fbb2 f3f3 	udiv	r3, r2, r3
 8008458:	617b      	str	r3, [r7, #20]
        break;
 800845a:	e03d      	b.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800845c:	4b22      	ldr	r3, [pc, #136]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d108      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008468:	4b1f      	ldr	r3, [pc, #124]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008470:	4a1e      	ldr	r2, [pc, #120]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008472:	fbb2 f3f3 	udiv	r3, r2, r3
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	e007      	b.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800847a:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008482:	4a1b      	ldr	r2, [pc, #108]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008484:	fbb2 f3f3 	udiv	r3, r2, r3
 8008488:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800848a:	4b17      	ldr	r3, [pc, #92]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800848c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008490:	0e1b      	lsrs	r3, r3, #24
 8008492:	f003 030f 	and.w	r3, r3, #15
 8008496:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008498:	4b13      	ldr	r3, [pc, #76]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800849a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800849e:	099b      	lsrs	r3, r3, #6
 80084a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	fb02 f203 	mul.w	r2, r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80084b2:	4b0d      	ldr	r3, [pc, #52]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	3301      	adds	r3, #1
 80084be:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c8:	617b      	str	r3, [r7, #20]
        break;
 80084ca:	e005      	b.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80084cc:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80084ce:	617b      	str	r3, [r7, #20]
        break;
 80084d0:	e002      	b.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80084d2:	bf00      	nop
 80084d4:	e000      	b.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80084d6:	bf00      	nop

  return frequency;
 80084d8:	697b      	ldr	r3, [r7, #20]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40023800 	.word	0x40023800
 80084ec:	00f42400 	.word	0x00f42400
 80084f0:	017d7840 	.word	0x017d7840
 80084f4:	00bb8000 	.word	0x00bb8000

080084f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e081      	b.n	800860e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	7f5b      	ldrb	r3, [r3, #29]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d105      	bne.n	8008520 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7fb f80a 	bl	8003534 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	22ca      	movs	r2, #202	; 0xca
 800852c:	625a      	str	r2, [r3, #36]	; 0x24
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2253      	movs	r2, #83	; 0x53
 8008534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fb16 	bl	8008b68 <RTC_EnterInitMode>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d008      	beq.n	8008554 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	22ff      	movs	r2, #255	; 0xff
 8008548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2204      	movs	r2, #4
 800854e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e05c      	b.n	800860e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6899      	ldr	r1, [r3, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4b2e      	ldr	r3, [pc, #184]	; (8008618 <HAL_RTC_Init+0x120>)
 8008560:	400b      	ands	r3, r1
 8008562:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6899      	ldr	r1, [r3, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	431a      	orrs	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	431a      	orrs	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	68d2      	ldr	r2, [r2, #12]
 800858a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6919      	ldr	r1, [r3, #16]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	041a      	lsls	r2, r3, #16
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085ae:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10e      	bne.n	80085dc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 faaa 	bl	8008b18 <HAL_RTC_WaitForSynchro>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d008      	beq.n	80085dc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	22ff      	movs	r2, #255	; 0xff
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2204      	movs	r2, #4
 80085d6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e018      	b.n	800860e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0208 	bic.w	r2, r2, #8
 80085ea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699a      	ldr	r2, [r3, #24]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	22ff      	movs	r2, #255	; 0xff
 8008604:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
  }
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	ff8fffbf 	.word	0xff8fffbf

0800861c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	7f1b      	ldrb	r3, [r3, #28]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_RTC_SetTime+0x1c>
 8008634:	2302      	movs	r3, #2
 8008636:	e0a8      	b.n	800878a <HAL_RTC_SetTime+0x16e>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2202      	movs	r2, #2
 8008642:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d126      	bne.n	8008698 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 faac 	bl	8008bc0 <RTC_ByteToBcd2>
 8008668:	4603      	mov	r3, r0
 800866a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 faa5 	bl	8008bc0 <RTC_ByteToBcd2>
 8008676:	4603      	mov	r3, r0
 8008678:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800867a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	789b      	ldrb	r3, [r3, #2]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fa9d 	bl	8008bc0 <RTC_ByteToBcd2>
 8008686:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008688:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	7b1b      	ldrb	r3, [r3, #12]
 8008690:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	e018      	b.n	80086ca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d102      	bne.n	80086ac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	785b      	ldrb	r3, [r3, #1]
 80086b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086b8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80086be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	7b1b      	ldrb	r3, [r3, #12]
 80086c4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	22ca      	movs	r2, #202	; 0xca
 80086d0:	625a      	str	r2, [r3, #36]	; 0x24
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2253      	movs	r2, #83	; 0x53
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 fa44 	bl	8008b68 <RTC_EnterInitMode>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00b      	beq.n	80086fe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	22ff      	movs	r2, #255	; 0xff
 80086ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2204      	movs	r2, #4
 80086f2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e045      	b.n	800878a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	6979      	ldr	r1, [r7, #20]
 8008704:	4b23      	ldr	r3, [pc, #140]	; (8008794 <HAL_RTC_SetTime+0x178>)
 8008706:	400b      	ands	r3, r1
 8008708:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008718:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6899      	ldr	r1, [r3, #8]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	431a      	orrs	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008740:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f003 0320 	and.w	r3, r3, #32
 800874c:	2b00      	cmp	r3, #0
 800874e:	d111      	bne.n	8008774 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 f9e1 	bl	8008b18 <HAL_RTC_WaitForSynchro>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	22ff      	movs	r2, #255	; 0xff
 8008762:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2204      	movs	r2, #4
 8008768:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e00a      	b.n	800878a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	22ff      	movs	r2, #255	; 0xff
 800877a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2201      	movs	r2, #1
 8008780:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008788:	2300      	movs	r3, #0
  }
}
 800878a:	4618      	mov	r0, r3
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	bd90      	pop	{r4, r7, pc}
 8008792:	bf00      	nop
 8008794:	007f7f7f 	.word	0x007f7f7f

08008798 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	7f1b      	ldrb	r3, [r3, #28]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <HAL_RTC_SetDate+0x1c>
 80087b0:	2302      	movs	r3, #2
 80087b2:	e092      	b.n	80088da <HAL_RTC_SetDate+0x142>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2202      	movs	r2, #2
 80087be:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10e      	bne.n	80087e4 <HAL_RTC_SetDate+0x4c>
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	f003 0310 	and.w	r3, r3, #16
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d008      	beq.n	80087e4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	785b      	ldrb	r3, [r3, #1]
 80087d6:	f023 0310 	bic.w	r3, r3, #16
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	330a      	adds	r3, #10
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d11c      	bne.n	8008824 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	78db      	ldrb	r3, [r3, #3]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 f9e6 	bl	8008bc0 <RTC_ByteToBcd2>
 80087f4:	4603      	mov	r3, r0
 80087f6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 f9df 	bl	8008bc0 <RTC_ByteToBcd2>
 8008802:	4603      	mov	r3, r0
 8008804:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008806:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	789b      	ldrb	r3, [r3, #2]
 800880c:	4618      	mov	r0, r3
 800880e:	f000 f9d7 	bl	8008bc0 <RTC_ByteToBcd2>
 8008812:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008814:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800881e:	4313      	orrs	r3, r2
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	e00e      	b.n	8008842 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	78db      	ldrb	r3, [r3, #3]
 8008828:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008830:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008836:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800883e:	4313      	orrs	r3, r2
 8008840:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	22ca      	movs	r2, #202	; 0xca
 8008848:	625a      	str	r2, [r3, #36]	; 0x24
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2253      	movs	r2, #83	; 0x53
 8008850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 f988 	bl	8008b68 <RTC_EnterInitMode>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	22ff      	movs	r2, #255	; 0xff
 8008864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2204      	movs	r2, #4
 800886a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e031      	b.n	80088da <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	6979      	ldr	r1, [r7, #20]
 800887c:	4b19      	ldr	r3, [pc, #100]	; (80088e4 <HAL_RTC_SetDate+0x14c>)
 800887e:	400b      	ands	r3, r1
 8008880:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008890:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f003 0320 	and.w	r3, r3, #32
 800889c:	2b00      	cmp	r3, #0
 800889e:	d111      	bne.n	80088c4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 f939 	bl	8008b18 <HAL_RTC_WaitForSynchro>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00b      	beq.n	80088c4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	22ff      	movs	r2, #255	; 0xff
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2204      	movs	r2, #4
 80088b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e00a      	b.n	80088da <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	22ff      	movs	r2, #255	; 0xff
 80088ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80088d8:	2300      	movs	r3, #0
  }
}
 80088da:	4618      	mov	r0, r3
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd90      	pop	{r4, r7, pc}
 80088e2:	bf00      	nop
 80088e4:	00ffff3f 	.word	0x00ffff3f

080088e8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80088e8:	b590      	push	{r4, r7, lr}
 80088ea:	b089      	sub	sp, #36	; 0x24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61fb      	str	r3, [r7, #28]
 80088fc:	2300      	movs	r3, #0
 80088fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	7f1b      	ldrb	r3, [r3, #28]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_RTC_SetAlarm+0x24>
 8008908:	2302      	movs	r3, #2
 800890a:	e101      	b.n	8008b10 <HAL_RTC_SetAlarm+0x228>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2201      	movs	r2, #1
 8008910:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2202      	movs	r2, #2
 8008916:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d137      	bne.n	800898e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2200      	movs	r2, #0
 8008930:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f942 	bl	8008bc0 <RTC_ByteToBcd2>
 800893c:	4603      	mov	r3, r0
 800893e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 f93b 	bl	8008bc0 <RTC_ByteToBcd2>
 800894a:	4603      	mov	r3, r0
 800894c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800894e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	789b      	ldrb	r3, [r3, #2]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f933 	bl	8008bc0 <RTC_ByteToBcd2>
 800895a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800895c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	7b1b      	ldrb	r3, [r3, #12]
 8008964:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008966:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f925 	bl	8008bc0 <RTC_ByteToBcd2>
 8008976:	4603      	mov	r3, r0
 8008978:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800897a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008982:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008988:	4313      	orrs	r3, r2
 800898a:	61fb      	str	r3, [r7, #28]
 800898c:	e023      	b.n	80089d6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2200      	movs	r2, #0
 80089a0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089ae:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80089b4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	7b1b      	ldrb	r3, [r3, #12]
 80089ba:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80089bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80089c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089d2:	4313      	orrs	r3, r2
 80089d4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	22ca      	movs	r2, #202	; 0xca
 80089e8:	625a      	str	r2, [r3, #36]	; 0x24
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2253      	movs	r2, #83	; 0x53
 80089f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fa:	d13f      	bne.n	8008a7c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a0a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a1a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a1c:	f7fb fd12 	bl	8004444 <HAL_GetTick>
 8008a20:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a22:	e013      	b.n	8008a4c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a24:	f7fb fd0e 	bl	8004444 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a32:	d90b      	bls.n	8008a4c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	22ff      	movs	r2, #255	; 0xff
 8008a3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2203      	movs	r2, #3
 8008a40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e061      	b.n	8008b10 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0e4      	beq.n	8008a24 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a78:	609a      	str	r2, [r3, #8]
 8008a7a:	e03e      	b.n	8008afa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a8a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a9a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a9c:	f7fb fcd2 	bl	8004444 <HAL_GetTick>
 8008aa0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008aa2:	e013      	b.n	8008acc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008aa4:	f7fb fcce 	bl	8004444 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab2:	d90b      	bls.n	8008acc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	22ff      	movs	r2, #255	; 0xff
 8008aba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2203      	movs	r2, #3
 8008ac0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e021      	b.n	8008b10 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0e4      	beq.n	8008aa4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	22ff      	movs	r2, #255	; 0xff
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2201      	movs	r2, #1
 8008b06:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3724      	adds	r7, #36	; 0x24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd90      	pop	{r4, r7, pc}

08008b18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68da      	ldr	r2, [r3, #12]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b34:	f7fb fc86 	bl	8004444 <HAL_GetTick>
 8008b38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b3a:	e009      	b.n	8008b50 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b3c:	f7fb fc82 	bl	8004444 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b4a:	d901      	bls.n	8008b50 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e007      	b.n	8008b60 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d0ee      	beq.n	8008b3c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d119      	bne.n	8008bb6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b8c:	f7fb fc5a 	bl	8004444 <HAL_GetTick>
 8008b90:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b92:	e009      	b.n	8008ba8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b94:	f7fb fc56 	bl	8004444 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ba2:	d901      	bls.n	8008ba8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e007      	b.n	8008bb8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0ee      	beq.n	8008b94 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008bce:	e005      	b.n	8008bdc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008bd6:	79fb      	ldrb	r3, [r7, #7]
 8008bd8:	3b0a      	subs	r3, #10
 8008bda:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	2b09      	cmp	r3, #9
 8008be0:	d8f6      	bhi.n	8008bd0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	79fb      	ldrb	r3, [r7, #7]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	b2db      	uxtb	r3, r3
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	7f1b      	ldrb	r3, [r3, #28]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e03e      	b.n	8008c96 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2202      	movs	r2, #2
 8008c22:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	22ca      	movs	r2, #202	; 0xca
 8008c3e:	625a      	str	r2, [r3, #36]	; 0x24
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2253      	movs	r2, #83	; 0x53
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0206 	bic.w	r2, r2, #6
 8008c56:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c7e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	22ff      	movs	r2, #255	; 0xff
 8008c86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	fffff7f7 	.word	0xfffff7f7

08008ca8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e025      	b.n	8008d08 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d106      	bne.n	8008cd6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7fa fee5 	bl	8003aa0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4610      	mov	r0, r2
 8008cea:	f002 f955 	bl	800af98 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	f002 f9bf 	bl	800b07c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d101      	bne.n	8008d2c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e018      	b.n	8008d5e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f002 fa1d 	bl	800b17c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d104      	bne.n	8008d54 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2205      	movs	r2, #5
 8008d4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008d52:	e003      	b.n	8008d5c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b082      	sub	sp, #8
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d101      	bne.n	8008d80 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e00e      	b.n	8008d9e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f002 fa18 	bl	800b1c4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e09d      	b.n	8008ef4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d108      	bne.n	8008dd2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dc8:	d009      	beq.n	8008dde <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	61da      	str	r2, [r3, #28]
 8008dd0:	e005      	b.n	8008dde <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d106      	bne.n	8008dfe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7fa fbb5 	bl	8003568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e14:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e1e:	d902      	bls.n	8008e26 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e002      	b.n	8008e2c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e34:	d007      	beq.n	8008e46 <HAL_SPI_Init+0xa0>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e3e:	d002      	beq.n	8008e46 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f003 0302 	and.w	r3, r3, #2
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e88:	ea42 0103 	orr.w	r1, r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	0c1b      	lsrs	r3, r3, #16
 8008ea2:	f003 0204 	and.w	r2, r3, #4
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	f003 0310 	and.w	r3, r3, #16
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ec2:	ea42 0103 	orr.w	r1, r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	69da      	ldr	r2, [r3, #28]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ee2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e049      	b.n	8008fa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d106      	bne.n	8008f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7fa fb92 	bl	800364c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4619      	mov	r1, r3
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	f000 fc6e 	bl	800981c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d001      	beq.n	8008fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e054      	b.n	800906e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a26      	ldr	r2, [pc, #152]	; (800907c <HAL_TIM_Base_Start_IT+0xd0>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d022      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fee:	d01d      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a22      	ldr	r2, [pc, #136]	; (8009080 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d018      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a21      	ldr	r2, [pc, #132]	; (8009084 <HAL_TIM_Base_Start_IT+0xd8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d013      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1f      	ldr	r2, [pc, #124]	; (8009088 <HAL_TIM_Base_Start_IT+0xdc>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d00e      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a1e      	ldr	r2, [pc, #120]	; (800908c <HAL_TIM_Base_Start_IT+0xe0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d009      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a1c      	ldr	r2, [pc, #112]	; (8009090 <HAL_TIM_Base_Start_IT+0xe4>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d004      	beq.n	800902c <HAL_TIM_Base_Start_IT+0x80>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1b      	ldr	r2, [pc, #108]	; (8009094 <HAL_TIM_Base_Start_IT+0xe8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d115      	bne.n	8009058 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	4b19      	ldr	r3, [pc, #100]	; (8009098 <HAL_TIM_Base_Start_IT+0xec>)
 8009034:	4013      	ands	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b06      	cmp	r3, #6
 800903c:	d015      	beq.n	800906a <HAL_TIM_Base_Start_IT+0xbe>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009044:	d011      	beq.n	800906a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0201 	orr.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009056:	e008      	b.n	800906a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e000      	b.n	800906c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	40010000 	.word	0x40010000
 8009080:	40000400 	.word	0x40000400
 8009084:	40000800 	.word	0x40000800
 8009088:	40000c00 	.word	0x40000c00
 800908c:	40010400 	.word	0x40010400
 8009090:	40014000 	.word	0x40014000
 8009094:	40001800 	.word	0x40001800
 8009098:	00010007 	.word	0x00010007

0800909c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e049      	b.n	8009142 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f841 	bl	800914a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f000 fb9e 	bl	800981c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b02      	cmp	r3, #2
 8009172:	d122      	bne.n	80091ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b02      	cmp	r3, #2
 8009180:	d11b      	bne.n	80091ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f06f 0202 	mvn.w	r2, #2
 800918a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	f003 0303 	and.w	r3, r3, #3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fb1d 	bl	80097e0 <HAL_TIM_IC_CaptureCallback>
 80091a6:	e005      	b.n	80091b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fb0f 	bl	80097cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fb20 	bl	80097f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d122      	bne.n	800920e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d11b      	bne.n	800920e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f06f 0204 	mvn.w	r2, #4
 80091de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2202      	movs	r2, #2
 80091e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 faf3 	bl	80097e0 <HAL_TIM_IC_CaptureCallback>
 80091fa:	e005      	b.n	8009208 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fae5 	bl	80097cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 faf6 	bl	80097f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	2b08      	cmp	r3, #8
 800921a:	d122      	bne.n	8009262 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b08      	cmp	r3, #8
 8009228:	d11b      	bne.n	8009262 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f06f 0208 	mvn.w	r2, #8
 8009232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2204      	movs	r2, #4
 8009238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69db      	ldr	r3, [r3, #28]
 8009240:	f003 0303 	and.w	r3, r3, #3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fac9 	bl	80097e0 <HAL_TIM_IC_CaptureCallback>
 800924e:	e005      	b.n	800925c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fabb 	bl	80097cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 facc 	bl	80097f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0310 	and.w	r3, r3, #16
 800926c:	2b10      	cmp	r3, #16
 800926e:	d122      	bne.n	80092b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	f003 0310 	and.w	r3, r3, #16
 800927a:	2b10      	cmp	r3, #16
 800927c:	d11b      	bne.n	80092b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f06f 0210 	mvn.w	r2, #16
 8009286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2208      	movs	r2, #8
 800928c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fa9f 	bl	80097e0 <HAL_TIM_IC_CaptureCallback>
 80092a2:	e005      	b.n	80092b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fa91 	bl	80097cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 faa2 	bl	80097f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d10e      	bne.n	80092e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d107      	bne.n	80092e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f06f 0201 	mvn.w	r2, #1
 80092da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7f8 fd07 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b80      	cmp	r3, #128	; 0x80
 80092ee:	d10e      	bne.n	800930e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092fa:	2b80      	cmp	r3, #128	; 0x80
 80092fc:	d107      	bne.n	800930e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 ffc5 	bl	800a298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800931c:	d10e      	bne.n	800933c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009328:	2b80      	cmp	r3, #128	; 0x80
 800932a:	d107      	bne.n	800933c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 ffb8 	bl	800a2ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009346:	2b40      	cmp	r3, #64	; 0x40
 8009348:	d10e      	bne.n	8009368 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009354:	2b40      	cmp	r3, #64	; 0x40
 8009356:	d107      	bne.n	8009368 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fa50 	bl	8009808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b20      	cmp	r3, #32
 8009374:	d10e      	bne.n	8009394 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b20      	cmp	r3, #32
 8009382:	d107      	bne.n	8009394 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f06f 0220 	mvn.w	r2, #32
 800938c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 ff78 	bl	800a284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e0fd      	b.n	80095b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b14      	cmp	r3, #20
 80093c2:	f200 80f0 	bhi.w	80095a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80093c6:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093cc:	08009421 	.word	0x08009421
 80093d0:	080095a7 	.word	0x080095a7
 80093d4:	080095a7 	.word	0x080095a7
 80093d8:	080095a7 	.word	0x080095a7
 80093dc:	08009461 	.word	0x08009461
 80093e0:	080095a7 	.word	0x080095a7
 80093e4:	080095a7 	.word	0x080095a7
 80093e8:	080095a7 	.word	0x080095a7
 80093ec:	080094a3 	.word	0x080094a3
 80093f0:	080095a7 	.word	0x080095a7
 80093f4:	080095a7 	.word	0x080095a7
 80093f8:	080095a7 	.word	0x080095a7
 80093fc:	080094e3 	.word	0x080094e3
 8009400:	080095a7 	.word	0x080095a7
 8009404:	080095a7 	.word	0x080095a7
 8009408:	080095a7 	.word	0x080095a7
 800940c:	08009525 	.word	0x08009525
 8009410:	080095a7 	.word	0x080095a7
 8009414:	080095a7 	.word	0x080095a7
 8009418:	080095a7 	.word	0x080095a7
 800941c:	08009565 	.word	0x08009565
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fa98 	bl	800995c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	699a      	ldr	r2, [r3, #24]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0208 	orr.w	r2, r2, #8
 800943a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 0204 	bic.w	r2, r2, #4
 800944a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6999      	ldr	r1, [r3, #24]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	691a      	ldr	r2, [r3, #16]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	619a      	str	r2, [r3, #24]
      break;
 800945e:	e0a3      	b.n	80095a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 faea 	bl	8009a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800947a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800948a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6999      	ldr	r1, [r3, #24]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	021a      	lsls	r2, r3, #8
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	619a      	str	r2, [r3, #24]
      break;
 80094a0:	e082      	b.n	80095a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 fb41 	bl	8009b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69da      	ldr	r2, [r3, #28]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f042 0208 	orr.w	r2, r2, #8
 80094bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	69da      	ldr	r2, [r3, #28]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0204 	bic.w	r2, r2, #4
 80094cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69d9      	ldr	r1, [r3, #28]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	691a      	ldr	r2, [r3, #16]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	61da      	str	r2, [r3, #28]
      break;
 80094e0:	e062      	b.n	80095a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68b9      	ldr	r1, [r7, #8]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fb97 	bl	8009c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69da      	ldr	r2, [r3, #28]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69da      	ldr	r2, [r3, #28]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800950c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69d9      	ldr	r1, [r3, #28]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	021a      	lsls	r2, r3, #8
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	61da      	str	r2, [r3, #28]
      break;
 8009522:	e041      	b.n	80095a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68b9      	ldr	r1, [r7, #8]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fbce 	bl	8009ccc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0208 	orr.w	r2, r2, #8
 800953e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0204 	bic.w	r2, r2, #4
 800954e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	691a      	ldr	r2, [r3, #16]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009562:	e021      	b.n	80095a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fc00 	bl	8009d70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800957e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800958e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	021a      	lsls	r2, r3, #8
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	430a      	orrs	r2, r1
 80095a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80095a4:	e000      	b.n	80095a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80095a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop

080095bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_TIM_ConfigClockSource+0x18>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e0b3      	b.n	800973c <HAL_TIM_ConfigClockSource+0x180>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4b55      	ldr	r3, [pc, #340]	; (8009744 <HAL_TIM_ConfigClockSource+0x188>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800960c:	d03e      	beq.n	800968c <HAL_TIM_ConfigClockSource+0xd0>
 800960e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009612:	f200 8087 	bhi.w	8009724 <HAL_TIM_ConfigClockSource+0x168>
 8009616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961a:	f000 8085 	beq.w	8009728 <HAL_TIM_ConfigClockSource+0x16c>
 800961e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009622:	d87f      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x168>
 8009624:	2b70      	cmp	r3, #112	; 0x70
 8009626:	d01a      	beq.n	800965e <HAL_TIM_ConfigClockSource+0xa2>
 8009628:	2b70      	cmp	r3, #112	; 0x70
 800962a:	d87b      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x168>
 800962c:	2b60      	cmp	r3, #96	; 0x60
 800962e:	d050      	beq.n	80096d2 <HAL_TIM_ConfigClockSource+0x116>
 8009630:	2b60      	cmp	r3, #96	; 0x60
 8009632:	d877      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x168>
 8009634:	2b50      	cmp	r3, #80	; 0x50
 8009636:	d03c      	beq.n	80096b2 <HAL_TIM_ConfigClockSource+0xf6>
 8009638:	2b50      	cmp	r3, #80	; 0x50
 800963a:	d873      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x168>
 800963c:	2b40      	cmp	r3, #64	; 0x40
 800963e:	d058      	beq.n	80096f2 <HAL_TIM_ConfigClockSource+0x136>
 8009640:	2b40      	cmp	r3, #64	; 0x40
 8009642:	d86f      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x168>
 8009644:	2b30      	cmp	r3, #48	; 0x30
 8009646:	d064      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0x156>
 8009648:	2b30      	cmp	r3, #48	; 0x30
 800964a:	d86b      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x168>
 800964c:	2b20      	cmp	r3, #32
 800964e:	d060      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0x156>
 8009650:	2b20      	cmp	r3, #32
 8009652:	d867      	bhi.n	8009724 <HAL_TIM_ConfigClockSource+0x168>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d05c      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0x156>
 8009658:	2b10      	cmp	r3, #16
 800965a:	d05a      	beq.n	8009712 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800965c:	e062      	b.n	8009724 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6899      	ldr	r1, [r3, #8]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	f000 fcdd 	bl	800a02c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009680:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	609a      	str	r2, [r3, #8]
      break;
 800968a:	e04e      	b.n	800972a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	6899      	ldr	r1, [r3, #8]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f000 fcc6 	bl	800a02c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096ae:	609a      	str	r2, [r3, #8]
      break;
 80096b0:	e03b      	b.n	800972a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6818      	ldr	r0, [r3, #0]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6859      	ldr	r1, [r3, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	461a      	mov	r2, r3
 80096c0:	f000 fc3a 	bl	8009f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2150      	movs	r1, #80	; 0x50
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fc93 	bl	8009ff6 <TIM_ITRx_SetConfig>
      break;
 80096d0:	e02b      	b.n	800972a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	6859      	ldr	r1, [r3, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	461a      	mov	r2, r3
 80096e0:	f000 fc59 	bl	8009f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2160      	movs	r1, #96	; 0x60
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fc83 	bl	8009ff6 <TIM_ITRx_SetConfig>
      break;
 80096f0:	e01b      	b.n	800972a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6818      	ldr	r0, [r3, #0]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	6859      	ldr	r1, [r3, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	461a      	mov	r2, r3
 8009700:	f000 fc1a 	bl	8009f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2140      	movs	r1, #64	; 0x40
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fc73 	bl	8009ff6 <TIM_ITRx_SetConfig>
      break;
 8009710:	e00b      	b.n	800972a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4619      	mov	r1, r3
 800971c:	4610      	mov	r0, r2
 800971e:	f000 fc6a 	bl	8009ff6 <TIM_ITRx_SetConfig>
        break;
 8009722:	e002      	b.n	800972a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009724:	bf00      	nop
 8009726:	e000      	b.n	800972a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009728:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	fffeff88 	.word	0xfffeff88

08009748 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_TIM_SlaveConfigSynchro+0x18>
 800975c:	2302      	movs	r3, #2
 800975e:	e031      	b.n	80097c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fb50 	bl	8009e18 <TIM_SlaveTimer_SetConfig>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d009      	beq.n	8009792 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e018      	b.n	80097c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68da      	ldr	r2, [r3, #12]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68da      	ldr	r2, [r3, #12]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a40      	ldr	r2, [pc, #256]	; (8009930 <TIM_Base_SetConfig+0x114>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d013      	beq.n	800985c <TIM_Base_SetConfig+0x40>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983a:	d00f      	beq.n	800985c <TIM_Base_SetConfig+0x40>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a3d      	ldr	r2, [pc, #244]	; (8009934 <TIM_Base_SetConfig+0x118>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00b      	beq.n	800985c <TIM_Base_SetConfig+0x40>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a3c      	ldr	r2, [pc, #240]	; (8009938 <TIM_Base_SetConfig+0x11c>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d007      	beq.n	800985c <TIM_Base_SetConfig+0x40>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a3b      	ldr	r2, [pc, #236]	; (800993c <TIM_Base_SetConfig+0x120>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d003      	beq.n	800985c <TIM_Base_SetConfig+0x40>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a3a      	ldr	r2, [pc, #232]	; (8009940 <TIM_Base_SetConfig+0x124>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d108      	bne.n	800986e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	4313      	orrs	r3, r2
 800986c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a2f      	ldr	r2, [pc, #188]	; (8009930 <TIM_Base_SetConfig+0x114>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d02b      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987c:	d027      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a2c      	ldr	r2, [pc, #176]	; (8009934 <TIM_Base_SetConfig+0x118>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d023      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a2b      	ldr	r2, [pc, #172]	; (8009938 <TIM_Base_SetConfig+0x11c>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d01f      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a2a      	ldr	r2, [pc, #168]	; (800993c <TIM_Base_SetConfig+0x120>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d01b      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a29      	ldr	r2, [pc, #164]	; (8009940 <TIM_Base_SetConfig+0x124>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d017      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a28      	ldr	r2, [pc, #160]	; (8009944 <TIM_Base_SetConfig+0x128>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d013      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a27      	ldr	r2, [pc, #156]	; (8009948 <TIM_Base_SetConfig+0x12c>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d00f      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a26      	ldr	r2, [pc, #152]	; (800994c <TIM_Base_SetConfig+0x130>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00b      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a25      	ldr	r2, [pc, #148]	; (8009950 <TIM_Base_SetConfig+0x134>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d007      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a24      	ldr	r2, [pc, #144]	; (8009954 <TIM_Base_SetConfig+0x138>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d003      	beq.n	80098ce <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a23      	ldr	r2, [pc, #140]	; (8009958 <TIM_Base_SetConfig+0x13c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d108      	bne.n	80098e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a0a      	ldr	r2, [pc, #40]	; (8009930 <TIM_Base_SetConfig+0x114>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d003      	beq.n	8009914 <TIM_Base_SetConfig+0xf8>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a0c      	ldr	r2, [pc, #48]	; (8009940 <TIM_Base_SetConfig+0x124>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d103      	bne.n	800991c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	691a      	ldr	r2, [r3, #16]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	615a      	str	r2, [r3, #20]
}
 8009922:	bf00      	nop
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40010000 	.word	0x40010000
 8009934:	40000400 	.word	0x40000400
 8009938:	40000800 	.word	0x40000800
 800993c:	40000c00 	.word	0x40000c00
 8009940:	40010400 	.word	0x40010400
 8009944:	40014000 	.word	0x40014000
 8009948:	40014400 	.word	0x40014400
 800994c:	40014800 	.word	0x40014800
 8009950:	40001800 	.word	0x40001800
 8009954:	40001c00 	.word	0x40001c00
 8009958:	40002000 	.word	0x40002000

0800995c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	f023 0201 	bic.w	r2, r3, #1
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	4b2b      	ldr	r3, [pc, #172]	; (8009a34 <TIM_OC1_SetConfig+0xd8>)
 8009988:	4013      	ands	r3, r2
 800998a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0303 	bic.w	r3, r3, #3
 8009992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f023 0302 	bic.w	r3, r3, #2
 80099a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a21      	ldr	r2, [pc, #132]	; (8009a38 <TIM_OC1_SetConfig+0xdc>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d003      	beq.n	80099c0 <TIM_OC1_SetConfig+0x64>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a20      	ldr	r2, [pc, #128]	; (8009a3c <TIM_OC1_SetConfig+0xe0>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10c      	bne.n	80099da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f023 0308 	bic.w	r3, r3, #8
 80099c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f023 0304 	bic.w	r3, r3, #4
 80099d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a16      	ldr	r2, [pc, #88]	; (8009a38 <TIM_OC1_SetConfig+0xdc>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d003      	beq.n	80099ea <TIM_OC1_SetConfig+0x8e>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <TIM_OC1_SetConfig+0xe0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d111      	bne.n	8009a0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	621a      	str	r2, [r3, #32]
}
 8009a28:	bf00      	nop
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	fffeff8f 	.word	0xfffeff8f
 8009a38:	40010000 	.word	0x40010000
 8009a3c:	40010400 	.word	0x40010400

08009a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	f023 0210 	bic.w	r2, r3, #16
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4b2e      	ldr	r3, [pc, #184]	; (8009b24 <TIM_OC2_SetConfig+0xe4>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f023 0320 	bic.w	r3, r3, #32
 8009a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	011b      	lsls	r3, r3, #4
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a23      	ldr	r2, [pc, #140]	; (8009b28 <TIM_OC2_SetConfig+0xe8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <TIM_OC2_SetConfig+0x68>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a22      	ldr	r2, [pc, #136]	; (8009b2c <TIM_OC2_SetConfig+0xec>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d10d      	bne.n	8009ac4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a18      	ldr	r2, [pc, #96]	; (8009b28 <TIM_OC2_SetConfig+0xe8>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d003      	beq.n	8009ad4 <TIM_OC2_SetConfig+0x94>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a17      	ldr	r2, [pc, #92]	; (8009b2c <TIM_OC2_SetConfig+0xec>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d113      	bne.n	8009afc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	621a      	str	r2, [r3, #32]
}
 8009b16:	bf00      	nop
 8009b18:	371c      	adds	r7, #28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	feff8fff 	.word	0xfeff8fff
 8009b28:	40010000 	.word	0x40010000
 8009b2c:	40010400 	.word	0x40010400

08009b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4b2d      	ldr	r3, [pc, #180]	; (8009c10 <TIM_OC3_SetConfig+0xe0>)
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f023 0303 	bic.w	r3, r3, #3
 8009b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	021b      	lsls	r3, r3, #8
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a22      	ldr	r2, [pc, #136]	; (8009c14 <TIM_OC3_SetConfig+0xe4>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d003      	beq.n	8009b96 <TIM_OC3_SetConfig+0x66>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a21      	ldr	r2, [pc, #132]	; (8009c18 <TIM_OC3_SetConfig+0xe8>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d10d      	bne.n	8009bb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a17      	ldr	r2, [pc, #92]	; (8009c14 <TIM_OC3_SetConfig+0xe4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d003      	beq.n	8009bc2 <TIM_OC3_SetConfig+0x92>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <TIM_OC3_SetConfig+0xe8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d113      	bne.n	8009bea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	621a      	str	r2, [r3, #32]
}
 8009c04:	bf00      	nop
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	fffeff8f 	.word	0xfffeff8f
 8009c14:	40010000 	.word	0x40010000
 8009c18:	40010400 	.word	0x40010400

08009c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4b1e      	ldr	r3, [pc, #120]	; (8009cc0 <TIM_OC4_SetConfig+0xa4>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	021b      	lsls	r3, r3, #8
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	031b      	lsls	r3, r3, #12
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a13      	ldr	r2, [pc, #76]	; (8009cc4 <TIM_OC4_SetConfig+0xa8>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d003      	beq.n	8009c84 <TIM_OC4_SetConfig+0x68>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a12      	ldr	r2, [pc, #72]	; (8009cc8 <TIM_OC4_SetConfig+0xac>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d109      	bne.n	8009c98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	019b      	lsls	r3, r3, #6
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	693a      	ldr	r2, [r7, #16]
 8009cb0:	621a      	str	r2, [r3, #32]
}
 8009cb2:	bf00      	nop
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	feff8fff 	.word	0xfeff8fff
 8009cc4:	40010000 	.word	0x40010000
 8009cc8:	40010400 	.word	0x40010400

08009ccc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4b1b      	ldr	r3, [pc, #108]	; (8009d64 <TIM_OC5_SetConfig+0x98>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	041b      	lsls	r3, r3, #16
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a12      	ldr	r2, [pc, #72]	; (8009d68 <TIM_OC5_SetConfig+0x9c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d003      	beq.n	8009d2a <TIM_OC5_SetConfig+0x5e>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a11      	ldr	r2, [pc, #68]	; (8009d6c <TIM_OC5_SetConfig+0xa0>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d109      	bne.n	8009d3e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	021b      	lsls	r3, r3, #8
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	621a      	str	r2, [r3, #32]
}
 8009d58:	bf00      	nop
 8009d5a:	371c      	adds	r7, #28
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	fffeff8f 	.word	0xfffeff8f
 8009d68:	40010000 	.word	0x40010000
 8009d6c:	40010400 	.word	0x40010400

08009d70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4b1c      	ldr	r3, [pc, #112]	; (8009e0c <TIM_OC6_SetConfig+0x9c>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	051b      	lsls	r3, r3, #20
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a13      	ldr	r2, [pc, #76]	; (8009e10 <TIM_OC6_SetConfig+0xa0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_OC6_SetConfig+0x60>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a12      	ldr	r2, [pc, #72]	; (8009e14 <TIM_OC6_SetConfig+0xa4>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d109      	bne.n	8009de4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	029b      	lsls	r3, r3, #10
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	feff8fff 	.word	0xfeff8fff
 8009e10:	40010000 	.word	0x40010000
 8009e14:	40010400 	.word	0x40010400

08009e18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e30:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	4b3d      	ldr	r3, [pc, #244]	; (8009f34 <TIM_SlaveTimer_SetConfig+0x11c>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2b70      	cmp	r3, #112	; 0x70
 8009e5c:	d01a      	beq.n	8009e94 <TIM_SlaveTimer_SetConfig+0x7c>
 8009e5e:	2b70      	cmp	r3, #112	; 0x70
 8009e60:	d860      	bhi.n	8009f24 <TIM_SlaveTimer_SetConfig+0x10c>
 8009e62:	2b60      	cmp	r3, #96	; 0x60
 8009e64:	d054      	beq.n	8009f10 <TIM_SlaveTimer_SetConfig+0xf8>
 8009e66:	2b60      	cmp	r3, #96	; 0x60
 8009e68:	d85c      	bhi.n	8009f24 <TIM_SlaveTimer_SetConfig+0x10c>
 8009e6a:	2b50      	cmp	r3, #80	; 0x50
 8009e6c:	d046      	beq.n	8009efc <TIM_SlaveTimer_SetConfig+0xe4>
 8009e6e:	2b50      	cmp	r3, #80	; 0x50
 8009e70:	d858      	bhi.n	8009f24 <TIM_SlaveTimer_SetConfig+0x10c>
 8009e72:	2b40      	cmp	r3, #64	; 0x40
 8009e74:	d019      	beq.n	8009eaa <TIM_SlaveTimer_SetConfig+0x92>
 8009e76:	2b40      	cmp	r3, #64	; 0x40
 8009e78:	d854      	bhi.n	8009f24 <TIM_SlaveTimer_SetConfig+0x10c>
 8009e7a:	2b30      	cmp	r3, #48	; 0x30
 8009e7c:	d054      	beq.n	8009f28 <TIM_SlaveTimer_SetConfig+0x110>
 8009e7e:	2b30      	cmp	r3, #48	; 0x30
 8009e80:	d850      	bhi.n	8009f24 <TIM_SlaveTimer_SetConfig+0x10c>
 8009e82:	2b20      	cmp	r3, #32
 8009e84:	d050      	beq.n	8009f28 <TIM_SlaveTimer_SetConfig+0x110>
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	d84c      	bhi.n	8009f24 <TIM_SlaveTimer_SetConfig+0x10c>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d04c      	beq.n	8009f28 <TIM_SlaveTimer_SetConfig+0x110>
 8009e8e:	2b10      	cmp	r3, #16
 8009e90:	d04a      	beq.n	8009f28 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8009e92:	e047      	b.n	8009f24 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6818      	ldr	r0, [r3, #0]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	68d9      	ldr	r1, [r3, #12]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	f000 f8c2 	bl	800a02c <TIM_ETR_SetConfig>
      break;
 8009ea8:	e03f      	b.n	8009f2a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	d101      	bne.n	8009eb6 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e03a      	b.n	8009f2c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6a1a      	ldr	r2, [r3, #32]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f022 0201 	bic.w	r2, r2, #1
 8009ecc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009edc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	621a      	str	r2, [r3, #32]
      break;
 8009efa:	e016      	b.n	8009f2a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	6899      	ldr	r1, [r3, #8]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	f000 f815 	bl	8009f38 <TIM_TI1_ConfigInputStage>
      break;
 8009f0e:	e00c      	b.n	8009f2a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	6899      	ldr	r1, [r3, #8]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	f000 f83a 	bl	8009f96 <TIM_TI2_ConfigInputStage>
      break;
 8009f22:	e002      	b.n	8009f2a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009f24:	bf00      	nop
 8009f26:	e000      	b.n	8009f2a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8009f28:	bf00      	nop
  }
  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	fffefff8 	.word	0xfffefff8

08009f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	f023 0201 	bic.w	r2, r3, #1
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f023 030a 	bic.w	r3, r3, #10
 8009f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	621a      	str	r2, [r3, #32]
}
 8009f8a:	bf00      	nop
 8009f8c:	371c      	adds	r7, #28
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b087      	sub	sp, #28
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	f023 0210 	bic.w	r2, r3, #16
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	031b      	lsls	r3, r3, #12
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	621a      	str	r2, [r3, #32]
}
 8009fea:	bf00      	nop
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b085      	sub	sp, #20
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a00c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4313      	orrs	r3, r2
 800a014:	f043 0307 	orr.w	r3, r3, #7
 800a018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	609a      	str	r2, [r3, #8]
}
 800a020:	bf00      	nop
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	021a      	lsls	r2, r3, #8
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	431a      	orrs	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	4313      	orrs	r3, r2
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	4313      	orrs	r3, r2
 800a058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	609a      	str	r2, [r3, #8]
}
 800a060:	bf00      	nop
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d101      	bne.n	800a084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a080:	2302      	movs	r3, #2
 800a082:	e06d      	b.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a30      	ldr	r2, [pc, #192]	; (800a16c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d004      	beq.n	800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a2f      	ldr	r2, [pc, #188]	; (800a170 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d108      	bne.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a20      	ldr	r2, [pc, #128]	; (800a16c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d022      	beq.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f6:	d01d      	beq.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a1d      	ldr	r2, [pc, #116]	; (800a174 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d018      	beq.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a1c      	ldr	r2, [pc, #112]	; (800a178 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d013      	beq.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a1a      	ldr	r2, [pc, #104]	; (800a17c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d00e      	beq.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a15      	ldr	r2, [pc, #84]	; (800a170 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d009      	beq.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a16      	ldr	r2, [pc, #88]	; (800a180 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d004      	beq.n	800a134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a15      	ldr	r2, [pc, #84]	; (800a184 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d10c      	bne.n	800a14e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a13a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	4313      	orrs	r3, r2
 800a144:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	40010000 	.word	0x40010000
 800a170:	40010400 	.word	0x40010400
 800a174:	40000400 	.word	0x40000400
 800a178:	40000800 	.word	0x40000800
 800a17c:	40000c00 	.word	0x40000c00
 800a180:	40014000 	.word	0x40014000
 800a184:	40001800 	.word	0x40001800

0800a188 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e065      	b.n	800a270 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	041b      	lsls	r3, r3, #16
 800a21a:	4313      	orrs	r3, r2
 800a21c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a16      	ldr	r2, [pc, #88]	; (800a27c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d004      	beq.n	800a232 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a14      	ldr	r2, [pc, #80]	; (800a280 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d115      	bne.n	800a25e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	051b      	lsls	r3, r3, #20
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	40010000 	.word	0x40010000
 800a280:	40010400 	.word	0x40010400

0800a284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e040      	b.n	800a354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7f9 fa7e 	bl	80037e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2224      	movs	r2, #36	; 0x24
 800a2ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 0201 	bic.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa38 	bl	800a774 <UART_SetConfig>
 800a304:	4603      	mov	r3, r0
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e022      	b.n	800a354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fc8e 	bl	800ac38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a32a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a33a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f042 0201 	orr.w	r2, r2, #1
 800a34a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fd15 	bl	800ad7c <UART_CheckIdleState>
 800a352:	4603      	mov	r3, r0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a37c:	69fa      	ldr	r2, [r7, #28]
 800a37e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a382:	4013      	ands	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d113      	bne.n	800a3b4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00e      	beq.n	800a3b4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	f003 0320 	and.w	r3, r3, #32
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d009      	beq.n	800a3b4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 81b9 	beq.w	800a71c <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	4798      	blx	r3
      }
      return;
 800a3b2:	e1b3      	b.n	800a71c <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 80e3 	beq.w	800a582 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d105      	bne.n	800a3d2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	4ba5      	ldr	r3, [pc, #660]	; (800a660 <HAL_UART_IRQHandler+0x304>)
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 80d8 	beq.w	800a582 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d010      	beq.n	800a3fe <HAL_UART_IRQHandler+0xa2>
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00b      	beq.n	800a3fe <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3f4:	f043 0201 	orr.w	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	2b00      	cmp	r3, #0
 800a406:	d010      	beq.n	800a42a <HAL_UART_IRQHandler+0xce>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00b      	beq.n	800a42a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2202      	movs	r2, #2
 800a418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a420:	f043 0204 	orr.w	r2, r3, #4
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d010      	beq.n	800a456 <HAL_UART_IRQHandler+0xfa>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2204      	movs	r2, #4
 800a444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a44c:	f043 0202 	orr.w	r2, r3, #2
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d015      	beq.n	800a48c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d104      	bne.n	800a474 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2208      	movs	r2, #8
 800a47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a482:	f043 0208 	orr.w	r2, r3, #8
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a492:	2b00      	cmp	r3, #0
 800a494:	d011      	beq.n	800a4ba <HAL_UART_IRQHandler+0x15e>
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00c      	beq.n	800a4ba <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4b0:	f043 0220 	orr.w	r2, r3, #32
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 812d 	beq.w	800a720 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	f003 0320 	and.w	r3, r3, #32
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00c      	beq.n	800a4ea <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f003 0320 	and.w	r3, r3, #32
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d007      	beq.n	800a4ea <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d003      	beq.n	800a4ea <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fc:	2b40      	cmp	r3, #64	; 0x40
 800a4fe:	d004      	beq.n	800a50a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a506:	2b00      	cmp	r3, #0
 800a508:	d031      	beq.n	800a56e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fce5 	bl	800aeda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51a:	2b40      	cmp	r3, #64	; 0x40
 800a51c:	d123      	bne.n	800a566 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a52c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a532:	2b00      	cmp	r3, #0
 800a534:	d013      	beq.n	800a55e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a53a:	4a4a      	ldr	r2, [pc, #296]	; (800a664 <HAL_UART_IRQHandler+0x308>)
 800a53c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a542:	4618      	mov	r0, r3
 800a544:	f7fa fdd4 	bl	80050f0 <HAL_DMA_Abort_IT>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d017      	beq.n	800a57e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a558:	4610      	mov	r0, r2
 800a55a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a55c:	e00f      	b.n	800a57e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f8f2 	bl	800a748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a564:	e00b      	b.n	800a57e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f8ee 	bl	800a748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a56c:	e007      	b.n	800a57e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f8ea 	bl	800a748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a57c:	e0d0      	b.n	800a720 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a57e:	bf00      	nop
    return;
 800a580:	e0ce      	b.n	800a720 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a586:	2b01      	cmp	r3, #1
 800a588:	f040 80a7 	bne.w	800a6da <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	f003 0310 	and.w	r3, r3, #16
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 80a1 	beq.w	800a6da <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	f003 0310 	and.w	r3, r3, #16
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 809b 	beq.w	800a6da <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2210      	movs	r2, #16
 800a5aa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b6:	2b40      	cmp	r3, #64	; 0x40
 800a5b8:	d156      	bne.n	800a668 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a5c4:	893b      	ldrh	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 80ac 	beq.w	800a724 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a5d2:	893a      	ldrh	r2, [r7, #8]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	f080 80a5 	bcs.w	800a724 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	893a      	ldrh	r2, [r7, #8]
 800a5de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ec:	d02a      	beq.n	800a644 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 0201 	bic.w	r2, r2, #1
 800a60c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689a      	ldr	r2, [r3, #8]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a61c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0210 	bic.w	r2, r2, #16
 800a638:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fa fce6 	bl	8005010 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a650:	b29b      	uxth	r3, r3
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	b29b      	uxth	r3, r3
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f87f 	bl	800a75c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a65e:	e061      	b.n	800a724 <HAL_UART_IRQHandler+0x3c8>
 800a660:	04000120 	.word	0x04000120
 800a664:	0800af39 	.word	0x0800af39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a674:	b29b      	uxth	r3, r3
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a680:	b29b      	uxth	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d050      	beq.n	800a728 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800a686:	897b      	ldrh	r3, [r7, #10]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d04d      	beq.n	800a728 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a69a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 0201 	bic.w	r2, r2, #1
 800a6aa:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0210 	bic.w	r2, r2, #16
 800a6cc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6ce:	897b      	ldrh	r3, [r7, #10]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f842 	bl	800a75c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6d8:	e026      	b.n	800a728 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00d      	beq.n	800a700 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d008      	beq.n	800a700 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d01a      	beq.n	800a72c <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	4798      	blx	r3
    }
    return;
 800a6fe:	e015      	b.n	800a72c <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a706:	2b00      	cmp	r3, #0
 800a708:	d011      	beq.n	800a72e <HAL_UART_IRQHandler+0x3d2>
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00c      	beq.n	800a72e <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fc25 	bl	800af64 <UART_EndTransmit_IT>
    return;
 800a71a:	e008      	b.n	800a72e <HAL_UART_IRQHandler+0x3d2>
      return;
 800a71c:	bf00      	nop
 800a71e:	e006      	b.n	800a72e <HAL_UART_IRQHandler+0x3d2>
    return;
 800a720:	bf00      	nop
 800a722:	e004      	b.n	800a72e <HAL_UART_IRQHandler+0x3d2>
      return;
 800a724:	bf00      	nop
 800a726:	e002      	b.n	800a72e <HAL_UART_IRQHandler+0x3d2>
      return;
 800a728:	bf00      	nop
 800a72a:	e000      	b.n	800a72e <HAL_UART_IRQHandler+0x3d2>
    return;
 800a72c:	bf00      	nop
  }

}
 800a72e:	3720      	adds	r7, #32
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	689a      	ldr	r2, [r3, #8]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	431a      	orrs	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	431a      	orrs	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	4313      	orrs	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4ba7      	ldr	r3, [pc, #668]	; (800aa3c <UART_SetConfig+0x2c8>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	6979      	ldr	r1, [r7, #20]
 800a7a8:	430b      	orrs	r3, r1
 800a7aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68da      	ldr	r2, [r3, #12]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	699b      	ldr	r3, [r3, #24]
 800a7c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a95      	ldr	r2, [pc, #596]	; (800aa40 <UART_SetConfig+0x2cc>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d120      	bne.n	800a832 <UART_SetConfig+0xbe>
 800a7f0:	4b94      	ldr	r3, [pc, #592]	; (800aa44 <UART_SetConfig+0x2d0>)
 800a7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f6:	f003 0303 	and.w	r3, r3, #3
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d816      	bhi.n	800a82c <UART_SetConfig+0xb8>
 800a7fe:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <UART_SetConfig+0x90>)
 800a800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a804:	0800a815 	.word	0x0800a815
 800a808:	0800a821 	.word	0x0800a821
 800a80c:	0800a81b 	.word	0x0800a81b
 800a810:	0800a827 	.word	0x0800a827
 800a814:	2301      	movs	r3, #1
 800a816:	77fb      	strb	r3, [r7, #31]
 800a818:	e14f      	b.n	800aaba <UART_SetConfig+0x346>
 800a81a:	2302      	movs	r3, #2
 800a81c:	77fb      	strb	r3, [r7, #31]
 800a81e:	e14c      	b.n	800aaba <UART_SetConfig+0x346>
 800a820:	2304      	movs	r3, #4
 800a822:	77fb      	strb	r3, [r7, #31]
 800a824:	e149      	b.n	800aaba <UART_SetConfig+0x346>
 800a826:	2308      	movs	r3, #8
 800a828:	77fb      	strb	r3, [r7, #31]
 800a82a:	e146      	b.n	800aaba <UART_SetConfig+0x346>
 800a82c:	2310      	movs	r3, #16
 800a82e:	77fb      	strb	r3, [r7, #31]
 800a830:	e143      	b.n	800aaba <UART_SetConfig+0x346>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a84      	ldr	r2, [pc, #528]	; (800aa48 <UART_SetConfig+0x2d4>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d132      	bne.n	800a8a2 <UART_SetConfig+0x12e>
 800a83c:	4b81      	ldr	r3, [pc, #516]	; (800aa44 <UART_SetConfig+0x2d0>)
 800a83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a842:	f003 030c 	and.w	r3, r3, #12
 800a846:	2b0c      	cmp	r3, #12
 800a848:	d828      	bhi.n	800a89c <UART_SetConfig+0x128>
 800a84a:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <UART_SetConfig+0xdc>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a885 	.word	0x0800a885
 800a854:	0800a89d 	.word	0x0800a89d
 800a858:	0800a89d 	.word	0x0800a89d
 800a85c:	0800a89d 	.word	0x0800a89d
 800a860:	0800a891 	.word	0x0800a891
 800a864:	0800a89d 	.word	0x0800a89d
 800a868:	0800a89d 	.word	0x0800a89d
 800a86c:	0800a89d 	.word	0x0800a89d
 800a870:	0800a88b 	.word	0x0800a88b
 800a874:	0800a89d 	.word	0x0800a89d
 800a878:	0800a89d 	.word	0x0800a89d
 800a87c:	0800a89d 	.word	0x0800a89d
 800a880:	0800a897 	.word	0x0800a897
 800a884:	2300      	movs	r3, #0
 800a886:	77fb      	strb	r3, [r7, #31]
 800a888:	e117      	b.n	800aaba <UART_SetConfig+0x346>
 800a88a:	2302      	movs	r3, #2
 800a88c:	77fb      	strb	r3, [r7, #31]
 800a88e:	e114      	b.n	800aaba <UART_SetConfig+0x346>
 800a890:	2304      	movs	r3, #4
 800a892:	77fb      	strb	r3, [r7, #31]
 800a894:	e111      	b.n	800aaba <UART_SetConfig+0x346>
 800a896:	2308      	movs	r3, #8
 800a898:	77fb      	strb	r3, [r7, #31]
 800a89a:	e10e      	b.n	800aaba <UART_SetConfig+0x346>
 800a89c:	2310      	movs	r3, #16
 800a89e:	77fb      	strb	r3, [r7, #31]
 800a8a0:	e10b      	b.n	800aaba <UART_SetConfig+0x346>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a69      	ldr	r2, [pc, #420]	; (800aa4c <UART_SetConfig+0x2d8>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d120      	bne.n	800a8ee <UART_SetConfig+0x17a>
 800a8ac:	4b65      	ldr	r3, [pc, #404]	; (800aa44 <UART_SetConfig+0x2d0>)
 800a8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a8b6:	2b30      	cmp	r3, #48	; 0x30
 800a8b8:	d013      	beq.n	800a8e2 <UART_SetConfig+0x16e>
 800a8ba:	2b30      	cmp	r3, #48	; 0x30
 800a8bc:	d814      	bhi.n	800a8e8 <UART_SetConfig+0x174>
 800a8be:	2b20      	cmp	r3, #32
 800a8c0:	d009      	beq.n	800a8d6 <UART_SetConfig+0x162>
 800a8c2:	2b20      	cmp	r3, #32
 800a8c4:	d810      	bhi.n	800a8e8 <UART_SetConfig+0x174>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d002      	beq.n	800a8d0 <UART_SetConfig+0x15c>
 800a8ca:	2b10      	cmp	r3, #16
 800a8cc:	d006      	beq.n	800a8dc <UART_SetConfig+0x168>
 800a8ce:	e00b      	b.n	800a8e8 <UART_SetConfig+0x174>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	77fb      	strb	r3, [r7, #31]
 800a8d4:	e0f1      	b.n	800aaba <UART_SetConfig+0x346>
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	77fb      	strb	r3, [r7, #31]
 800a8da:	e0ee      	b.n	800aaba <UART_SetConfig+0x346>
 800a8dc:	2304      	movs	r3, #4
 800a8de:	77fb      	strb	r3, [r7, #31]
 800a8e0:	e0eb      	b.n	800aaba <UART_SetConfig+0x346>
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	77fb      	strb	r3, [r7, #31]
 800a8e6:	e0e8      	b.n	800aaba <UART_SetConfig+0x346>
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	77fb      	strb	r3, [r7, #31]
 800a8ec:	e0e5      	b.n	800aaba <UART_SetConfig+0x346>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a57      	ldr	r2, [pc, #348]	; (800aa50 <UART_SetConfig+0x2dc>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d120      	bne.n	800a93a <UART_SetConfig+0x1c6>
 800a8f8:	4b52      	ldr	r3, [pc, #328]	; (800aa44 <UART_SetConfig+0x2d0>)
 800a8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a902:	2bc0      	cmp	r3, #192	; 0xc0
 800a904:	d013      	beq.n	800a92e <UART_SetConfig+0x1ba>
 800a906:	2bc0      	cmp	r3, #192	; 0xc0
 800a908:	d814      	bhi.n	800a934 <UART_SetConfig+0x1c0>
 800a90a:	2b80      	cmp	r3, #128	; 0x80
 800a90c:	d009      	beq.n	800a922 <UART_SetConfig+0x1ae>
 800a90e:	2b80      	cmp	r3, #128	; 0x80
 800a910:	d810      	bhi.n	800a934 <UART_SetConfig+0x1c0>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <UART_SetConfig+0x1a8>
 800a916:	2b40      	cmp	r3, #64	; 0x40
 800a918:	d006      	beq.n	800a928 <UART_SetConfig+0x1b4>
 800a91a:	e00b      	b.n	800a934 <UART_SetConfig+0x1c0>
 800a91c:	2300      	movs	r3, #0
 800a91e:	77fb      	strb	r3, [r7, #31]
 800a920:	e0cb      	b.n	800aaba <UART_SetConfig+0x346>
 800a922:	2302      	movs	r3, #2
 800a924:	77fb      	strb	r3, [r7, #31]
 800a926:	e0c8      	b.n	800aaba <UART_SetConfig+0x346>
 800a928:	2304      	movs	r3, #4
 800a92a:	77fb      	strb	r3, [r7, #31]
 800a92c:	e0c5      	b.n	800aaba <UART_SetConfig+0x346>
 800a92e:	2308      	movs	r3, #8
 800a930:	77fb      	strb	r3, [r7, #31]
 800a932:	e0c2      	b.n	800aaba <UART_SetConfig+0x346>
 800a934:	2310      	movs	r3, #16
 800a936:	77fb      	strb	r3, [r7, #31]
 800a938:	e0bf      	b.n	800aaba <UART_SetConfig+0x346>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a45      	ldr	r2, [pc, #276]	; (800aa54 <UART_SetConfig+0x2e0>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d125      	bne.n	800a990 <UART_SetConfig+0x21c>
 800a944:	4b3f      	ldr	r3, [pc, #252]	; (800aa44 <UART_SetConfig+0x2d0>)
 800a946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a94e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a952:	d017      	beq.n	800a984 <UART_SetConfig+0x210>
 800a954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a958:	d817      	bhi.n	800a98a <UART_SetConfig+0x216>
 800a95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a95e:	d00b      	beq.n	800a978 <UART_SetConfig+0x204>
 800a960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a964:	d811      	bhi.n	800a98a <UART_SetConfig+0x216>
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <UART_SetConfig+0x1fe>
 800a96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a96e:	d006      	beq.n	800a97e <UART_SetConfig+0x20a>
 800a970:	e00b      	b.n	800a98a <UART_SetConfig+0x216>
 800a972:	2300      	movs	r3, #0
 800a974:	77fb      	strb	r3, [r7, #31]
 800a976:	e0a0      	b.n	800aaba <UART_SetConfig+0x346>
 800a978:	2302      	movs	r3, #2
 800a97a:	77fb      	strb	r3, [r7, #31]
 800a97c:	e09d      	b.n	800aaba <UART_SetConfig+0x346>
 800a97e:	2304      	movs	r3, #4
 800a980:	77fb      	strb	r3, [r7, #31]
 800a982:	e09a      	b.n	800aaba <UART_SetConfig+0x346>
 800a984:	2308      	movs	r3, #8
 800a986:	77fb      	strb	r3, [r7, #31]
 800a988:	e097      	b.n	800aaba <UART_SetConfig+0x346>
 800a98a:	2310      	movs	r3, #16
 800a98c:	77fb      	strb	r3, [r7, #31]
 800a98e:	e094      	b.n	800aaba <UART_SetConfig+0x346>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a30      	ldr	r2, [pc, #192]	; (800aa58 <UART_SetConfig+0x2e4>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d125      	bne.n	800a9e6 <UART_SetConfig+0x272>
 800a99a:	4b2a      	ldr	r3, [pc, #168]	; (800aa44 <UART_SetConfig+0x2d0>)
 800a99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a9a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9a8:	d017      	beq.n	800a9da <UART_SetConfig+0x266>
 800a9aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9ae:	d817      	bhi.n	800a9e0 <UART_SetConfig+0x26c>
 800a9b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9b4:	d00b      	beq.n	800a9ce <UART_SetConfig+0x25a>
 800a9b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ba:	d811      	bhi.n	800a9e0 <UART_SetConfig+0x26c>
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <UART_SetConfig+0x254>
 800a9c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9c4:	d006      	beq.n	800a9d4 <UART_SetConfig+0x260>
 800a9c6:	e00b      	b.n	800a9e0 <UART_SetConfig+0x26c>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	77fb      	strb	r3, [r7, #31]
 800a9cc:	e075      	b.n	800aaba <UART_SetConfig+0x346>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	77fb      	strb	r3, [r7, #31]
 800a9d2:	e072      	b.n	800aaba <UART_SetConfig+0x346>
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	77fb      	strb	r3, [r7, #31]
 800a9d8:	e06f      	b.n	800aaba <UART_SetConfig+0x346>
 800a9da:	2308      	movs	r3, #8
 800a9dc:	77fb      	strb	r3, [r7, #31]
 800a9de:	e06c      	b.n	800aaba <UART_SetConfig+0x346>
 800a9e0:	2310      	movs	r3, #16
 800a9e2:	77fb      	strb	r3, [r7, #31]
 800a9e4:	e069      	b.n	800aaba <UART_SetConfig+0x346>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a1c      	ldr	r2, [pc, #112]	; (800aa5c <UART_SetConfig+0x2e8>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d137      	bne.n	800aa60 <UART_SetConfig+0x2ec>
 800a9f0:	4b14      	ldr	r3, [pc, #80]	; (800aa44 <UART_SetConfig+0x2d0>)
 800a9f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a9fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9fe:	d017      	beq.n	800aa30 <UART_SetConfig+0x2bc>
 800aa00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa04:	d817      	bhi.n	800aa36 <UART_SetConfig+0x2c2>
 800aa06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa0a:	d00b      	beq.n	800aa24 <UART_SetConfig+0x2b0>
 800aa0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa10:	d811      	bhi.n	800aa36 <UART_SetConfig+0x2c2>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <UART_SetConfig+0x2aa>
 800aa16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1a:	d006      	beq.n	800aa2a <UART_SetConfig+0x2b6>
 800aa1c:	e00b      	b.n	800aa36 <UART_SetConfig+0x2c2>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	77fb      	strb	r3, [r7, #31]
 800aa22:	e04a      	b.n	800aaba <UART_SetConfig+0x346>
 800aa24:	2302      	movs	r3, #2
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e047      	b.n	800aaba <UART_SetConfig+0x346>
 800aa2a:	2304      	movs	r3, #4
 800aa2c:	77fb      	strb	r3, [r7, #31]
 800aa2e:	e044      	b.n	800aaba <UART_SetConfig+0x346>
 800aa30:	2308      	movs	r3, #8
 800aa32:	77fb      	strb	r3, [r7, #31]
 800aa34:	e041      	b.n	800aaba <UART_SetConfig+0x346>
 800aa36:	2310      	movs	r3, #16
 800aa38:	77fb      	strb	r3, [r7, #31]
 800aa3a:	e03e      	b.n	800aaba <UART_SetConfig+0x346>
 800aa3c:	efff69f3 	.word	0xefff69f3
 800aa40:	40011000 	.word	0x40011000
 800aa44:	40023800 	.word	0x40023800
 800aa48:	40004400 	.word	0x40004400
 800aa4c:	40004800 	.word	0x40004800
 800aa50:	40004c00 	.word	0x40004c00
 800aa54:	40005000 	.word	0x40005000
 800aa58:	40011400 	.word	0x40011400
 800aa5c:	40007800 	.word	0x40007800
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a71      	ldr	r2, [pc, #452]	; (800ac2c <UART_SetConfig+0x4b8>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d125      	bne.n	800aab6 <UART_SetConfig+0x342>
 800aa6a:	4b71      	ldr	r3, [pc, #452]	; (800ac30 <UART_SetConfig+0x4bc>)
 800aa6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aa74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa78:	d017      	beq.n	800aaaa <UART_SetConfig+0x336>
 800aa7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aa7e:	d817      	bhi.n	800aab0 <UART_SetConfig+0x33c>
 800aa80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa84:	d00b      	beq.n	800aa9e <UART_SetConfig+0x32a>
 800aa86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa8a:	d811      	bhi.n	800aab0 <UART_SetConfig+0x33c>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <UART_SetConfig+0x324>
 800aa90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa94:	d006      	beq.n	800aaa4 <UART_SetConfig+0x330>
 800aa96:	e00b      	b.n	800aab0 <UART_SetConfig+0x33c>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	77fb      	strb	r3, [r7, #31]
 800aa9c:	e00d      	b.n	800aaba <UART_SetConfig+0x346>
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	77fb      	strb	r3, [r7, #31]
 800aaa2:	e00a      	b.n	800aaba <UART_SetConfig+0x346>
 800aaa4:	2304      	movs	r3, #4
 800aaa6:	77fb      	strb	r3, [r7, #31]
 800aaa8:	e007      	b.n	800aaba <UART_SetConfig+0x346>
 800aaaa:	2308      	movs	r3, #8
 800aaac:	77fb      	strb	r3, [r7, #31]
 800aaae:	e004      	b.n	800aaba <UART_SetConfig+0x346>
 800aab0:	2310      	movs	r3, #16
 800aab2:	77fb      	strb	r3, [r7, #31]
 800aab4:	e001      	b.n	800aaba <UART_SetConfig+0x346>
 800aab6:	2310      	movs	r3, #16
 800aab8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aac2:	d15b      	bne.n	800ab7c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800aac4:	7ffb      	ldrb	r3, [r7, #31]
 800aac6:	2b08      	cmp	r3, #8
 800aac8:	d827      	bhi.n	800ab1a <UART_SetConfig+0x3a6>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <UART_SetConfig+0x35c>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800aaf5 	.word	0x0800aaf5
 800aad4:	0800aafd 	.word	0x0800aafd
 800aad8:	0800ab05 	.word	0x0800ab05
 800aadc:	0800ab1b 	.word	0x0800ab1b
 800aae0:	0800ab0b 	.word	0x0800ab0b
 800aae4:	0800ab1b 	.word	0x0800ab1b
 800aae8:	0800ab1b 	.word	0x0800ab1b
 800aaec:	0800ab1b 	.word	0x0800ab1b
 800aaf0:	0800ab13 	.word	0x0800ab13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf4:	f7fc ff72 	bl	80079dc <HAL_RCC_GetPCLK1Freq>
 800aaf8:	61b8      	str	r0, [r7, #24]
        break;
 800aafa:	e013      	b.n	800ab24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aafc:	f7fc ff82 	bl	8007a04 <HAL_RCC_GetPCLK2Freq>
 800ab00:	61b8      	str	r0, [r7, #24]
        break;
 800ab02:	e00f      	b.n	800ab24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab04:	4b4b      	ldr	r3, [pc, #300]	; (800ac34 <UART_SetConfig+0x4c0>)
 800ab06:	61bb      	str	r3, [r7, #24]
        break;
 800ab08:	e00c      	b.n	800ab24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab0a:	f7fc fea5 	bl	8007858 <HAL_RCC_GetSysClockFreq>
 800ab0e:	61b8      	str	r0, [r7, #24]
        break;
 800ab10:	e008      	b.n	800ab24 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab16:	61bb      	str	r3, [r7, #24]
        break;
 800ab18:	e004      	b.n	800ab24 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	77bb      	strb	r3, [r7, #30]
        break;
 800ab22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d074      	beq.n	800ac14 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	005a      	lsls	r2, r3, #1
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	085b      	lsrs	r3, r3, #1
 800ab34:	441a      	add	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	2b0f      	cmp	r3, #15
 800ab46:	d916      	bls.n	800ab76 <UART_SetConfig+0x402>
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab4e:	d212      	bcs.n	800ab76 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	f023 030f 	bic.w	r3, r3, #15
 800ab58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	085b      	lsrs	r3, r3, #1
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	f003 0307 	and.w	r3, r3, #7
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	89fb      	ldrh	r3, [r7, #14]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	89fa      	ldrh	r2, [r7, #14]
 800ab72:	60da      	str	r2, [r3, #12]
 800ab74:	e04e      	b.n	800ac14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	77bb      	strb	r3, [r7, #30]
 800ab7a:	e04b      	b.n	800ac14 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab7c:	7ffb      	ldrb	r3, [r7, #31]
 800ab7e:	2b08      	cmp	r3, #8
 800ab80:	d827      	bhi.n	800abd2 <UART_SetConfig+0x45e>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <UART_SetConfig+0x414>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800abad 	.word	0x0800abad
 800ab8c:	0800abb5 	.word	0x0800abb5
 800ab90:	0800abbd 	.word	0x0800abbd
 800ab94:	0800abd3 	.word	0x0800abd3
 800ab98:	0800abc3 	.word	0x0800abc3
 800ab9c:	0800abd3 	.word	0x0800abd3
 800aba0:	0800abd3 	.word	0x0800abd3
 800aba4:	0800abd3 	.word	0x0800abd3
 800aba8:	0800abcb 	.word	0x0800abcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abac:	f7fc ff16 	bl	80079dc <HAL_RCC_GetPCLK1Freq>
 800abb0:	61b8      	str	r0, [r7, #24]
        break;
 800abb2:	e013      	b.n	800abdc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abb4:	f7fc ff26 	bl	8007a04 <HAL_RCC_GetPCLK2Freq>
 800abb8:	61b8      	str	r0, [r7, #24]
        break;
 800abba:	e00f      	b.n	800abdc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abbc:	4b1d      	ldr	r3, [pc, #116]	; (800ac34 <UART_SetConfig+0x4c0>)
 800abbe:	61bb      	str	r3, [r7, #24]
        break;
 800abc0:	e00c      	b.n	800abdc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abc2:	f7fc fe49 	bl	8007858 <HAL_RCC_GetSysClockFreq>
 800abc6:	61b8      	str	r0, [r7, #24]
        break;
 800abc8:	e008      	b.n	800abdc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abce:	61bb      	str	r3, [r7, #24]
        break;
 800abd0:	e004      	b.n	800abdc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	77bb      	strb	r3, [r7, #30]
        break;
 800abda:	bf00      	nop
    }

    if (pclk != 0U)
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d018      	beq.n	800ac14 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	085a      	lsrs	r2, r3, #1
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	441a      	add	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2b0f      	cmp	r3, #15
 800abfc:	d908      	bls.n	800ac10 <UART_SetConfig+0x49c>
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac04:	d204      	bcs.n	800ac10 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	60da      	str	r2, [r3, #12]
 800ac0e:	e001      	b.n	800ac14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ac20:	7fbb      	ldrb	r3, [r7, #30]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	40007c00 	.word	0x40007c00
 800ac30:	40023800 	.word	0x40023800
 800ac34:	00f42400 	.word	0x00f42400

0800ac38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00a      	beq.n	800ac62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00a      	beq.n	800ac84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	430a      	orrs	r2, r1
 800ac82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00a      	beq.n	800aca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acaa:	f003 0308 	and.w	r3, r3, #8
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	f003 0310 	and.w	r3, r3, #16
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00a      	beq.n	800acea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	430a      	orrs	r2, r1
 800ace8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acee:	f003 0320 	and.w	r3, r3, #32
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00a      	beq.n	800ad0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	430a      	orrs	r2, r1
 800ad0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01a      	beq.n	800ad4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad36:	d10a      	bne.n	800ad4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	605a      	str	r2, [r3, #4]
  }
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af02      	add	r7, sp, #8
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad8c:	f7f9 fb5a 	bl	8004444 <HAL_GetTick>
 800ad90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0308 	and.w	r3, r3, #8
 800ad9c:	2b08      	cmp	r3, #8
 800ad9e:	d10e      	bne.n	800adbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ada0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f817 	bl	800ade2 <UART_WaitOnFlagUntilTimeout>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e00d      	b.n	800adda <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2220      	movs	r2, #32
 800adc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b084      	sub	sp, #16
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	4613      	mov	r3, r2
 800adf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adf2:	e05e      	b.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfa:	d05a      	beq.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adfc:	f7f9 fb22 	bl	8004444 <HAL_GetTick>
 800ae00:	4602      	mov	r2, r0
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	69ba      	ldr	r2, [r7, #24]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d302      	bcc.n	800ae12 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d11b      	bne.n	800ae4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	689a      	ldr	r2, [r3, #8]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f022 0201 	bic.w	r2, r2, #1
 800ae30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2220      	movs	r2, #32
 800ae36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e043      	b.n	800aed2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d02c      	beq.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae66:	d124      	bne.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 0201 	bic.w	r2, r2, #1
 800ae90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2220      	movs	r2, #32
 800ae96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2220      	movs	r2, #32
 800aea2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e00f      	b.n	800aed2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	69da      	ldr	r2, [r3, #28]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	4013      	ands	r3, r2
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	bf0c      	ite	eq
 800aec2:	2301      	moveq	r3, #1
 800aec4:	2300      	movne	r3, #0
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	461a      	mov	r2, r3
 800aeca:	79fb      	ldrb	r3, [r7, #7]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d091      	beq.n	800adf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b083      	sub	sp, #12
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aef0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f022 0201 	bic.w	r2, r2, #1
 800af00:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af06:	2b01      	cmp	r3, #1
 800af08:	d107      	bne.n	800af1a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f022 0210 	bic.w	r2, r2, #16
 800af18:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7ff fbf6 	bl	800a748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af7a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2220      	movs	r2, #32
 800af80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff fbd3 	bl	800a734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af8e:	bf00      	nop
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d027      	beq.n	800b002 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	4b2f      	ldr	r3, [pc, #188]	; (800b078 <FMC_SDRAM_Init+0xe0>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800afc8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800afce:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800afd4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800afda:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800afe0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800afe6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800afec:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800aff2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	e032      	b.n	800b068 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b00e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b018:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b01e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	4313      	orrs	r3, r2
 800b024:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	4b12      	ldr	r3, [pc, #72]	; (800b078 <FMC_SDRAM_Init+0xe0>)
 800b030:	4013      	ands	r3, r2
 800b032:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b03c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b042:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b048:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b04e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b054:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	ffff8000 	.word	0xffff8000

0800b07c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b087      	sub	sp, #28
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d02e      	beq.n	800b0f4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b0a2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b0bc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b0c6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b0d0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b0da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	609a      	str	r2, [r3, #8]
 800b0f2:	e039      	b.n	800b168 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	4b1e      	ldr	r3, [pc, #120]	; (800b178 <FMC_SDRAM_Timing_Init+0xfc>)
 800b0fe:	4013      	ands	r3, r2
 800b100:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	3b01      	subs	r3, #1
 800b108:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	3b01      	subs	r3, #1
 800b110:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b112:	4313      	orrs	r3, r2
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	4313      	orrs	r3, r2
 800b118:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b126:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	3b01      	subs	r3, #1
 800b134:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b136:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b140:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	3b01      	subs	r3, #1
 800b148:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b14a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	3b01      	subs	r3, #1
 800b152:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b154:	4313      	orrs	r3, r2
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	4313      	orrs	r3, r2
 800b15a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	ff0f0fff 	.word	0xff0f0fff

0800b17c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	691a      	ldr	r2, [r3, #16]
 800b18c:	4b0c      	ldr	r3, [pc, #48]	; (800b1c0 <FMC_SDRAM_SendCommand+0x44>)
 800b18e:	4013      	ands	r3, r2
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	6811      	ldr	r1, [r2, #0]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	6852      	ldr	r2, [r2, #4]
 800b198:	4311      	orrs	r1, r2
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	6892      	ldr	r2, [r2, #8]
 800b19e:	3a01      	subs	r2, #1
 800b1a0:	0152      	lsls	r2, r2, #5
 800b1a2:	4311      	orrs	r1, r2
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	68d2      	ldr	r2, [r2, #12]
 800b1a8:	0252      	lsls	r2, r2, #9
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	ffc00000 	.word	0xffc00000

0800b1c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	695a      	ldr	r2, [r3, #20]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b085      	sub	sp, #20
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b1f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1fc:	2b84      	cmp	r3, #132	; 0x84
 800b1fe:	d005      	beq.n	800b20c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b200:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	3303      	adds	r3, #3
 800b20a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b20c:	68fb      	ldr	r3, [r7, #12]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b21a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b21c:	b089      	sub	sp, #36	; 0x24
 800b21e:	af04      	add	r7, sp, #16
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d020      	beq.n	800b26e <osThreadCreate+0x54>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d01c      	beq.n	800b26e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685c      	ldr	r4, [r3, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681d      	ldr	r5, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	691e      	ldr	r6, [r3, #16]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff ffcf 	bl	800b1ea <makeFreeRtosPriority>
 800b24c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b256:	9202      	str	r2, [sp, #8]
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	9100      	str	r1, [sp, #0]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	4632      	mov	r2, r6
 800b260:	4629      	mov	r1, r5
 800b262:	4620      	mov	r0, r4
 800b264:	f000 fca2 	bl	800bbac <xTaskCreateStatic>
 800b268:	4603      	mov	r3, r0
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	e01c      	b.n	800b2a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685c      	ldr	r4, [r3, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b27a:	b29e      	uxth	r6, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff ffb1 	bl	800b1ea <makeFreeRtosPriority>
 800b288:	4602      	mov	r2, r0
 800b28a:	f107 030c 	add.w	r3, r7, #12
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	9200      	str	r2, [sp, #0]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	4632      	mov	r2, r6
 800b296:	4629      	mov	r1, r5
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 fcea 	bl	800bc72 <xTaskCreate>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d001      	beq.n	800b2a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e000      	b.n	800b2aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d001      	beq.n	800b2c8 <osDelay+0x16>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	e000      	b.n	800b2ca <osDelay+0x18>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f000 fe0a 	bl	800bee4 <vTaskDelay>
  
  return osOK;
 800b2d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b082      	sub	sp, #8
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d007      	beq.n	800b2fa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	f000 fa66 	bl	800b7c2 <xQueueCreateMutexStatic>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	e003      	b.n	800b302 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b2fa:	2001      	movs	r0, #1
 800b2fc:	f000 fa49 	bl	800b792 <xQueueCreateMutex>
 800b300:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b30a:	b590      	push	{r4, r7, lr}
 800b30c:	b085      	sub	sp, #20
 800b30e:	af02      	add	r7, sp, #8
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d011      	beq.n	800b340 <osMessageCreate+0x36>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00d      	beq.n	800b340 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6818      	ldr	r0, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6859      	ldr	r1, [r3, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689a      	ldr	r2, [r3, #8]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	2400      	movs	r4, #0
 800b336:	9400      	str	r4, [sp, #0]
 800b338:	f000 f92e 	bl	800b598 <xQueueGenericCreateStatic>
 800b33c:	4603      	mov	r3, r0
 800b33e:	e008      	b.n	800b352 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	4619      	mov	r1, r3
 800b34c:	f000 f9a6 	bl	800b69c <xQueueGenericCreate>
 800b350:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b352:	4618      	mov	r0, r3
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	bd90      	pop	{r4, r7, pc}

0800b35a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f103 0208 	add.w	r2, r3, #8
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295
 800b372:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f103 0208 	add.w	r2, r3, #8
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f103 0208 	add.w	r2, r3, #8
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b38e:	bf00      	nop
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b39a:	b480      	push	{r7}
 800b39c:	b083      	sub	sp, #12
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	689a      	ldr	r2, [r3, #8]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	601a      	str	r2, [r3, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b412:	d103      	bne.n	800b41c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	e00c      	b.n	800b436 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3308      	adds	r3, #8
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	e002      	b.n	800b42a <vListInsert+0x2e>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	60fb      	str	r3, [r7, #12]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	429a      	cmp	r2, r3
 800b434:	d2f6      	bcs.n	800b424 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	685a      	ldr	r2, [r3, #4]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	601a      	str	r2, [r3, #0]
}
 800b462:	bf00      	nop
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b46e:	b480      	push	{r7}
 800b470:	b085      	sub	sp, #20
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6892      	ldr	r2, [r2, #8]
 800b484:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6852      	ldr	r2, [r2, #4]
 800b48e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	429a      	cmp	r2, r3
 800b498:	d103      	bne.n	800b4a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	689a      	ldr	r2, [r3, #8]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	1e5a      	subs	r2, r3, #1
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10c      	bne.n	800b4f2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	b672      	cpsid	i
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	b662      	cpsie	i
 800b4ec:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b4f2:	f001 f9e9 	bl	800c8c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4fe:	68f9      	ldr	r1, [r7, #12]
 800b500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b502:	fb01 f303 	mul.w	r3, r1, r3
 800b506:	441a      	add	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b522:	3b01      	subs	r3, #1
 800b524:	68f9      	ldr	r1, [r7, #12]
 800b526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b528:	fb01 f303 	mul.w	r3, r1, r3
 800b52c:	441a      	add	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	22ff      	movs	r2, #255	; 0xff
 800b536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	22ff      	movs	r2, #255	; 0xff
 800b53e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d114      	bne.n	800b572 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d01a      	beq.n	800b586 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3310      	adds	r3, #16
 800b554:	4618      	mov	r0, r3
 800b556:	f000 fee5 	bl	800c324 <xTaskRemoveFromEventList>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d012      	beq.n	800b586 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b560:	4b0c      	ldr	r3, [pc, #48]	; (800b594 <xQueueGenericReset+0xd0>)
 800b562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	e009      	b.n	800b586 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3310      	adds	r3, #16
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff feef 	bl	800b35a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	3324      	adds	r3, #36	; 0x24
 800b580:	4618      	mov	r0, r3
 800b582:	f7ff feea 	bl	800b35a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b586:	f001 f9d3 	bl	800c930 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b58a:	2301      	movs	r3, #1
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	e000ed04 	.word	0xe000ed04

0800b598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08e      	sub	sp, #56	; 0x38
 800b59c:	af02      	add	r7, sp, #8
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10c      	bne.n	800b5c6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	b672      	cpsid	i
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	b662      	cpsie	i
 800b5c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10c      	bne.n	800b5e6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	b672      	cpsid	i
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	b662      	cpsie	i
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <xQueueGenericCreateStatic+0x5a>
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <xQueueGenericCreateStatic+0x5e>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e000      	b.n	800b5f8 <xQueueGenericCreateStatic+0x60>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10c      	bne.n	800b616 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	b672      	cpsid	i
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	b662      	cpsie	i
 800b610:	623b      	str	r3, [r7, #32]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <xQueueGenericCreateStatic+0x8a>
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <xQueueGenericCreateStatic+0x8e>
 800b622:	2301      	movs	r3, #1
 800b624:	e000      	b.n	800b628 <xQueueGenericCreateStatic+0x90>
 800b626:	2300      	movs	r3, #0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10c      	bne.n	800b646 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	b672      	cpsid	i
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	b662      	cpsie	i
 800b640:	61fb      	str	r3, [r7, #28]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b646:	2348      	movs	r3, #72	; 0x48
 800b648:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b48      	cmp	r3, #72	; 0x48
 800b64e:	d00c      	beq.n	800b66a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	b672      	cpsid	i
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	b662      	cpsie	i
 800b664:	61bb      	str	r3, [r7, #24]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b66a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00d      	beq.n	800b692 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b67e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	4613      	mov	r3, r2
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	68b9      	ldr	r1, [r7, #8]
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f000 f847 	bl	800b720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b694:	4618      	mov	r0, r3
 800b696:	3730      	adds	r7, #48	; 0x30
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b08a      	sub	sp, #40	; 0x28
 800b6a0:	af02      	add	r7, sp, #8
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10c      	bne.n	800b6ca <xQueueGenericCreate+0x2e>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	b672      	cpsid	i
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	b662      	cpsie	i
 800b6c4:	613b      	str	r3, [r7, #16]
}
 800b6c6:	bf00      	nop
 800b6c8:	e7fe      	b.n	800b6c8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	61fb      	str	r3, [r7, #28]
 800b6d4:	e004      	b.n	800b6e0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	fb02 f303 	mul.w	r3, r2, r3
 800b6de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	3348      	adds	r3, #72	; 0x48
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f001 f9ab 	bl	800ca40 <pvPortMalloc>
 800b6ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d011      	beq.n	800b716 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	3348      	adds	r3, #72	; 0x48
 800b6fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b704:	79fa      	ldrb	r2, [r7, #7]
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	4613      	mov	r3, r2
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	68b9      	ldr	r1, [r7, #8]
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f000 f805 	bl	800b720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b716:	69bb      	ldr	r3, [r7, #24]
	}
 800b718:	4618      	mov	r0, r3
 800b71a:	3720      	adds	r7, #32
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
 800b72c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d103      	bne.n	800b73c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	69ba      	ldr	r2, [r7, #24]
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	e002      	b.n	800b742 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b74e:	2101      	movs	r1, #1
 800b750:	69b8      	ldr	r0, [r7, #24]
 800b752:	f7ff feb7 	bl	800b4c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b756:	bf00      	nop
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00e      	beq.n	800b78a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b77e:	2300      	movs	r3, #0
 800b780:	2200      	movs	r2, #0
 800b782:	2100      	movs	r1, #0
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f837 	bl	800b7f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b78a:	bf00      	nop
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b792:	b580      	push	{r7, lr}
 800b794:	b086      	sub	sp, #24
 800b796:	af00      	add	r7, sp, #0
 800b798:	4603      	mov	r3, r0
 800b79a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b79c:	2301      	movs	r3, #1
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	6939      	ldr	r1, [r7, #16]
 800b7aa:	6978      	ldr	r0, [r7, #20]
 800b7ac:	f7ff ff76 	bl	800b69c <xQueueGenericCreate>
 800b7b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff ffd3 	bl	800b75e <prvInitialiseMutex>

		return xNewQueue;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b088      	sub	sp, #32
 800b7c6:	af02      	add	r7, sp, #8
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	6039      	str	r1, [r7, #0]
 800b7cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	6939      	ldr	r1, [r7, #16]
 800b7e0:	6978      	ldr	r0, [r7, #20]
 800b7e2:	f7ff fed9 	bl	800b598 <xQueueGenericCreateStatic>
 800b7e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f7ff ffb8 	bl	800b75e <prvInitialiseMutex>

		return xNewQueue;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
	}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3718      	adds	r7, #24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08e      	sub	sp, #56	; 0x38
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b806:	2300      	movs	r3, #0
 800b808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10c      	bne.n	800b82e <xQueueGenericSend+0x36>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	b672      	cpsid	i
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	b662      	cpsie	i
 800b828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b82a:	bf00      	nop
 800b82c:	e7fe      	b.n	800b82c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d103      	bne.n	800b83c <xQueueGenericSend+0x44>
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <xQueueGenericSend+0x48>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e000      	b.n	800b842 <xQueueGenericSend+0x4a>
 800b840:	2300      	movs	r3, #0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10c      	bne.n	800b860 <xQueueGenericSend+0x68>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	b672      	cpsid	i
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	b662      	cpsie	i
 800b85a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	2b02      	cmp	r3, #2
 800b864:	d103      	bne.n	800b86e <xQueueGenericSend+0x76>
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d101      	bne.n	800b872 <xQueueGenericSend+0x7a>
 800b86e:	2301      	movs	r3, #1
 800b870:	e000      	b.n	800b874 <xQueueGenericSend+0x7c>
 800b872:	2300      	movs	r3, #0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10c      	bne.n	800b892 <xQueueGenericSend+0x9a>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	b672      	cpsid	i
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	b662      	cpsie	i
 800b88c:	623b      	str	r3, [r7, #32]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b892:	f000 fe93 	bl	800c5bc <xTaskGetSchedulerState>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d102      	bne.n	800b8a2 <xQueueGenericSend+0xaa>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <xQueueGenericSend+0xae>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e000      	b.n	800b8a8 <xQueueGenericSend+0xb0>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10c      	bne.n	800b8c6 <xQueueGenericSend+0xce>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	b672      	cpsid	i
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	b662      	cpsie	i
 800b8c0:	61fb      	str	r3, [r7, #28]
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8c6:	f000 ffff 	bl	800c8c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d302      	bcc.n	800b8dc <xQueueGenericSend+0xe4>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d129      	bne.n	800b930 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	68b9      	ldr	r1, [r7, #8]
 800b8e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8e2:	f000 f88f 	bl	800ba04 <prvCopyDataToQueue>
 800b8e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d010      	beq.n	800b912 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f2:	3324      	adds	r3, #36	; 0x24
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fd15 	bl	800c324 <xTaskRemoveFromEventList>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d013      	beq.n	800b928 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b900:	4b3f      	ldr	r3, [pc, #252]	; (800ba00 <xQueueGenericSend+0x208>)
 800b902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	e00a      	b.n	800b928 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b918:	4b39      	ldr	r3, [pc, #228]	; (800ba00 <xQueueGenericSend+0x208>)
 800b91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b928:	f001 f802 	bl	800c930 <vPortExitCritical>
				return pdPASS;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e063      	b.n	800b9f8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d103      	bne.n	800b93e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b936:	f000 fffb 	bl	800c930 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	e05c      	b.n	800b9f8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b940:	2b00      	cmp	r3, #0
 800b942:	d106      	bne.n	800b952 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b944:	f107 0314 	add.w	r3, r7, #20
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fd4f 	bl	800c3ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b94e:	2301      	movs	r3, #1
 800b950:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b952:	f000 ffed 	bl	800c930 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b956:	f000 fafb 	bl	800bf50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b95a:	f000 ffb5 	bl	800c8c8 <vPortEnterCritical>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b964:	b25b      	sxtb	r3, r3
 800b966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96a:	d103      	bne.n	800b974 <xQueueGenericSend+0x17c>
 800b96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b97a:	b25b      	sxtb	r3, r3
 800b97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b980:	d103      	bne.n	800b98a <xQueueGenericSend+0x192>
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b98a:	f000 ffd1 	bl	800c930 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b98e:	1d3a      	adds	r2, r7, #4
 800b990:	f107 0314 	add.w	r3, r7, #20
 800b994:	4611      	mov	r1, r2
 800b996:	4618      	mov	r0, r3
 800b998:	f000 fd3e 	bl	800c418 <xTaskCheckForTimeOut>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d124      	bne.n	800b9ec <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b9a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9a4:	f000 f8ea 	bl	800bb7c <prvIsQueueFull>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d018      	beq.n	800b9e0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	3310      	adds	r3, #16
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fc8e 	bl	800c2d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9be:	f000 f88b 	bl	800bad8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b9c2:	f000 fad3 	bl	800bf6c <xTaskResumeAll>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f47f af7c 	bne.w	800b8c6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <xQueueGenericSend+0x208>)
 800b9d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	e772      	b.n	800b8c6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9e2:	f000 f879 	bl	800bad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9e6:	f000 fac1 	bl	800bf6c <xTaskResumeAll>
 800b9ea:	e76c      	b.n	800b8c6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ee:	f000 f873 	bl	800bad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9f2:	f000 fabb 	bl	800bf6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3738      	adds	r7, #56	; 0x38
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	e000ed04 	.word	0xe000ed04

0800ba04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba10:	2300      	movs	r3, #0
 800ba12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10d      	bne.n	800ba3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d14d      	bne.n	800bac6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 fde2 	bl	800c5f8 <xTaskPriorityDisinherit>
 800ba34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	609a      	str	r2, [r3, #8]
 800ba3c:	e043      	b.n	800bac6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d119      	bne.n	800ba78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6858      	ldr	r0, [r3, #4]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	f001 f9fe 	bl	800ce50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5c:	441a      	add	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d32b      	bcc.n	800bac6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	605a      	str	r2, [r3, #4]
 800ba76:	e026      	b.n	800bac6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	68d8      	ldr	r0, [r3, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba80:	461a      	mov	r2, r3
 800ba82:	68b9      	ldr	r1, [r7, #8]
 800ba84:	f001 f9e4 	bl	800ce50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba90:	425b      	negs	r3, r3
 800ba92:	441a      	add	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	68da      	ldr	r2, [r3, #12]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d207      	bcs.n	800bab4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	689a      	ldr	r2, [r3, #8]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baac:	425b      	negs	r3, r3
 800baae:	441a      	add	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d105      	bne.n	800bac6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d002      	beq.n	800bac6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bace:	697b      	ldr	r3, [r7, #20]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bae0:	f000 fef2 	bl	800c8c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800baec:	e011      	b.n	800bb12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d012      	beq.n	800bb1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3324      	adds	r3, #36	; 0x24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 fc12 	bl	800c324 <xTaskRemoveFromEventList>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb06:	f000 fced 	bl	800c4e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	dce9      	bgt.n	800baee <prvUnlockQueue+0x16>
 800bb1a:	e000      	b.n	800bb1e <prvUnlockQueue+0x46>
					break;
 800bb1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	22ff      	movs	r2, #255	; 0xff
 800bb22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bb26:	f000 ff03 	bl	800c930 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb2a:	f000 fecd 	bl	800c8c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb36:	e011      	b.n	800bb5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d012      	beq.n	800bb66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3310      	adds	r3, #16
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 fbed 	bl	800c324 <xTaskRemoveFromEventList>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb50:	f000 fcc8 	bl	800c4e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dce9      	bgt.n	800bb38 <prvUnlockQueue+0x60>
 800bb64:	e000      	b.n	800bb68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	22ff      	movs	r2, #255	; 0xff
 800bb6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb70:	f000 fede 	bl	800c930 <vPortExitCritical>
}
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb84:	f000 fea0 	bl	800c8c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d102      	bne.n	800bb9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb94:	2301      	movs	r3, #1
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	e001      	b.n	800bb9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb9e:	f000 fec7 	bl	800c930 <vPortExitCritical>

	return xReturn;
 800bba2:	68fb      	ldr	r3, [r7, #12]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08e      	sub	sp, #56	; 0x38
 800bbb0:	af04      	add	r7, sp, #16
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10c      	bne.n	800bbda <xTaskCreateStatic+0x2e>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	b672      	cpsid	i
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	b662      	cpsie	i
 800bbd4:	623b      	str	r3, [r7, #32]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10c      	bne.n	800bbfa <xTaskCreateStatic+0x4e>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	b672      	cpsid	i
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	b662      	cpsie	i
 800bbf4:	61fb      	str	r3, [r7, #28]
}
 800bbf6:	bf00      	nop
 800bbf8:	e7fe      	b.n	800bbf8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bbfa:	2354      	movs	r3, #84	; 0x54
 800bbfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	2b54      	cmp	r3, #84	; 0x54
 800bc02:	d00c      	beq.n	800bc1e <xTaskCreateStatic+0x72>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	b672      	cpsid	i
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	b662      	cpsie	i
 800bc18:	61bb      	str	r3, [r7, #24]
}
 800bc1a:	bf00      	nop
 800bc1c:	e7fe      	b.n	800bc1c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d01e      	beq.n	800bc64 <xTaskCreateStatic+0xb8>
 800bc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01b      	beq.n	800bc64 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	2202      	movs	r2, #2
 800bc3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc3e:	2300      	movs	r3, #0
 800bc40:	9303      	str	r3, [sp, #12]
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	9302      	str	r3, [sp, #8]
 800bc46:	f107 0314 	add.w	r3, r7, #20
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 f850 	bl	800bcfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc5e:	f000 f8d7 	bl	800be10 <prvAddNewTaskToReadyList>
 800bc62:	e001      	b.n	800bc68 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bc64:	2300      	movs	r3, #0
 800bc66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc68:	697b      	ldr	r3, [r7, #20]
	}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3728      	adds	r7, #40	; 0x28
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b08c      	sub	sp, #48	; 0x30
 800bc76:	af04      	add	r7, sp, #16
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	603b      	str	r3, [r7, #0]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc82:	88fb      	ldrh	r3, [r7, #6]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 feda 	bl	800ca40 <pvPortMalloc>
 800bc8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00e      	beq.n	800bcb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc94:	2054      	movs	r0, #84	; 0x54
 800bc96:	f000 fed3 	bl	800ca40 <pvPortMalloc>
 800bc9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	631a      	str	r2, [r3, #48]	; 0x30
 800bca8:	e005      	b.n	800bcb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bcaa:	6978      	ldr	r0, [r7, #20]
 800bcac:	f000 ff92 	bl	800cbd4 <vPortFree>
 800bcb0:	e001      	b.n	800bcb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d017      	beq.n	800bcec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bcc4:	88fa      	ldrh	r2, [r7, #6]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	9303      	str	r3, [sp, #12]
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	9302      	str	r3, [sp, #8]
 800bcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 f80e 	bl	800bcfc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bce0:	69f8      	ldr	r0, [r7, #28]
 800bce2:	f000 f895 	bl	800be10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bce6:	2301      	movs	r3, #1
 800bce8:	61bb      	str	r3, [r7, #24]
 800bcea:	e002      	b.n	800bcf2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bcec:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bcf2:	69bb      	ldr	r3, [r7, #24]
	}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3720      	adds	r7, #32
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
 800bd08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bd14:	440b      	add	r3, r1
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	f023 0307 	bic.w	r3, r3, #7
 800bd22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	f003 0307 	and.w	r3, r3, #7
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00c      	beq.n	800bd48 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	b672      	cpsid	i
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	b662      	cpsie	i
 800bd42:	617b      	str	r3, [r7, #20]
}
 800bd44:	bf00      	nop
 800bd46:	e7fe      	b.n	800bd46 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d01f      	beq.n	800bd8e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd4e:	2300      	movs	r3, #0
 800bd50:	61fb      	str	r3, [r7, #28]
 800bd52:	e012      	b.n	800bd7a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	4413      	add	r3, r2
 800bd5a:	7819      	ldrb	r1, [r3, #0]
 800bd5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	4413      	add	r3, r2
 800bd62:	3334      	adds	r3, #52	; 0x34
 800bd64:	460a      	mov	r2, r1
 800bd66:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd68:	68ba      	ldr	r2, [r7, #8]
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d006      	beq.n	800bd82 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	3301      	adds	r3, #1
 800bd78:	61fb      	str	r3, [r7, #28]
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	2b0f      	cmp	r3, #15
 800bd7e:	d9e9      	bls.n	800bd54 <prvInitialiseNewTask+0x58>
 800bd80:	e000      	b.n	800bd84 <prvInitialiseNewTask+0x88>
			{
				break;
 800bd82:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd8c:	e003      	b.n	800bd96 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd98:	2b06      	cmp	r3, #6
 800bd9a:	d901      	bls.n	800bda0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd9c:	2306      	movs	r3, #6
 800bd9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdaa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	2200      	movs	r2, #0
 800bdb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7ff faef 	bl	800b39a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	3318      	adds	r3, #24
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff faea 	bl	800b39a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	f1c3 0207 	rsb	r2, r3, #7
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	2200      	movs	r2, #0
 800bde0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	2200      	movs	r2, #0
 800bde6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	68f9      	ldr	r1, [r7, #12]
 800bdee:	69b8      	ldr	r0, [r7, #24]
 800bdf0:	f000 fcf2 	bl	800c7d8 <pxPortInitialiseStack>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be06:	bf00      	nop
 800be08:	3720      	adds	r7, #32
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be18:	f000 fd56 	bl	800c8c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be1c:	4b2a      	ldr	r3, [pc, #168]	; (800bec8 <prvAddNewTaskToReadyList+0xb8>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3301      	adds	r3, #1
 800be22:	4a29      	ldr	r2, [pc, #164]	; (800bec8 <prvAddNewTaskToReadyList+0xb8>)
 800be24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be26:	4b29      	ldr	r3, [pc, #164]	; (800becc <prvAddNewTaskToReadyList+0xbc>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d109      	bne.n	800be42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be2e:	4a27      	ldr	r2, [pc, #156]	; (800becc <prvAddNewTaskToReadyList+0xbc>)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be34:	4b24      	ldr	r3, [pc, #144]	; (800bec8 <prvAddNewTaskToReadyList+0xb8>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d110      	bne.n	800be5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be3c:	f000 fb5e 	bl	800c4fc <prvInitialiseTaskLists>
 800be40:	e00d      	b.n	800be5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be42:	4b23      	ldr	r3, [pc, #140]	; (800bed0 <prvAddNewTaskToReadyList+0xc0>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d109      	bne.n	800be5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be4a:	4b20      	ldr	r3, [pc, #128]	; (800becc <prvAddNewTaskToReadyList+0xbc>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	429a      	cmp	r2, r3
 800be56:	d802      	bhi.n	800be5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be58:	4a1c      	ldr	r2, [pc, #112]	; (800becc <prvAddNewTaskToReadyList+0xbc>)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be5e:	4b1d      	ldr	r3, [pc, #116]	; (800bed4 <prvAddNewTaskToReadyList+0xc4>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3301      	adds	r3, #1
 800be64:	4a1b      	ldr	r2, [pc, #108]	; (800bed4 <prvAddNewTaskToReadyList+0xc4>)
 800be66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	2201      	movs	r2, #1
 800be6e:	409a      	lsls	r2, r3
 800be70:	4b19      	ldr	r3, [pc, #100]	; (800bed8 <prvAddNewTaskToReadyList+0xc8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4313      	orrs	r3, r2
 800be76:	4a18      	ldr	r2, [pc, #96]	; (800bed8 <prvAddNewTaskToReadyList+0xc8>)
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7e:	4613      	mov	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4a15      	ldr	r2, [pc, #84]	; (800bedc <prvAddNewTaskToReadyList+0xcc>)
 800be88:	441a      	add	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	3304      	adds	r3, #4
 800be8e:	4619      	mov	r1, r3
 800be90:	4610      	mov	r0, r2
 800be92:	f7ff fa8f 	bl	800b3b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be96:	f000 fd4b 	bl	800c930 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be9a:	4b0d      	ldr	r3, [pc, #52]	; (800bed0 <prvAddNewTaskToReadyList+0xc0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00e      	beq.n	800bec0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bea2:	4b0a      	ldr	r3, [pc, #40]	; (800becc <prvAddNewTaskToReadyList+0xbc>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	429a      	cmp	r2, r3
 800beae:	d207      	bcs.n	800bec0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800beb0:	4b0b      	ldr	r3, [pc, #44]	; (800bee0 <prvAddNewTaskToReadyList+0xd0>)
 800beb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb6:	601a      	str	r2, [r3, #0]
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bec0:	bf00      	nop
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	20000c78 	.word	0x20000c78
 800becc:	20000b7c 	.word	0x20000b7c
 800bed0:	20000c84 	.word	0x20000c84
 800bed4:	20000c94 	.word	0x20000c94
 800bed8:	20000c80 	.word	0x20000c80
 800bedc:	20000b80 	.word	0x20000b80
 800bee0:	e000ed04 	.word	0xe000ed04

0800bee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d019      	beq.n	800bf2a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bef6:	4b14      	ldr	r3, [pc, #80]	; (800bf48 <vTaskDelay+0x64>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00c      	beq.n	800bf18 <vTaskDelay+0x34>
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	b672      	cpsid	i
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	b662      	cpsie	i
 800bf12:	60bb      	str	r3, [r7, #8]
}
 800bf14:	bf00      	nop
 800bf16:	e7fe      	b.n	800bf16 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bf18:	f000 f81a 	bl	800bf50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fbf4 	bl	800c70c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf24:	f000 f822 	bl	800bf6c <xTaskResumeAll>
 800bf28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d107      	bne.n	800bf40 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bf30:	4b06      	ldr	r3, [pc, #24]	; (800bf4c <vTaskDelay+0x68>)
 800bf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf36:	601a      	str	r2, [r3, #0]
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf40:	bf00      	nop
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	20000c9c 	.word	0x20000c9c
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf50:	b480      	push	{r7}
 800bf52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bf54:	4b04      	ldr	r3, [pc, #16]	; (800bf68 <vTaskSuspendAll+0x18>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	4a03      	ldr	r2, [pc, #12]	; (800bf68 <vTaskSuspendAll+0x18>)
 800bf5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bf5e:	bf00      	nop
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	20000c9c 	.word	0x20000c9c

0800bf6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf76:	2300      	movs	r3, #0
 800bf78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf7a:	4b42      	ldr	r3, [pc, #264]	; (800c084 <xTaskResumeAll+0x118>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10c      	bne.n	800bf9c <xTaskResumeAll+0x30>
	__asm volatile
 800bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf86:	b672      	cpsid	i
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	b662      	cpsie	i
 800bf96:	603b      	str	r3, [r7, #0]
}
 800bf98:	bf00      	nop
 800bf9a:	e7fe      	b.n	800bf9a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf9c:	f000 fc94 	bl	800c8c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bfa0:	4b38      	ldr	r3, [pc, #224]	; (800c084 <xTaskResumeAll+0x118>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	4a37      	ldr	r2, [pc, #220]	; (800c084 <xTaskResumeAll+0x118>)
 800bfa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfaa:	4b36      	ldr	r3, [pc, #216]	; (800c084 <xTaskResumeAll+0x118>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d161      	bne.n	800c076 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfb2:	4b35      	ldr	r3, [pc, #212]	; (800c088 <xTaskResumeAll+0x11c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d05d      	beq.n	800c076 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfba:	e02e      	b.n	800c01a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfbc:	4b33      	ldr	r3, [pc, #204]	; (800c08c <xTaskResumeAll+0x120>)
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3318      	adds	r3, #24
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff fa50 	bl	800b46e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3304      	adds	r3, #4
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7ff fa4b 	bl	800b46e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfdc:	2201      	movs	r2, #1
 800bfde:	409a      	lsls	r2, r3
 800bfe0:	4b2b      	ldr	r3, [pc, #172]	; (800c090 <xTaskResumeAll+0x124>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	4a2a      	ldr	r2, [pc, #168]	; (800c090 <xTaskResumeAll+0x124>)
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfee:	4613      	mov	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4a27      	ldr	r2, [pc, #156]	; (800c094 <xTaskResumeAll+0x128>)
 800bff8:	441a      	add	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4619      	mov	r1, r3
 800c000:	4610      	mov	r0, r2
 800c002:	f7ff f9d7 	bl	800b3b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00a:	4b23      	ldr	r3, [pc, #140]	; (800c098 <xTaskResumeAll+0x12c>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	429a      	cmp	r2, r3
 800c012:	d302      	bcc.n	800c01a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c014:	4b21      	ldr	r3, [pc, #132]	; (800c09c <xTaskResumeAll+0x130>)
 800c016:	2201      	movs	r2, #1
 800c018:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c01a:	4b1c      	ldr	r3, [pc, #112]	; (800c08c <xTaskResumeAll+0x120>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1cc      	bne.n	800bfbc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c028:	f000 faa8 	bl	800c57c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c02c:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <xTaskResumeAll+0x134>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d010      	beq.n	800c05a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c038:	f000 f836 	bl	800c0a8 <xTaskIncrementTick>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c042:	4b16      	ldr	r3, [pc, #88]	; (800c09c <xTaskResumeAll+0x130>)
 800c044:	2201      	movs	r2, #1
 800c046:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1f1      	bne.n	800c038 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c054:	4b12      	ldr	r3, [pc, #72]	; (800c0a0 <xTaskResumeAll+0x134>)
 800c056:	2200      	movs	r2, #0
 800c058:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c05a:	4b10      	ldr	r3, [pc, #64]	; (800c09c <xTaskResumeAll+0x130>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d009      	beq.n	800c076 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c062:	2301      	movs	r3, #1
 800c064:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c066:	4b0f      	ldr	r3, [pc, #60]	; (800c0a4 <xTaskResumeAll+0x138>)
 800c068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c076:	f000 fc5b 	bl	800c930 <vPortExitCritical>

	return xAlreadyYielded;
 800c07a:	68bb      	ldr	r3, [r7, #8]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	20000c9c 	.word	0x20000c9c
 800c088:	20000c78 	.word	0x20000c78
 800c08c:	20000c3c 	.word	0x20000c3c
 800c090:	20000c80 	.word	0x20000c80
 800c094:	20000b80 	.word	0x20000b80
 800c098:	20000b7c 	.word	0x20000b7c
 800c09c:	20000c8c 	.word	0x20000c8c
 800c0a0:	20000c88 	.word	0x20000c88
 800c0a4:	e000ed04 	.word	0xe000ed04

0800c0a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0b2:	4b4f      	ldr	r3, [pc, #316]	; (800c1f0 <xTaskIncrementTick+0x148>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f040 808a 	bne.w	800c1d0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0bc:	4b4d      	ldr	r3, [pc, #308]	; (800c1f4 <xTaskIncrementTick+0x14c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0c4:	4a4b      	ldr	r2, [pc, #300]	; (800c1f4 <xTaskIncrementTick+0x14c>)
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d122      	bne.n	800c116 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0d0:	4b49      	ldr	r3, [pc, #292]	; (800c1f8 <xTaskIncrementTick+0x150>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00c      	beq.n	800c0f4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	b672      	cpsid	i
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	b662      	cpsie	i
 800c0ee:	603b      	str	r3, [r7, #0]
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <xTaskIncrementTick+0x4a>
 800c0f4:	4b40      	ldr	r3, [pc, #256]	; (800c1f8 <xTaskIncrementTick+0x150>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	4b40      	ldr	r3, [pc, #256]	; (800c1fc <xTaskIncrementTick+0x154>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a3e      	ldr	r2, [pc, #248]	; (800c1f8 <xTaskIncrementTick+0x150>)
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	4a3e      	ldr	r2, [pc, #248]	; (800c1fc <xTaskIncrementTick+0x154>)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	4b3d      	ldr	r3, [pc, #244]	; (800c200 <xTaskIncrementTick+0x158>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	3301      	adds	r3, #1
 800c10e:	4a3c      	ldr	r2, [pc, #240]	; (800c200 <xTaskIncrementTick+0x158>)
 800c110:	6013      	str	r3, [r2, #0]
 800c112:	f000 fa33 	bl	800c57c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c116:	4b3b      	ldr	r3, [pc, #236]	; (800c204 <xTaskIncrementTick+0x15c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	693a      	ldr	r2, [r7, #16]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d348      	bcc.n	800c1b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c120:	4b35      	ldr	r3, [pc, #212]	; (800c1f8 <xTaskIncrementTick+0x150>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d104      	bne.n	800c134 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c12a:	4b36      	ldr	r3, [pc, #216]	; (800c204 <xTaskIncrementTick+0x15c>)
 800c12c:	f04f 32ff 	mov.w	r2, #4294967295
 800c130:	601a      	str	r2, [r3, #0]
					break;
 800c132:	e03e      	b.n	800c1b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c134:	4b30      	ldr	r3, [pc, #192]	; (800c1f8 <xTaskIncrementTick+0x150>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d203      	bcs.n	800c154 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c14c:	4a2d      	ldr	r2, [pc, #180]	; (800c204 <xTaskIncrementTick+0x15c>)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c152:	e02e      	b.n	800c1b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	3304      	adds	r3, #4
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff f988 	bl	800b46e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c162:	2b00      	cmp	r3, #0
 800c164:	d004      	beq.n	800c170 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	3318      	adds	r3, #24
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff f97f 	bl	800b46e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	2201      	movs	r2, #1
 800c176:	409a      	lsls	r2, r3
 800c178:	4b23      	ldr	r3, [pc, #140]	; (800c208 <xTaskIncrementTick+0x160>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	4a22      	ldr	r2, [pc, #136]	; (800c208 <xTaskIncrementTick+0x160>)
 800c180:	6013      	str	r3, [r2, #0]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c186:	4613      	mov	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4a1f      	ldr	r2, [pc, #124]	; (800c20c <xTaskIncrementTick+0x164>)
 800c190:	441a      	add	r2, r3
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	3304      	adds	r3, #4
 800c196:	4619      	mov	r1, r3
 800c198:	4610      	mov	r0, r2
 800c19a:	f7ff f90b 	bl	800b3b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a2:	4b1b      	ldr	r3, [pc, #108]	; (800c210 <xTaskIncrementTick+0x168>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d3b9      	bcc.n	800c120 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1b0:	e7b6      	b.n	800c120 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1b2:	4b17      	ldr	r3, [pc, #92]	; (800c210 <xTaskIncrementTick+0x168>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b8:	4914      	ldr	r1, [pc, #80]	; (800c20c <xTaskIncrementTick+0x164>)
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	440b      	add	r3, r1
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d907      	bls.n	800c1da <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	617b      	str	r3, [r7, #20]
 800c1ce:	e004      	b.n	800c1da <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c1d0:	4b10      	ldr	r3, [pc, #64]	; (800c214 <xTaskIncrementTick+0x16c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	4a0f      	ldr	r2, [pc, #60]	; (800c214 <xTaskIncrementTick+0x16c>)
 800c1d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c1da:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <xTaskIncrementTick+0x170>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c1e6:	697b      	ldr	r3, [r7, #20]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3718      	adds	r7, #24
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	20000c9c 	.word	0x20000c9c
 800c1f4:	20000c7c 	.word	0x20000c7c
 800c1f8:	20000c34 	.word	0x20000c34
 800c1fc:	20000c38 	.word	0x20000c38
 800c200:	20000c90 	.word	0x20000c90
 800c204:	20000c98 	.word	0x20000c98
 800c208:	20000c80 	.word	0x20000c80
 800c20c:	20000b80 	.word	0x20000b80
 800c210:	20000b7c 	.word	0x20000b7c
 800c214:	20000c88 	.word	0x20000c88
 800c218:	20000c8c 	.word	0x20000c8c

0800c21c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c222:	4b28      	ldr	r3, [pc, #160]	; (800c2c4 <vTaskSwitchContext+0xa8>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c22a:	4b27      	ldr	r3, [pc, #156]	; (800c2c8 <vTaskSwitchContext+0xac>)
 800c22c:	2201      	movs	r2, #1
 800c22e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c230:	e041      	b.n	800c2b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c232:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <vTaskSwitchContext+0xac>)
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c238:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <vTaskSwitchContext+0xb0>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	fab3 f383 	clz	r3, r3
 800c244:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c246:	7afb      	ldrb	r3, [r7, #11]
 800c248:	f1c3 031f 	rsb	r3, r3, #31
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	4920      	ldr	r1, [pc, #128]	; (800c2d0 <vTaskSwitchContext+0xb4>)
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	4613      	mov	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	440b      	add	r3, r1
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10c      	bne.n	800c27c <vTaskSwitchContext+0x60>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c266:	b672      	cpsid	i
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	b662      	cpsie	i
 800c276:	607b      	str	r3, [r7, #4]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <vTaskSwitchContext+0x5e>
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4a12      	ldr	r2, [pc, #72]	; (800c2d0 <vTaskSwitchContext+0xb4>)
 800c288:	4413      	add	r3, r2
 800c28a:	613b      	str	r3, [r7, #16]
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	605a      	str	r2, [r3, #4]
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	685a      	ldr	r2, [r3, #4]
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	3308      	adds	r3, #8
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d104      	bne.n	800c2ac <vTaskSwitchContext+0x90>
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	605a      	str	r2, [r3, #4]
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	4a08      	ldr	r2, [pc, #32]	; (800c2d4 <vTaskSwitchContext+0xb8>)
 800c2b4:	6013      	str	r3, [r2, #0]
}
 800c2b6:	bf00      	nop
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	20000c9c 	.word	0x20000c9c
 800c2c8:	20000c8c 	.word	0x20000c8c
 800c2cc:	20000c80 	.word	0x20000c80
 800c2d0:	20000b80 	.word	0x20000b80
 800c2d4:	20000b7c 	.word	0x20000b7c

0800c2d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10c      	bne.n	800c302 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ec:	b672      	cpsid	i
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	b662      	cpsie	i
 800c2fc:	60fb      	str	r3, [r7, #12]
}
 800c2fe:	bf00      	nop
 800c300:	e7fe      	b.n	800c300 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c302:	4b07      	ldr	r3, [pc, #28]	; (800c320 <vTaskPlaceOnEventList+0x48>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3318      	adds	r3, #24
 800c308:	4619      	mov	r1, r3
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7ff f876 	bl	800b3fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c310:	2101      	movs	r1, #1
 800c312:	6838      	ldr	r0, [r7, #0]
 800c314:	f000 f9fa 	bl	800c70c <prvAddCurrentTaskToDelayedList>
}
 800c318:	bf00      	nop
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20000b7c 	.word	0x20000b7c

0800c324 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10c      	bne.n	800c354 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	b672      	cpsid	i
 800c340:	f383 8811 	msr	BASEPRI, r3
 800c344:	f3bf 8f6f 	isb	sy
 800c348:	f3bf 8f4f 	dsb	sy
 800c34c:	b662      	cpsie	i
 800c34e:	60fb      	str	r3, [r7, #12]
}
 800c350:	bf00      	nop
 800c352:	e7fe      	b.n	800c352 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	3318      	adds	r3, #24
 800c358:	4618      	mov	r0, r3
 800c35a:	f7ff f888 	bl	800b46e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c35e:	4b1d      	ldr	r3, [pc, #116]	; (800c3d4 <xTaskRemoveFromEventList+0xb0>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d11c      	bne.n	800c3a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	3304      	adds	r3, #4
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff f87f 	bl	800b46e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c374:	2201      	movs	r2, #1
 800c376:	409a      	lsls	r2, r3
 800c378:	4b17      	ldr	r3, [pc, #92]	; (800c3d8 <xTaskRemoveFromEventList+0xb4>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	4a16      	ldr	r2, [pc, #88]	; (800c3d8 <xTaskRemoveFromEventList+0xb4>)
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c386:	4613      	mov	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4413      	add	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4a13      	ldr	r2, [pc, #76]	; (800c3dc <xTaskRemoveFromEventList+0xb8>)
 800c390:	441a      	add	r2, r3
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	3304      	adds	r3, #4
 800c396:	4619      	mov	r1, r3
 800c398:	4610      	mov	r0, r2
 800c39a:	f7ff f80b 	bl	800b3b4 <vListInsertEnd>
 800c39e:	e005      	b.n	800c3ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	3318      	adds	r3, #24
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	480e      	ldr	r0, [pc, #56]	; (800c3e0 <xTaskRemoveFromEventList+0xbc>)
 800c3a8:	f7ff f804 	bl	800b3b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b0:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <xTaskRemoveFromEventList+0xc0>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d905      	bls.n	800c3c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c3be:	4b0a      	ldr	r3, [pc, #40]	; (800c3e8 <xTaskRemoveFromEventList+0xc4>)
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	e001      	b.n	800c3ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c3ca:	697b      	ldr	r3, [r7, #20]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3718      	adds	r7, #24
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	20000c9c 	.word	0x20000c9c
 800c3d8:	20000c80 	.word	0x20000c80
 800c3dc:	20000b80 	.word	0x20000b80
 800c3e0:	20000c3c 	.word	0x20000c3c
 800c3e4:	20000b7c 	.word	0x20000b7c
 800c3e8:	20000c8c 	.word	0x20000c8c

0800c3ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3f4:	4b06      	ldr	r3, [pc, #24]	; (800c410 <vTaskInternalSetTimeOutState+0x24>)
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c3fc:	4b05      	ldr	r3, [pc, #20]	; (800c414 <vTaskInternalSetTimeOutState+0x28>)
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	605a      	str	r2, [r3, #4]
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	20000c90 	.word	0x20000c90
 800c414:	20000c7c 	.word	0x20000c7c

0800c418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b088      	sub	sp, #32
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10c      	bne.n	800c442 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	b672      	cpsid	i
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	b662      	cpsie	i
 800c43c:	613b      	str	r3, [r7, #16]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10c      	bne.n	800c462 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	b672      	cpsid	i
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	b662      	cpsie	i
 800c45c:	60fb      	str	r3, [r7, #12]
}
 800c45e:	bf00      	nop
 800c460:	e7fe      	b.n	800c460 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c462:	f000 fa31 	bl	800c8c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c466:	4b1d      	ldr	r3, [pc, #116]	; (800c4dc <xTaskCheckForTimeOut+0xc4>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	69ba      	ldr	r2, [r7, #24]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47e:	d102      	bne.n	800c486 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]
 800c484:	e023      	b.n	800c4ce <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <xTaskCheckForTimeOut+0xc8>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d007      	beq.n	800c4a2 <xTaskCheckForTimeOut+0x8a>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	69ba      	ldr	r2, [r7, #24]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d302      	bcc.n	800c4a2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c49c:	2301      	movs	r3, #1
 800c49e:	61fb      	str	r3, [r7, #28]
 800c4a0:	e015      	b.n	800c4ce <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d20b      	bcs.n	800c4c4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	1ad2      	subs	r2, r2, r3
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff ff97 	bl	800c3ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	e004      	b.n	800c4ce <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4ce:	f000 fa2f 	bl	800c930 <vPortExitCritical>

	return xReturn;
 800c4d2:	69fb      	ldr	r3, [r7, #28]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3720      	adds	r7, #32
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	20000c7c 	.word	0x20000c7c
 800c4e0:	20000c90 	.word	0x20000c90

0800c4e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4e8:	4b03      	ldr	r3, [pc, #12]	; (800c4f8 <vTaskMissedYield+0x14>)
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	601a      	str	r2, [r3, #0]
}
 800c4ee:	bf00      	nop
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	20000c8c 	.word	0x20000c8c

0800c4fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c502:	2300      	movs	r3, #0
 800c504:	607b      	str	r3, [r7, #4]
 800c506:	e00c      	b.n	800c522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	4613      	mov	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4413      	add	r3, r2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	4a12      	ldr	r2, [pc, #72]	; (800c55c <prvInitialiseTaskLists+0x60>)
 800c514:	4413      	add	r3, r2
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe ff1f 	bl	800b35a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3301      	adds	r3, #1
 800c520:	607b      	str	r3, [r7, #4]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b06      	cmp	r3, #6
 800c526:	d9ef      	bls.n	800c508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c528:	480d      	ldr	r0, [pc, #52]	; (800c560 <prvInitialiseTaskLists+0x64>)
 800c52a:	f7fe ff16 	bl	800b35a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c52e:	480d      	ldr	r0, [pc, #52]	; (800c564 <prvInitialiseTaskLists+0x68>)
 800c530:	f7fe ff13 	bl	800b35a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c534:	480c      	ldr	r0, [pc, #48]	; (800c568 <prvInitialiseTaskLists+0x6c>)
 800c536:	f7fe ff10 	bl	800b35a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c53a:	480c      	ldr	r0, [pc, #48]	; (800c56c <prvInitialiseTaskLists+0x70>)
 800c53c:	f7fe ff0d 	bl	800b35a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c540:	480b      	ldr	r0, [pc, #44]	; (800c570 <prvInitialiseTaskLists+0x74>)
 800c542:	f7fe ff0a 	bl	800b35a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <prvInitialiseTaskLists+0x78>)
 800c548:	4a05      	ldr	r2, [pc, #20]	; (800c560 <prvInitialiseTaskLists+0x64>)
 800c54a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c54c:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <prvInitialiseTaskLists+0x7c>)
 800c54e:	4a05      	ldr	r2, [pc, #20]	; (800c564 <prvInitialiseTaskLists+0x68>)
 800c550:	601a      	str	r2, [r3, #0]
}
 800c552:	bf00      	nop
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	20000b80 	.word	0x20000b80
 800c560:	20000c0c 	.word	0x20000c0c
 800c564:	20000c20 	.word	0x20000c20
 800c568:	20000c3c 	.word	0x20000c3c
 800c56c:	20000c50 	.word	0x20000c50
 800c570:	20000c64 	.word	0x20000c64
 800c574:	20000c34 	.word	0x20000c34
 800c578:	20000c38 	.word	0x20000c38

0800c57c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c582:	4b0c      	ldr	r3, [pc, #48]	; (800c5b4 <prvResetNextTaskUnblockTime+0x38>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d104      	bne.n	800c596 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c58c:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c58e:	f04f 32ff 	mov.w	r2, #4294967295
 800c592:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c594:	e008      	b.n	800c5a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c596:	4b07      	ldr	r3, [pc, #28]	; (800c5b4 <prvResetNextTaskUnblockTime+0x38>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	4a04      	ldr	r2, [pc, #16]	; (800c5b8 <prvResetNextTaskUnblockTime+0x3c>)
 800c5a6:	6013      	str	r3, [r2, #0]
}
 800c5a8:	bf00      	nop
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	20000c34 	.word	0x20000c34
 800c5b8:	20000c98 	.word	0x20000c98

0800c5bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c5c2:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <xTaskGetSchedulerState+0x34>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d102      	bne.n	800c5d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	607b      	str	r3, [r7, #4]
 800c5ce:	e008      	b.n	800c5e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5d0:	4b08      	ldr	r3, [pc, #32]	; (800c5f4 <xTaskGetSchedulerState+0x38>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d102      	bne.n	800c5de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c5d8:	2302      	movs	r3, #2
 800c5da:	607b      	str	r3, [r7, #4]
 800c5dc:	e001      	b.n	800c5e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c5e2:	687b      	ldr	r3, [r7, #4]
	}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	20000c84 	.word	0x20000c84
 800c5f4:	20000c9c 	.word	0x20000c9c

0800c5f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c604:	2300      	movs	r3, #0
 800c606:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d072      	beq.n	800c6f4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c60e:	4b3c      	ldr	r3, [pc, #240]	; (800c700 <xTaskPriorityDisinherit+0x108>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	693a      	ldr	r2, [r7, #16]
 800c614:	429a      	cmp	r2, r3
 800c616:	d00c      	beq.n	800c632 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	b672      	cpsid	i
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	b662      	cpsie	i
 800c62c:	60fb      	str	r3, [r7, #12]
}
 800c62e:	bf00      	nop
 800c630:	e7fe      	b.n	800c630 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10c      	bne.n	800c654 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	b672      	cpsid	i
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	b662      	cpsie	i
 800c64e:	60bb      	str	r3, [r7, #8]
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c658:	1e5a      	subs	r2, r3, #1
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c666:	429a      	cmp	r2, r3
 800c668:	d044      	beq.n	800c6f4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d140      	bne.n	800c6f4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	3304      	adds	r3, #4
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fef9 	bl	800b46e <uxListRemove>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d115      	bne.n	800c6ae <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c686:	491f      	ldr	r1, [pc, #124]	; (800c704 <xTaskPriorityDisinherit+0x10c>)
 800c688:	4613      	mov	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	440b      	add	r3, r1
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10a      	bne.n	800c6ae <xTaskPriorityDisinherit+0xb6>
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	2201      	movs	r2, #1
 800c69e:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a2:	43da      	mvns	r2, r3
 800c6a4:	4b18      	ldr	r3, [pc, #96]	; (800c708 <xTaskPriorityDisinherit+0x110>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	4a17      	ldr	r2, [pc, #92]	; (800c708 <xTaskPriorityDisinherit+0x110>)
 800c6ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	f1c3 0207 	rsb	r2, r3, #7
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	409a      	lsls	r2, r3
 800c6ca:	4b0f      	ldr	r3, [pc, #60]	; (800c708 <xTaskPriorityDisinherit+0x110>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	4a0d      	ldr	r2, [pc, #52]	; (800c708 <xTaskPriorityDisinherit+0x110>)
 800c6d2:	6013      	str	r3, [r2, #0]
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d8:	4613      	mov	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4413      	add	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4a08      	ldr	r2, [pc, #32]	; (800c704 <xTaskPriorityDisinherit+0x10c>)
 800c6e2:	441a      	add	r2, r3
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	f7fe fe62 	bl	800b3b4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6f4:	697b      	ldr	r3, [r7, #20]
	}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3718      	adds	r7, #24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20000b7c 	.word	0x20000b7c
 800c704:	20000b80 	.word	0x20000b80
 800c708:	20000c80 	.word	0x20000c80

0800c70c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c716:	4b29      	ldr	r3, [pc, #164]	; (800c7bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c71c:	4b28      	ldr	r3, [pc, #160]	; (800c7c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3304      	adds	r3, #4
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe fea3 	bl	800b46e <uxListRemove>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10b      	bne.n	800c746 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c72e:	4b24      	ldr	r3, [pc, #144]	; (800c7c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	2201      	movs	r2, #1
 800c736:	fa02 f303 	lsl.w	r3, r2, r3
 800c73a:	43da      	mvns	r2, r3
 800c73c:	4b21      	ldr	r3, [pc, #132]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4013      	ands	r3, r2
 800c742:	4a20      	ldr	r2, [pc, #128]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c744:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74c:	d10a      	bne.n	800c764 <prvAddCurrentTaskToDelayedList+0x58>
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d007      	beq.n	800c764 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c754:	4b1a      	ldr	r3, [pc, #104]	; (800c7c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3304      	adds	r3, #4
 800c75a:	4619      	mov	r1, r3
 800c75c:	481a      	ldr	r0, [pc, #104]	; (800c7c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c75e:	f7fe fe29 	bl	800b3b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c762:	e026      	b.n	800c7b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4413      	add	r3, r2
 800c76a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c76c:	4b14      	ldr	r3, [pc, #80]	; (800c7c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d209      	bcs.n	800c790 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c77c:	4b13      	ldr	r3, [pc, #76]	; (800c7cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	4b0f      	ldr	r3, [pc, #60]	; (800c7c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	3304      	adds	r3, #4
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f7fe fe37 	bl	800b3fc <vListInsert>
}
 800c78e:	e010      	b.n	800c7b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c790:	4b0f      	ldr	r3, [pc, #60]	; (800c7d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	4b0a      	ldr	r3, [pc, #40]	; (800c7c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3304      	adds	r3, #4
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fe fe2d 	bl	800b3fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7a2:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d202      	bcs.n	800c7b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c7ac:	4a09      	ldr	r2, [pc, #36]	; (800c7d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	6013      	str	r3, [r2, #0]
}
 800c7b2:	bf00      	nop
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20000c7c 	.word	0x20000c7c
 800c7c0:	20000b7c 	.word	0x20000b7c
 800c7c4:	20000c80 	.word	0x20000c80
 800c7c8:	20000c64 	.word	0x20000c64
 800c7cc:	20000c38 	.word	0x20000c38
 800c7d0:	20000c34 	.word	0x20000c34
 800c7d4:	20000c98 	.word	0x20000c98

0800c7d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	3b04      	subs	r3, #4
 800c7e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c7f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3b04      	subs	r3, #4
 800c7f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	f023 0201 	bic.w	r2, r3, #1
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3b04      	subs	r3, #4
 800c806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c808:	4a0c      	ldr	r2, [pc, #48]	; (800c83c <pxPortInitialiseStack+0x64>)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3b14      	subs	r3, #20
 800c812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	3b04      	subs	r3, #4
 800c81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f06f 0202 	mvn.w	r2, #2
 800c826:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3b20      	subs	r3, #32
 800c82c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c82e:	68fb      	ldr	r3, [r7, #12]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	0800c841 	.word	0x0800c841

0800c840 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c84a:	4b14      	ldr	r3, [pc, #80]	; (800c89c <prvTaskExitError+0x5c>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c852:	d00c      	beq.n	800c86e <prvTaskExitError+0x2e>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c858:	b672      	cpsid	i
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	b662      	cpsie	i
 800c868:	60fb      	str	r3, [r7, #12]
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <prvTaskExitError+0x2c>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	b672      	cpsid	i
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	b662      	cpsie	i
 800c882:	60bb      	str	r3, [r7, #8]
}
 800c884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c886:	bf00      	nop
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0fc      	beq.n	800c888 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c88e:	bf00      	nop
 800c890:	bf00      	nop
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	20000054 	.word	0x20000054

0800c8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <pxCurrentTCBConst2>)
 800c8a2:	6819      	ldr	r1, [r3, #0]
 800c8a4:	6808      	ldr	r0, [r1, #0]
 800c8a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8aa:	f380 8809 	msr	PSP, r0
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f04f 0000 	mov.w	r0, #0
 800c8b6:	f380 8811 	msr	BASEPRI, r0
 800c8ba:	4770      	bx	lr
 800c8bc:	f3af 8000 	nop.w

0800c8c0 <pxCurrentTCBConst2>:
 800c8c0:	20000b7c 	.word	0x20000b7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop

0800c8c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	b672      	cpsid	i
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	b662      	cpsie	i
 800c8e2:	607b      	str	r3, [r7, #4]
}
 800c8e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8e6:	4b10      	ldr	r3, [pc, #64]	; (800c928 <vPortEnterCritical+0x60>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	4a0e      	ldr	r2, [pc, #56]	; (800c928 <vPortEnterCritical+0x60>)
 800c8ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8f0:	4b0d      	ldr	r3, [pc, #52]	; (800c928 <vPortEnterCritical+0x60>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d111      	bne.n	800c91c <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8f8:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <vPortEnterCritical+0x64>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00c      	beq.n	800c91c <vPortEnterCritical+0x54>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	b672      	cpsid	i
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	b662      	cpsie	i
 800c916:	603b      	str	r3, [r7, #0]
}
 800c918:	bf00      	nop
 800c91a:	e7fe      	b.n	800c91a <vPortEnterCritical+0x52>
	}
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr
 800c928:	20000054 	.word	0x20000054
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c936:	4b13      	ldr	r3, [pc, #76]	; (800c984 <vPortExitCritical+0x54>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10c      	bne.n	800c958 <vPortExitCritical+0x28>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	b672      	cpsid	i
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	b662      	cpsie	i
 800c952:	607b      	str	r3, [r7, #4]
}
 800c954:	bf00      	nop
 800c956:	e7fe      	b.n	800c956 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c958:	4b0a      	ldr	r3, [pc, #40]	; (800c984 <vPortExitCritical+0x54>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	4a09      	ldr	r2, [pc, #36]	; (800c984 <vPortExitCritical+0x54>)
 800c960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c962:	4b08      	ldr	r3, [pc, #32]	; (800c984 <vPortExitCritical+0x54>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d105      	bne.n	800c976 <vPortExitCritical+0x46>
 800c96a:	2300      	movs	r3, #0
 800c96c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	20000054 	.word	0x20000054
	...

0800c990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c990:	f3ef 8009 	mrs	r0, PSP
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	4b15      	ldr	r3, [pc, #84]	; (800c9f0 <pxCurrentTCBConst>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	f01e 0f10 	tst.w	lr, #16
 800c9a0:	bf08      	it	eq
 800c9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9aa:	6010      	str	r0, [r2, #0]
 800c9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c9b4:	b672      	cpsid	i
 800c9b6:	f380 8811 	msr	BASEPRI, r0
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	b662      	cpsie	i
 800c9c4:	f7ff fc2a 	bl	800c21c <vTaskSwitchContext>
 800c9c8:	f04f 0000 	mov.w	r0, #0
 800c9cc:	f380 8811 	msr	BASEPRI, r0
 800c9d0:	bc09      	pop	{r0, r3}
 800c9d2:	6819      	ldr	r1, [r3, #0]
 800c9d4:	6808      	ldr	r0, [r1, #0]
 800c9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9da:	f01e 0f10 	tst.w	lr, #16
 800c9de:	bf08      	it	eq
 800c9e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9e4:	f380 8809 	msr	PSP, r0
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop

0800c9f0 <pxCurrentTCBConst>:
 800c9f0:	20000b7c 	.word	0x20000b7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop

0800c9f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	b672      	cpsid	i
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	b662      	cpsie	i
 800ca12:	607b      	str	r3, [r7, #4]
}
 800ca14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca16:	f7ff fb47 	bl	800c0a8 <xTaskIncrementTick>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca20:	4b06      	ldr	r3, [pc, #24]	; (800ca3c <SysTick_Handler+0x44>)
 800ca22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca26:	601a      	str	r2, [r3, #0]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	f383 8811 	msr	BASEPRI, r3
}
 800ca32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca34:	bf00      	nop
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	e000ed04 	.word	0xe000ed04

0800ca40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08a      	sub	sp, #40	; 0x28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca4c:	f7ff fa80 	bl	800bf50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca50:	4b5b      	ldr	r3, [pc, #364]	; (800cbc0 <pvPortMalloc+0x180>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca58:	f000 f91a 	bl	800cc90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca5c:	4b59      	ldr	r3, [pc, #356]	; (800cbc4 <pvPortMalloc+0x184>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4013      	ands	r3, r2
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f040 8092 	bne.w	800cb8e <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01f      	beq.n	800cab0 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ca70:	2208      	movs	r2, #8
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4413      	add	r3, r2
 800ca76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f003 0307 	and.w	r3, r3, #7
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d016      	beq.n	800cab0 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f023 0307 	bic.w	r3, r3, #7
 800ca88:	3308      	adds	r3, #8
 800ca8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f003 0307 	and.w	r3, r3, #7
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00c      	beq.n	800cab0 <pvPortMalloc+0x70>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	b672      	cpsid	i
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	b662      	cpsie	i
 800caaa:	617b      	str	r3, [r7, #20]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d06b      	beq.n	800cb8e <pvPortMalloc+0x14e>
 800cab6:	4b44      	ldr	r3, [pc, #272]	; (800cbc8 <pvPortMalloc+0x188>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d866      	bhi.n	800cb8e <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cac0:	4b42      	ldr	r3, [pc, #264]	; (800cbcc <pvPortMalloc+0x18c>)
 800cac2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cac4:	4b41      	ldr	r3, [pc, #260]	; (800cbcc <pvPortMalloc+0x18c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caca:	e004      	b.n	800cad6 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d903      	bls.n	800cae8 <pvPortMalloc+0xa8>
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1f1      	bne.n	800cacc <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cae8:	4b35      	ldr	r3, [pc, #212]	; (800cbc0 <pvPortMalloc+0x180>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caee:	429a      	cmp	r2, r3
 800caf0:	d04d      	beq.n	800cb8e <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800caf2:	6a3b      	ldr	r3, [r7, #32]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2208      	movs	r2, #8
 800caf8:	4413      	add	r3, r2
 800cafa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	1ad2      	subs	r2, r2, r3
 800cb0c:	2308      	movs	r3, #8
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d921      	bls.n	800cb58 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4413      	add	r3, r2
 800cb1a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00c      	beq.n	800cb40 <pvPortMalloc+0x100>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	b672      	cpsid	i
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	b662      	cpsie	i
 800cb3a:	613b      	str	r3, [r7, #16]
}
 800cb3c:	bf00      	nop
 800cb3e:	e7fe      	b.n	800cb3e <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	1ad2      	subs	r2, r2, r3
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb52:	69b8      	ldr	r0, [r7, #24]
 800cb54:	f000 f8fe 	bl	800cd54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb58:	4b1b      	ldr	r3, [pc, #108]	; (800cbc8 <pvPortMalloc+0x188>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	4a19      	ldr	r2, [pc, #100]	; (800cbc8 <pvPortMalloc+0x188>)
 800cb64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb66:	4b18      	ldr	r3, [pc, #96]	; (800cbc8 <pvPortMalloc+0x188>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	4b19      	ldr	r3, [pc, #100]	; (800cbd0 <pvPortMalloc+0x190>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d203      	bcs.n	800cb7a <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb72:	4b15      	ldr	r3, [pc, #84]	; (800cbc8 <pvPortMalloc+0x188>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a16      	ldr	r2, [pc, #88]	; (800cbd0 <pvPortMalloc+0x190>)
 800cb78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	4b11      	ldr	r3, [pc, #68]	; (800cbc4 <pvPortMalloc+0x184>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	431a      	orrs	r2, r3
 800cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb8e:	f7ff f9ed 	bl	800bf6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	f003 0307 	and.w	r3, r3, #7
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00c      	beq.n	800cbb6 <pvPortMalloc+0x176>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	b672      	cpsid	i
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	b662      	cpsie	i
 800cbb0:	60fb      	str	r3, [r7, #12]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <pvPortMalloc+0x174>
	return pvReturn;
 800cbb6:	69fb      	ldr	r3, [r7, #28]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3728      	adds	r7, #40	; 0x28
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	200048a8 	.word	0x200048a8
 800cbc4:	200048b4 	.word	0x200048b4
 800cbc8:	200048ac 	.word	0x200048ac
 800cbcc:	200048a0 	.word	0x200048a0
 800cbd0:	200048b0 	.word	0x200048b0

0800cbd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d04c      	beq.n	800cc80 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbe6:	2308      	movs	r3, #8
 800cbe8:	425b      	negs	r3, r3
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	4413      	add	r3, r2
 800cbee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	4b23      	ldr	r3, [pc, #140]	; (800cc88 <vPortFree+0xb4>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10c      	bne.n	800cc1c <vPortFree+0x48>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	b672      	cpsid	i
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	b662      	cpsie	i
 800cc16:	60fb      	str	r3, [r7, #12]
}
 800cc18:	bf00      	nop
 800cc1a:	e7fe      	b.n	800cc1a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00c      	beq.n	800cc3e <vPortFree+0x6a>
	__asm volatile
 800cc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc28:	b672      	cpsid	i
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	b662      	cpsie	i
 800cc38:	60bb      	str	r3, [r7, #8]
}
 800cc3a:	bf00      	nop
 800cc3c:	e7fe      	b.n	800cc3c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	4b11      	ldr	r3, [pc, #68]	; (800cc88 <vPortFree+0xb4>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4013      	ands	r3, r2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d019      	beq.n	800cc80 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d115      	bne.n	800cc80 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	685a      	ldr	r2, [r3, #4]
 800cc58:	4b0b      	ldr	r3, [pc, #44]	; (800cc88 <vPortFree+0xb4>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	43db      	mvns	r3, r3
 800cc5e:	401a      	ands	r2, r3
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc64:	f7ff f974 	bl	800bf50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	685a      	ldr	r2, [r3, #4]
 800cc6c:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <vPortFree+0xb8>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4413      	add	r3, r2
 800cc72:	4a06      	ldr	r2, [pc, #24]	; (800cc8c <vPortFree+0xb8>)
 800cc74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc76:	6938      	ldr	r0, [r7, #16]
 800cc78:	f000 f86c 	bl	800cd54 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cc7c:	f7ff f976 	bl	800bf6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc80:	bf00      	nop
 800cc82:	3718      	adds	r7, #24
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	200048b4 	.word	0x200048b4
 800cc8c:	200048ac 	.word	0x200048ac

0800cc90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc96:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc9c:	4b27      	ldr	r3, [pc, #156]	; (800cd3c <prvHeapInit+0xac>)
 800cc9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f003 0307 	and.w	r3, r3, #7
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00c      	beq.n	800ccc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3307      	adds	r3, #7
 800ccae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f023 0307 	bic.w	r3, r3, #7
 800ccb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	4a1f      	ldr	r2, [pc, #124]	; (800cd3c <prvHeapInit+0xac>)
 800ccc0:	4413      	add	r3, r2
 800ccc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccc8:	4a1d      	ldr	r2, [pc, #116]	; (800cd40 <prvHeapInit+0xb0>)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccce:	4b1c      	ldr	r3, [pc, #112]	; (800cd40 <prvHeapInit+0xb0>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	4413      	add	r3, r2
 800ccda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccdc:	2208      	movs	r2, #8
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	1a9b      	subs	r3, r3, r2
 800cce2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f023 0307 	bic.w	r3, r3, #7
 800ccea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	4a15      	ldr	r2, [pc, #84]	; (800cd44 <prvHeapInit+0xb4>)
 800ccf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccf2:	4b14      	ldr	r3, [pc, #80]	; (800cd44 <prvHeapInit+0xb4>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccfa:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <prvHeapInit+0xb4>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	1ad2      	subs	r2, r2, r3
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd10:	4b0c      	ldr	r3, [pc, #48]	; (800cd44 <prvHeapInit+0xb4>)
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	4a0a      	ldr	r2, [pc, #40]	; (800cd48 <prvHeapInit+0xb8>)
 800cd1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	4a09      	ldr	r2, [pc, #36]	; (800cd4c <prvHeapInit+0xbc>)
 800cd26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd28:	4b09      	ldr	r3, [pc, #36]	; (800cd50 <prvHeapInit+0xc0>)
 800cd2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd2e:	601a      	str	r2, [r3, #0]
}
 800cd30:	bf00      	nop
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	20000ca0 	.word	0x20000ca0
 800cd40:	200048a0 	.word	0x200048a0
 800cd44:	200048a8 	.word	0x200048a8
 800cd48:	200048b0 	.word	0x200048b0
 800cd4c:	200048ac 	.word	0x200048ac
 800cd50:	200048b4 	.word	0x200048b4

0800cd54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd5c:	4b28      	ldr	r3, [pc, #160]	; (800ce00 <prvInsertBlockIntoFreeList+0xac>)
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	e002      	b.n	800cd68 <prvInsertBlockIntoFreeList+0x14>
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	60fb      	str	r3, [r7, #12]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d8f7      	bhi.n	800cd62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	68ba      	ldr	r2, [r7, #8]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d108      	bne.n	800cd96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	441a      	add	r2, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	441a      	add	r2, r3
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d118      	bne.n	800cddc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	4b15      	ldr	r3, [pc, #84]	; (800ce04 <prvInsertBlockIntoFreeList+0xb0>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d00d      	beq.n	800cdd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685a      	ldr	r2, [r3, #4]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	441a      	add	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	e008      	b.n	800cde4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdd2:	4b0c      	ldr	r3, [pc, #48]	; (800ce04 <prvInsertBlockIntoFreeList+0xb0>)
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	e003      	b.n	800cde4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d002      	beq.n	800cdf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdf2:	bf00      	nop
 800cdf4:	3714      	adds	r7, #20
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	200048a0 	.word	0x200048a0
 800ce04:	200048a8 	.word	0x200048a8

0800ce08 <__libc_init_array>:
 800ce08:	b570      	push	{r4, r5, r6, lr}
 800ce0a:	4d0d      	ldr	r5, [pc, #52]	; (800ce40 <__libc_init_array+0x38>)
 800ce0c:	4c0d      	ldr	r4, [pc, #52]	; (800ce44 <__libc_init_array+0x3c>)
 800ce0e:	1b64      	subs	r4, r4, r5
 800ce10:	10a4      	asrs	r4, r4, #2
 800ce12:	2600      	movs	r6, #0
 800ce14:	42a6      	cmp	r6, r4
 800ce16:	d109      	bne.n	800ce2c <__libc_init_array+0x24>
 800ce18:	4d0b      	ldr	r5, [pc, #44]	; (800ce48 <__libc_init_array+0x40>)
 800ce1a:	4c0c      	ldr	r4, [pc, #48]	; (800ce4c <__libc_init_array+0x44>)
 800ce1c:	f000 f82e 	bl	800ce7c <_init>
 800ce20:	1b64      	subs	r4, r4, r5
 800ce22:	10a4      	asrs	r4, r4, #2
 800ce24:	2600      	movs	r6, #0
 800ce26:	42a6      	cmp	r6, r4
 800ce28:	d105      	bne.n	800ce36 <__libc_init_array+0x2e>
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
 800ce2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce30:	4798      	blx	r3
 800ce32:	3601      	adds	r6, #1
 800ce34:	e7ee      	b.n	800ce14 <__libc_init_array+0xc>
 800ce36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce3a:	4798      	blx	r3
 800ce3c:	3601      	adds	r6, #1
 800ce3e:	e7f2      	b.n	800ce26 <__libc_init_array+0x1e>
 800ce40:	0800f0c4 	.word	0x0800f0c4
 800ce44:	0800f0c4 	.word	0x0800f0c4
 800ce48:	0800f0c4 	.word	0x0800f0c4
 800ce4c:	0800f0c8 	.word	0x0800f0c8

0800ce50 <memcpy>:
 800ce50:	440a      	add	r2, r1
 800ce52:	4291      	cmp	r1, r2
 800ce54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce58:	d100      	bne.n	800ce5c <memcpy+0xc>
 800ce5a:	4770      	bx	lr
 800ce5c:	b510      	push	{r4, lr}
 800ce5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce66:	4291      	cmp	r1, r2
 800ce68:	d1f9      	bne.n	800ce5e <memcpy+0xe>
 800ce6a:	bd10      	pop	{r4, pc}

0800ce6c <memset>:
 800ce6c:	4402      	add	r2, r0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d100      	bne.n	800ce76 <memset+0xa>
 800ce74:	4770      	bx	lr
 800ce76:	f803 1b01 	strb.w	r1, [r3], #1
 800ce7a:	e7f9      	b.n	800ce70 <memset+0x4>

0800ce7c <_init>:
 800ce7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7e:	bf00      	nop
 800ce80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce82:	bc08      	pop	{r3}
 800ce84:	469e      	mov	lr, r3
 800ce86:	4770      	bx	lr

0800ce88 <_fini>:
 800ce88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8a:	bf00      	nop
 800ce8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8e:	bc08      	pop	{r3}
 800ce90:	469e      	mov	lr, r3
 800ce92:	4770      	bx	lr
