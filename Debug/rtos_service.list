
rtos_service.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b880  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f4c  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d99c  0800d99c  0002148c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d99c  0800d99c  0001d99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9a4  0800d9a4  0002148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9a4  0800d9a4  0001d9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000148c  20000000  0800d9ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004628  2000148c  0800ee38  0002148c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005ab4  0800ee38  00025ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002148c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e5e3  00000000  00000000  000214bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000595e  00000000  00000000  0004fa9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025e8  00000000  00000000  00055400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023a0  00000000  00000000  000579e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007d74  00000000  00000000  00059d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c42e  00000000  00000000  00061afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011599e  00000000  00000000  0008df2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a38c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a15c  00000000  00000000  001a391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000148c 	.word	0x2000148c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba38 	.word	0x0800ba38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001490 	.word	0x20001490
 800020c:	0800ba38 	.word	0x0800ba38

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000512:	20c8      	movs	r0, #200	; 0xc8
 8000514:	f001 fcfc 	bl	8001f10 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000518:	f000 f9b4 	bl	8000884 <ft5336_I2C_InitializeIfRequired>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	af00      	add	r7, sp, #0
 8000540:	4603      	mov	r3, r0
 8000542:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800054c:	2300      	movs	r3, #0
 800054e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000550:	f000 f998 	bl	8000884 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e010      	b.n	800057c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800055a:	88fb      	ldrh	r3, [r7, #6]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	21a8      	movs	r1, #168	; 0xa8
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fcb7 	bl	8001ed4 <TS_IO_Read>
 8000566:	4603      	mov	r3, r0
 8000568:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800056a:	7b7b      	ldrb	r3, [r7, #13]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b51      	cmp	r3, #81	; 0x51
 8000570:	d101      	bne.n	8000576 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	3301      	adds	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d802      	bhi.n	8000588 <ft5336_ReadID+0x4e>
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0e8      	beq.n	800055a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000588:	7b7b      	ldrb	r3, [r7, #13]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	b29b      	uxth	r3, r3
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f97e 	bl	80008a4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f932 	bl	8000814 <ft5336_TS_DisableIT>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fc81 	bl	8001ed4 <TS_IO_Read>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d901      	bls.n	80005ee <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <ft5336_TS_DetectTouch+0x50>)
 80005f4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80005f6:	4b04      	ldr	r3, [pc, #16]	; (8000608 <ft5336_TS_DetectTouch+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200014a8 	.word	0x200014a8

0800060c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800062e:	4b6d      	ldr	r3, [pc, #436]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 8000630:	789a      	ldrb	r2, [r3, #2]
 8000632:	4b6c      	ldr	r3, [pc, #432]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	429a      	cmp	r2, r3
 8000638:	f080 80cf 	bcs.w	80007da <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800063c:	4b69      	ldr	r3, [pc, #420]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	2b09      	cmp	r3, #9
 8000642:	d871      	bhi.n	8000728 <ft5336_TS_GetXY+0x11c>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <ft5336_TS_GetXY+0x40>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	08000675 	.word	0x08000675
 8000650:	08000687 	.word	0x08000687
 8000654:	08000699 	.word	0x08000699
 8000658:	080006ab 	.word	0x080006ab
 800065c:	080006bd 	.word	0x080006bd
 8000660:	080006cf 	.word	0x080006cf
 8000664:	080006e1 	.word	0x080006e1
 8000668:	080006f3 	.word	0x080006f3
 800066c:	08000705 	.word	0x08000705
 8000670:	08000717 	.word	0x08000717
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000674:	2304      	movs	r3, #4
 8000676:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000678:	2303      	movs	r3, #3
 800067a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800067c:	2306      	movs	r3, #6
 800067e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000680:	2305      	movs	r3, #5
 8000682:	753b      	strb	r3, [r7, #20]
      break;
 8000684:	e051      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000686:	230a      	movs	r3, #10
 8000688:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800068a:	2309      	movs	r3, #9
 800068c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800068e:	230c      	movs	r3, #12
 8000690:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000692:	230b      	movs	r3, #11
 8000694:	753b      	strb	r3, [r7, #20]
      break;
 8000696:	e048      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000698:	2310      	movs	r3, #16
 800069a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800069c:	230f      	movs	r3, #15
 800069e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006a0:	2312      	movs	r3, #18
 80006a2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006a4:	2311      	movs	r3, #17
 80006a6:	753b      	strb	r3, [r7, #20]
      break;
 80006a8:	e03f      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006aa:	2316      	movs	r3, #22
 80006ac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006ae:	2315      	movs	r3, #21
 80006b0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006b2:	2318      	movs	r3, #24
 80006b4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006b6:	2317      	movs	r3, #23
 80006b8:	753b      	strb	r3, [r7, #20]
      break;
 80006ba:	e036      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006bc:	231c      	movs	r3, #28
 80006be:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006c0:	231b      	movs	r3, #27
 80006c2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006c4:	231e      	movs	r3, #30
 80006c6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006c8:	231d      	movs	r3, #29
 80006ca:	753b      	strb	r3, [r7, #20]
      break;
 80006cc:	e02d      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80006ce:	2322      	movs	r3, #34	; 0x22
 80006d0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80006d2:	2321      	movs	r3, #33	; 0x21
 80006d4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80006d6:	2324      	movs	r3, #36	; 0x24
 80006d8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80006da:	2323      	movs	r3, #35	; 0x23
 80006dc:	753b      	strb	r3, [r7, #20]
      break;
 80006de:	e024      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80006e0:	2328      	movs	r3, #40	; 0x28
 80006e2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80006e4:	2327      	movs	r3, #39	; 0x27
 80006e6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80006e8:	232a      	movs	r3, #42	; 0x2a
 80006ea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80006ec:	2329      	movs	r3, #41	; 0x29
 80006ee:	753b      	strb	r3, [r7, #20]
      break;
 80006f0:	e01b      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80006f2:	232e      	movs	r3, #46	; 0x2e
 80006f4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80006f6:	232d      	movs	r3, #45	; 0x2d
 80006f8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80006fa:	2330      	movs	r3, #48	; 0x30
 80006fc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80006fe:	232f      	movs	r3, #47	; 0x2f
 8000700:	753b      	strb	r3, [r7, #20]
      break;
 8000702:	e012      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000704:	2334      	movs	r3, #52	; 0x34
 8000706:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000708:	2333      	movs	r3, #51	; 0x33
 800070a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800070c:	2336      	movs	r3, #54	; 0x36
 800070e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000710:	2335      	movs	r3, #53	; 0x35
 8000712:	753b      	strb	r3, [r7, #20]
      break;
 8000714:	e009      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000716:	233a      	movs	r3, #58	; 0x3a
 8000718:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800071a:	2339      	movs	r3, #57	; 0x39
 800071c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800071e:	233c      	movs	r3, #60	; 0x3c
 8000720:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000722:	233b      	movs	r3, #59	; 0x3b
 8000724:	753b      	strb	r3, [r7, #20]
      break;
 8000726:	e000      	b.n	800072a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000728:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800072a:	89fb      	ldrh	r3, [r7, #14]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	7dfa      	ldrb	r2, [r7, #23]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fbce 	bl	8001ed4 <TS_IO_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800073c:	7cfb      	ldrb	r3, [r7, #19]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	b29a      	uxth	r2, r3
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000744:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	7dba      	ldrb	r2, [r7, #22]
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fbc0 	bl	8001ed4 <TS_IO_Read>
 8000754:	4603      	mov	r3, r0
 8000756:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000758:	7cfb      	ldrb	r3, [r7, #19]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000762:	b21a      	sxth	r2, r3
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000772:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800077c:	89fb      	ldrh	r3, [r7, #14]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	7d7a      	ldrb	r2, [r7, #21]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fba5 	bl	8001ed4 <TS_IO_Read>
 800078a:	4603      	mov	r3, r0
 800078c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800078e:	7cfb      	ldrb	r3, [r7, #19]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	b29a      	uxth	r2, r3
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 8000796:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	7d3a      	ldrb	r2, [r7, #20]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fb97 	bl	8001ed4 <TS_IO_Read>
 80007a6:	4603      	mov	r3, r0
 80007a8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007c4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <ft5336_TS_GetXY+0x1dc>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 80007d0:	789b      	ldrb	r3, [r3, #2]
 80007d2:	3301      	adds	r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <ft5336_TS_GetXY+0x1d8>)
 80007d8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200014a8 	.word	0x200014a8
 80007e8:	200014ac 	.word	0x200014ac

080007ec <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	21a4      	movs	r1, #164	; 0xa4
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fb4a 	bl	8001ea0 <TS_IO_Write>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	21a4      	movs	r1, #164	; 0xa4
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fb36 	bl	8001ea0 <TS_IO_Write>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000872:	781b      	ldrb	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	200014a8 	.word	0x200014a8

08000884 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000888:	f7ff fff0 	bl	800086c <ft5336_Get_I2C_InitializedStatus>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d104      	bne.n	800089c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000892:	f001 fafb 	bl	8001e8c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000896:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
  }
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200014a8 	.word	0x200014a8

080008a4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80008b2:	68fb      	ldr	r3, [r7, #12]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f002 fe8a 	bl	80035de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f8a7 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f000 ff41 	bl	8001754 <MX_GPIO_Init>
  MX_ADC3_Init();
 80008d2:	f000 f9a5 	bl	8000c20 <MX_ADC3_Init>
  MX_I2C1_Init();
 80008d6:	f000 fa51 	bl	8000d7c <MX_I2C1_Init>
  MX_I2C3_Init();
 80008da:	f000 fa8f 	bl	8000dfc <MX_I2C3_Init>
  MX_LTDC_Init();
 80008de:	f000 facd 	bl	8000e7c <MX_LTDC_Init>
  MX_RTC_Init();
 80008e2:	f000 fb4d 	bl	8000f80 <MX_RTC_Init>
  MX_SPI2_Init();
 80008e6:	f000 fbf1 	bl	80010cc <MX_SPI2_Init>
  MX_TIM1_Init();
 80008ea:	f000 fc2d 	bl	8001148 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008ee:	f000 fc7f 	bl	80011f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008f2:	f000 fccb 	bl	800128c <MX_TIM3_Init>
  MX_TIM5_Init();
 80008f6:	f000 fd57 	bl	80013a8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008fa:	f000 fda3 	bl	8001444 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80008fe:	f000 fe7b 	bl	80015f8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000902:	f000 fea9 	bl	8001658 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000906:	f000 f939 	bl	8000b7c <MX_ADC1_Init>
  MX_DAC_Init();
 800090a:	f000 f9db 	bl	8000cc4 <MX_DAC_Init>
  MX_UART7_Init();
 800090e:	f000 fe43 	bl	8001598 <MX_UART7_Init>
  MX_FMC_Init();
 8000912:	f000 fed1 	bl	80016b8 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000916:	f000 f9ff 	bl	8000d18 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800091a:	f001 fb05 	bl	8001f28 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800091e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000922:	2000      	movs	r0, #0
 8000924:	f001 fb98 	bl	8002058 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000928:	f001 fb6e 	bl	8002008 <BSP_LCD_GetXSize>
 800092c:	4604      	mov	r4, r0
 800092e:	f001 fb7f 	bl	8002030 <BSP_LCD_GetYSize>
 8000932:	4603      	mov	r3, r0
 8000934:	fb03 f304 	mul.w	r3, r3, r4
 8000938:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4619      	mov	r1, r3
 8000940:	2001      	movs	r0, #1
 8000942:	f001 fb89 	bl	8002058 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8000946:	f001 fce5 	bl	8002314 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f001 fbe4 	bl	8002118 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f001 fc3c 	bl	80021d0 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8000958:	482a      	ldr	r0, [pc, #168]	; (8000a04 <main+0x144>)
 800095a:	f001 fc1f 	bl	800219c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800095e:	482a      	ldr	r0, [pc, #168]	; (8000a08 <main+0x148>)
 8000960:	f001 fbea 	bl	8002138 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f001 fbfe 	bl	8002168 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800096c:	f001 fb4c 	bl	8002008 <BSP_LCD_GetXSize>
 8000970:	4603      	mov	r3, r0
 8000972:	b29c      	uxth	r4, r3
 8000974:	f001 fb5c 	bl	8002030 <BSP_LCD_GetYSize>
 8000978:	4603      	mov	r3, r0
 800097a:	b29b      	uxth	r3, r3
 800097c:	4619      	mov	r1, r3
 800097e:	4620      	mov	r0, r4
 8000980:	f001 ffde 	bl	8002940 <BSP_TS_Init>
  HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000984:	2201      	movs	r2, #1
 8000986:	4921      	ldr	r1, [pc, #132]	; (8000a0c <main+0x14c>)
 8000988:	4821      	ldr	r0, [pc, #132]	; (8000a10 <main+0x150>)
 800098a:	f008 fbc7 	bl	800911c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of affichage */
  osMutexDef(affichage);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  affichageHandle = osMutexCreate(osMutex(affichage));
 8000996:	463b      	mov	r3, r7
 8000998:	4618      	mov	r0, r3
 800099a:	f009 fca0 	bl	800a2de <osMutexCreate>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <main+0x154>)
 80009a2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  //osKernelStart();

  for(int j=0;j<54;j++){
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e027      	b.n	80009fa <main+0x13a>
	  for(int i=0;i<96;i++){
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	e01e      	b.n	80009ee <main+0x12e>
		  if(map[j][i] == 1)BSP_LCD_FillRect(i*5, j*5, 5, 5);
 80009b0:	4919      	ldr	r1, [pc, #100]	; (8000a18 <main+0x158>)
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	015b      	lsls	r3, r3, #5
 80009bc:	18ca      	adds	r2, r1, r3
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d10f      	bne.n	80009e8 <main+0x128>
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	4413      	add	r3, r2
 80009d2:	b298      	uxth	r0, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	0092      	lsls	r2, r2, #2
 80009dc:	4413      	add	r3, r2
 80009de:	b299      	uxth	r1, r3
 80009e0:	2305      	movs	r3, #5
 80009e2:	2205      	movs	r2, #5
 80009e4:	f001 fc1c 	bl	8002220 <BSP_LCD_FillRect>
	  for(int i=0;i<96;i++){
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3301      	adds	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b5f      	cmp	r3, #95	; 0x5f
 80009f2:	dddd      	ble.n	80009b0 <main+0xf0>
  for(int j=0;j<54;j++){
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b35      	cmp	r3, #53	; 0x35
 80009fe:	ddd4      	ble.n	80009aa <main+0xea>
  }

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x140>
 8000a02:	bf00      	nop
 8000a04:	20001470 	.word	0x20001470
 8000a08:	ff0000ff 	.word	0xff0000ff
 8000a0c:	20005978 	.word	0x20005978
 8000a10:	20005728 	.word	0x20005728
 8000a14:	200056d8 	.word	0x200056d8
 8000a18:	20000028 	.word	0x20000028

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0b4      	sub	sp, #208	; 0xd0
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a26:	2230      	movs	r2, #48	; 0x30
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00a fffc 	bl	800ba28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2284      	movs	r2, #132	; 0x84
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00a ffed 	bl	800ba28 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a4e:	f005 fb37 	bl	80060c0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b47      	ldr	r3, [pc, #284]	; (8000b70 <SystemClock_Config+0x154>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a46      	ldr	r2, [pc, #280]	; (8000b70 <SystemClock_Config+0x154>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b44      	ldr	r3, [pc, #272]	; (8000b70 <SystemClock_Config+0x154>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6a:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <SystemClock_Config+0x158>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a41      	ldr	r2, [pc, #260]	; (8000b74 <SystemClock_Config+0x158>)
 8000a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <SystemClock_Config+0x158>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a82:	2309      	movs	r3, #9
 8000a84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000aa4:	2319      	movs	r3, #25
 8000aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000aaa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ab8:	2309      	movs	r3, #9
 8000aba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fb5c 	bl	8006180 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ace:	f001 f881 	bl	8001bd4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ad2:	f005 fb05 	bl	80060e0 <HAL_PWREx_EnableOverDrive>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000adc:	f001 f87a 	bl	8001bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b06:	2106      	movs	r1, #6
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fddd 	bl	80066c8 <HAL_RCC_ClockConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000b14:	f001 f85e 	bl	8001bd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <SystemClock_Config+0x15c>)
 8000b1a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000b1c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b20:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000b22:	2305      	movs	r3, #5
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000b42:	2300      	movs	r3, #0
 8000b44:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4618      	mov	r0, r3
 8000b58:	f005 ffbe 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000b62:	f001 f837 	bl	8001bd4 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	37d0      	adds	r7, #208	; 0xd0
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000
 8000b78:	00015868 	.word	0x00015868

08000b7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000b90:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <MX_ADC1_Init+0x9c>)
 8000b92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <MX_ADC1_Init+0xa0>)
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bde:	f002 fd4f 	bl	8003680 <HAL_ADC_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000be8:	f000 fff4 	bl	8001bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_ADC1_Init+0x98>)
 8000bfe:	f002 fd83 	bl	8003708 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c08:	f000 ffe4 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20005690 	.word	0x20005690
 8000c18:	40012000 	.word	0x40012000
 8000c1c:	0f000001 	.word	0x0f000001

08000c20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <MX_ADC3_Init+0x9c>)
 8000c36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <MX_ADC3_Init+0xa0>)
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000c82:	f002 fcfd 	bl	8003680 <HAL_ADC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c8c:	f000 ffa2 	bl	8001bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c90:	2306      	movs	r3, #6
 8000c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_ADC3_Init+0x98>)
 8000ca2:	f002 fd31 	bl	8003708 <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000cac:	f000 ff92 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200056e0 	.word	0x200056e0
 8000cbc:	40012200 	.word	0x40012200
 8000cc0:	0f000001 	.word	0x0f000001

08000cc4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_DAC_Init+0x4c>)
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <MX_DAC_Init+0x50>)
 8000cd6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_DAC_Init+0x4c>)
 8000cda:	f003 f83b 	bl	8003d54 <HAL_DAC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ce4:	f000 ff76 	bl	8001bd4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_DAC_Init+0x4c>)
 8000cf8:	f003 f8b2 	bl	8003e60 <HAL_DAC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d02:	f000 ff67 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200057b0 	.word	0x200057b0
 8000d14:	40007400 	.word	0x40007400

08000d18 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <MX_DMA2D_Init+0x60>)
 8000d20:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d4e:	f003 fb31 	bl	80043b4 <HAL_DMA2D_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d58:	f000 ff3c 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d60:	f003 fc86 	bl	8004670 <HAL_DMA2D_ConfigLayer>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d6a:	f000 ff33 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200058b8 	.word	0x200058b8
 8000d78:	4002b000 	.word	0x4002b000

08000d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <MX_I2C1_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <MX_I2C1_Init+0x7c>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db6:	480e      	ldr	r0, [pc, #56]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000db8:	f004 f85a 	bl	8004e70 <HAL_I2C_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc2:	f000 ff07 	bl	8001bd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4809      	ldr	r0, [pc, #36]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000dca:	f004 fd69 	bl	80058a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd4:	f000 fefe 	bl	8001bd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_I2C1_Init+0x74>)
 8000ddc:	f004 fdab 	bl	8005936 <HAL_I2CEx_ConfigDigitalFilter>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 fef5 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20005504 	.word	0x20005504
 8000df4:	40005400 	.word	0x40005400
 8000df8:	00c0eaff 	.word	0x00c0eaff

08000dfc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <MX_I2C3_Init+0x78>)
 8000e04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <MX_I2C3_Init+0x7c>)
 8000e0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e36:	480e      	ldr	r0, [pc, #56]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e38:	f004 f81a 	bl	8004e70 <HAL_I2C_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e42:	f000 fec7 	bl	8001bd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e4a:	f004 fd29 	bl	80058a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e54:	f000 febe 	bl	8001bd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e5c:	f004 fd6b 	bl	8005936 <HAL_I2CEx_ConfigDigitalFilter>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e66:	f000 feb5 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20005384 	.word	0x20005384
 8000e74:	40005c00 	.word	0x40005c00
 8000e78:	00c0eaff 	.word	0x00c0eaff

08000e7c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2234      	movs	r2, #52	; 0x34
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00a fdcd 	bl	800ba28 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000e90:	4a3a      	ldr	r2, [pc, #232]	; (8000f7c <MX_LTDC_Init+0x100>)
 8000e92:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e94:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000eae:	2228      	movs	r2, #40	; 0x28
 8000eb0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000eb2:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000eb4:	2209      	movs	r2, #9
 8000eb6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000eba:	2235      	movs	r2, #53	; 0x35
 8000ebc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ec0:	220b      	movs	r2, #11
 8000ec2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ec6:	f240 2215 	movw	r2, #533	; 0x215
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ece:	f240 121b 	movw	r2, #283	; 0x11b
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ed6:	f240 2235 	movw	r2, #565	; 0x235
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ede:	f240 121d 	movw	r2, #285	; 0x11d
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000efc:	481e      	ldr	r0, [pc, #120]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000efe:	f004 fd67 	bl	80059d0 <HAL_LTDC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f08:	f000 fe64 	bl	8001bd4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000f10:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f14:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000f1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f1e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f20:	2302      	movs	r3, #2
 8000f22:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f24:	23ff      	movs	r3, #255	; 0xff
 8000f26:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f30:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f32:	2307      	movs	r3, #7
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f36:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000f3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f42:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_LTDC_Init+0xfc>)
 8000f62:	f004 fec7 	bl	8005cf4 <HAL_LTDC_ConfigLayer>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000f6c:	f000 fe32 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3738      	adds	r7, #56	; 0x38
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200055e8 	.word	0x200055e8
 8000f7c:	40016800 	.word	0x40016800

08000f80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b092      	sub	sp, #72	; 0x48
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
 8000f96:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	222c      	movs	r2, #44	; 0x2c
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f00a fd40 	bl	800ba28 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <MX_RTC_Init+0x144>)
 8000faa:	4a47      	ldr	r2, [pc, #284]	; (80010c8 <MX_RTC_Init+0x148>)
 8000fac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fae:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <MX_RTC_Init+0x144>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <MX_RTC_Init+0x144>)
 8000fb6:	227f      	movs	r2, #127	; 0x7f
 8000fb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fba:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <MX_RTC_Init+0x144>)
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fc0:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <MX_RTC_Init+0x144>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	; (80010c4 <MX_RTC_Init+0x144>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fcc:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <MX_RTC_Init+0x144>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fd2:	483c      	ldr	r0, [pc, #240]	; (80010c4 <MX_RTC_Init+0x144>)
 8000fd4:	f006 f970 	bl	80072b8 <HAL_RTC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000fde:	f000 fdf9 	bl	8001bd4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000fe2:	2311      	movs	r3, #17
 8000fe4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 15;
 8000fe8:	230f      	movs	r3, #15
 8000fea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	482f      	ldr	r0, [pc, #188]	; (80010c4 <MX_RTC_Init+0x144>)
 8001006:	f006 f9e9 	bl	80073dc <HAL_RTC_SetTime>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001010:	f000 fde0 	bl	8001bd4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001014:	2301      	movs	r3, #1
 8001016:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800101a:	2301      	movs	r3, #1
 800101c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800102c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	4823      	ldr	r0, [pc, #140]	; (80010c4 <MX_RTC_Init+0x144>)
 8001036:	f006 fa8f 	bl	8007558 <HAL_RTC_SetDate>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001040:	f000 fdc8 	bl	8001bd4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_RTC_Init+0x144>)
 800107c:	f006 fb14 	bl	80076a8 <HAL_RTC_SetAlarm>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001086:	f000 fda5 	bl	8001bd4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800108a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	480b      	ldr	r0, [pc, #44]	; (80010c4 <MX_RTC_Init+0x144>)
 8001098:	f006 fb06 	bl	80076a8 <HAL_RTC_SetAlarm>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80010a2:	f000 fd97 	bl	8001bd4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80010a6:	2202      	movs	r2, #2
 80010a8:	2100      	movs	r1, #0
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_RTC_Init+0x144>)
 80010ac:	f006 fc86 	bl	80079bc <HAL_RTCEx_SetTimeStamp>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80010b6:	f000 fd8d 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3748      	adds	r7, #72	; 0x48
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200057c8 	.word	0x200057c8
 80010c8:	40002800 	.word	0x40002800

080010cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_SPI2_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_SPI2_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_SPI2_Init+0x74>)
 80010d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_SPI2_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_SPI2_Init+0x74>)
 80010e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_SPI2_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_SPI2_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_SPI2_Init+0x74>)
 80010fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_SPI2_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_SPI2_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_SPI2_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_SPI2_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_SPI2_Init+0x74>)
 800111a:	2207      	movs	r2, #7
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_SPI2_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_SPI2_Init+0x74>)
 8001126:	2208      	movs	r2, #8
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_SPI2_Init+0x74>)
 800112c:	f006 fd1b 	bl	8007b66 <HAL_SPI_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 fd4d 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200053d0 	.word	0x200053d0
 8001144:	40003800 	.word	0x40003800

08001148 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_TIM1_Init+0xa0>)
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <MX_TIM1_Init+0xa4>)
 800116a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM1_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_TIM1_Init+0xa0>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_TIM1_Init+0xa0>)
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_TIM1_Init+0xa0>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_TIM1_Init+0xa0>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_TIM1_Init+0xa0>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <MX_TIM1_Init+0xa0>)
 8001194:	f006 fd92 	bl	8007cbc <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800119e:	f000 fd19 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <MX_TIM1_Init+0xa0>)
 80011b0:	f007 f8e4 	bl	800837c <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011ba:	f000 fd0b 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_TIM1_Init+0xa0>)
 80011d0:	f007 fe2c 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011da:	f000 fcfb 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200057e8 	.word	0x200057e8
 80011ec:	40010000 	.word	0x40010000

080011f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_TIM2_Init+0x98>)
 8001210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001214:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_TIM2_Init+0x98>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM2_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_TIM2_Init+0x98>)
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_TIM2_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM2_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <MX_TIM2_Init+0x98>)
 8001238:	f006 fd40 	bl	8007cbc <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001242:	f000 fcc7 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_TIM2_Init+0x98>)
 8001254:	f007 f892 	bl	800837c <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800125e:	f000 fcb9 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_TIM2_Init+0x98>)
 8001270:	f007 fddc 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800127a:	f000 fcab 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200058f8 	.word	0x200058f8

0800128c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	; 0x50
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
 80012ca:	615a      	str	r2, [r3, #20]
 80012cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <MX_TIM3_Init+0x114>)
 80012d0:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <MX_TIM3_Init+0x118>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <MX_TIM3_Init+0x114>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <MX_TIM3_Init+0x114>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <MX_TIM3_Init+0x114>)
 80012e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_TIM3_Init+0x114>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <MX_TIM3_Init+0x114>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f4:	482a      	ldr	r0, [pc, #168]	; (80013a0 <MX_TIM3_Init+0x114>)
 80012f6:	f006 fce1 	bl	8007cbc <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001300:	f000 fc68 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001308:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800130e:	4619      	mov	r1, r3
 8001310:	4823      	ldr	r0, [pc, #140]	; (80013a0 <MX_TIM3_Init+0x114>)
 8001312:	f007 f833 	bl	800837c <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800131c:	f000 fc5a 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001320:	481f      	ldr	r0, [pc, #124]	; (80013a0 <MX_TIM3_Init+0x114>)
 8001322:	f006 fd9b 	bl	8007e5c <HAL_TIM_PWM_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 800132c:	f000 fc52 	bl	8001bd4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001334:	2300      	movs	r3, #0
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_TIM3_Init+0x114>)
 8001340:	f007 f8e2 	bl	8008508 <HAL_TIM_SlaveConfigSynchro>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 800134a:	f000 fc43 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4619      	mov	r1, r3
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <MX_TIM3_Init+0x114>)
 800135e:	f007 fd65 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001368:	f000 fc34 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM3_Init+0x114>)
 8001384:	f006 feea 	bl	800815c <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800138e:	f000 fc21 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM3_Init+0x114>)
 8001394:	f001 fe88 	bl	80030a8 <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3750      	adds	r7, #80	; 0x50
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000559c 	.word	0x2000559c
 80013a4:	40000400 	.word	0x40000400

080013a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_TIM5_Init+0x94>)
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <MX_TIM5_Init+0x98>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_TIM5_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_TIM5_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_TIM5_Init+0x94>)
 80013da:	f04f 32ff 	mov.w	r2, #4294967295
 80013de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_TIM5_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_TIM5_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <MX_TIM5_Init+0x94>)
 80013ee:	f006 fc65 	bl	8007cbc <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013f8:	f000 fbec 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_TIM5_Init+0x94>)
 800140a:	f006 ffb7 	bl	800837c <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fbde 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_TIM5_Init+0x94>)
 8001426:	f007 fd01 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001430:	f000 fbd0 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20005550 	.word	0x20005550
 8001440:	40000c00 	.word	0x40000c00

08001444 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b09a      	sub	sp, #104	; 0x68
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	222c      	movs	r2, #44	; 0x2c
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f00a fad2 	bl	800ba28 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <MX_TIM8_Init+0x14c>)
 8001486:	4a43      	ldr	r2, [pc, #268]	; (8001594 <MX_TIM8_Init+0x150>)
 8001488:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <MX_TIM8_Init+0x14c>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <MX_TIM8_Init+0x14c>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001496:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <MX_TIM8_Init+0x14c>)
 8001498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <MX_TIM8_Init+0x14c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <MX_TIM8_Init+0x14c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <MX_TIM8_Init+0x14c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014b0:	4837      	ldr	r0, [pc, #220]	; (8001590 <MX_TIM8_Init+0x14c>)
 80014b2:	f006 fc03 	bl	8007cbc <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f000 fb8a 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ca:	4619      	mov	r1, r3
 80014cc:	4830      	ldr	r0, [pc, #192]	; (8001590 <MX_TIM8_Init+0x14c>)
 80014ce:	f006 ff55 	bl	800837c <HAL_TIM_ConfigClockSource>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80014d8:	f000 fb7c 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014dc:	482c      	ldr	r0, [pc, #176]	; (8001590 <MX_TIM8_Init+0x14c>)
 80014de:	f006 fcbd 	bl	8007e5c <HAL_TIM_PWM_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80014e8:	f000 fb74 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014fc:	4619      	mov	r1, r3
 80014fe:	4824      	ldr	r0, [pc, #144]	; (8001590 <MX_TIM8_Init+0x14c>)
 8001500:	f007 fc94 	bl	8008e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800150a:	f000 fb63 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150e:	2360      	movs	r3, #96	; 0x60
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001516:	2300      	movs	r3, #0
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152a:	220c      	movs	r2, #12
 800152c:	4619      	mov	r1, r3
 800152e:	4818      	ldr	r0, [pc, #96]	; (8001590 <MX_TIM8_Init+0x14c>)
 8001530:	f006 fe14 	bl	800815c <HAL_TIM_PWM_ConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800153a:	f000 fb4b 	bl	8001bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001556:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <MX_TIM8_Init+0x14c>)
 8001574:	f007 fce8 	bl	8008f48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800157e:	f000 fb29 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <MX_TIM8_Init+0x14c>)
 8001584:	f001 fd90 	bl	80030a8 <HAL_TIM_MspPostInit>

}
 8001588:	bf00      	nop
 800158a:	3768      	adds	r7, #104	; 0x68
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200054b8 	.word	0x200054b8
 8001594:	40010400 	.word	0x40010400

08001598 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_UART7_Init+0x58>)
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <MX_UART7_Init+0x5c>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_UART7_Init+0x58>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_UART7_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_UART7_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_UART7_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_UART7_Init+0x58>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_UART7_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_UART7_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_UART7_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_UART7_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_UART7_Init+0x58>)
 80015dc:	f007 fd50 	bl	8009080 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80015e6:	f000 faf5 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20005434 	.word	0x20005434
 80015f4:	40007800 	.word	0x40007800

080015f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USART1_UART_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <MX_USART1_UART_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800163c:	f007 fd20 	bl	8009080 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 fac5 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20005728 	.word	0x20005728
 8001654:	40011000 	.word	0x40011000

08001658 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_USART6_UART_Init+0x5c>)
 8001660:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART6_UART_Init+0x58>)
 800169c:	f007 fcf0 	bl	8009080 <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016a6:	f000 fa95 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20005834 	.word	0x20005834
 80016b4:	40011400 	.word	0x40011400

080016b8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_FMC_Init+0x94>)
 80016d2:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <MX_FMC_Init+0x98>)
 80016d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_FMC_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_FMC_Init+0x94>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_FMC_Init+0x94>)
 80016e4:	2204      	movs	r2, #4
 80016e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_FMC_Init+0x94>)
 80016ea:	2210      	movs	r2, #16
 80016ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_FMC_Init+0x94>)
 80016f0:	2240      	movs	r2, #64	; 0x40
 80016f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_FMC_Init+0x94>)
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_FMC_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_FMC_Init+0x94>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_FMC_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_FMC_Init+0x94>)
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001712:	2310      	movs	r3, #16
 8001714:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001716:	2310      	movs	r3, #16
 8001718:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800171a:	2310      	movs	r3, #16
 800171c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800171e:	2310      	movs	r3, #16
 8001720:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001722:	2310      	movs	r3, #16
 8001724:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001726:	2310      	movs	r3, #16
 8001728:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800172a:	2310      	movs	r3, #16
 800172c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_FMC_Init+0x94>)
 8001734:	f006 f998 	bl	8007a68 <HAL_SDRAM_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800173e:	f000 fa49 	bl	8001bd4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001742:	bf00      	nop
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20005944 	.word	0x20005944
 8001750:	a0000140 	.word	0xa0000140

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	; 0x40
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800176a:	4bb0      	ldr	r3, [pc, #704]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4aaf      	ldr	r2, [pc, #700]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4bad      	ldr	r3, [pc, #692]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001780:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	4baa      	ldr	r3, [pc, #680]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4aa9      	ldr	r2, [pc, #676]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4ba7      	ldr	r3, [pc, #668]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	4ba4      	ldr	r3, [pc, #656]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4aa3      	ldr	r2, [pc, #652]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4ba1      	ldr	r3, [pc, #644]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b2:	4b9e      	ldr	r3, [pc, #632]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a9d      	ldr	r2, [pc, #628]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b9b      	ldr	r3, [pc, #620]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80017ca:	4b98      	ldr	r3, [pc, #608]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a97      	ldr	r2, [pc, #604]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b95      	ldr	r3, [pc, #596]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	4b92      	ldr	r3, [pc, #584]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a91      	ldr	r2, [pc, #580]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b8f      	ldr	r3, [pc, #572]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017fa:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a8b      	ldr	r2, [pc, #556]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b89      	ldr	r3, [pc, #548]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001812:	4b86      	ldr	r3, [pc, #536]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a85      	ldr	r2, [pc, #532]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b83      	ldr	r3, [pc, #524]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b7d      	ldr	r3, [pc, #500]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001842:	4b7a      	ldr	r3, [pc, #488]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a79      	ldr	r2, [pc, #484]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	4b74      	ldr	r3, [pc, #464]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a73      	ldr	r2, [pc, #460]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b71      	ldr	r3, [pc, #452]	; (8001a2c <MX_GPIO_Init+0x2d8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2160      	movs	r1, #96	; 0x60
 8001876:	486e      	ldr	r0, [pc, #440]	; (8001a30 <MX_GPIO_Init+0x2dc>)
 8001878:	f003 fae0 	bl	8004e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2120      	movs	r1, #32
 8001880:	486c      	ldr	r0, [pc, #432]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 8001882:	f003 fadb 	bl	8004e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2108      	movs	r1, #8
 800188a:	486a      	ldr	r0, [pc, #424]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 800188c:	f003 fad6 	bl	8004e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2108      	movs	r1, #8
 8001894:	4868      	ldr	r0, [pc, #416]	; (8001a38 <MX_GPIO_Init+0x2e4>)
 8001896:	f003 fad1 	bl	8004e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	2108      	movs	r1, #8
 800189e:	4867      	ldr	r0, [pc, #412]	; (8001a3c <MX_GPIO_Init+0x2e8>)
 80018a0:	f003 facc 	bl	8004e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018aa:	4863      	ldr	r0, [pc, #396]	; (8001a38 <MX_GPIO_Init+0x2e4>)
 80018ac:	f003 fac6 	bl	8004e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80018b0:	2200      	movs	r2, #0
 80018b2:	f645 6140 	movw	r1, #24128	; 0x5e40
 80018b6:	4862      	ldr	r0, [pc, #392]	; (8001a40 <MX_GPIO_Init+0x2ec>)
 80018b8:	f003 fac0 	bl	8004e3c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	2108      	movs	r1, #8
 80018c0:	4860      	ldr	r0, [pc, #384]	; (8001a44 <MX_GPIO_Init+0x2f0>)
 80018c2:	f003 fabb 	bl	8004e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018c6:	2308      	movs	r3, #8
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4855      	ldr	r0, [pc, #340]	; (8001a30 <MX_GPIO_Init+0x2dc>)
 80018da:	f002 fff7 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80018de:	f643 0323 	movw	r3, #14371	; 0x3823
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018f0:	230a      	movs	r3, #10
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f8:	4619      	mov	r1, r3
 80018fa:	4853      	ldr	r0, [pc, #332]	; (8001a48 <MX_GPIO_Init+0x2f4>)
 80018fc:	f002 ffe6 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001900:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001912:	4619      	mov	r1, r3
 8001914:	484d      	ldr	r0, [pc, #308]	; (8001a4c <MX_GPIO_Init+0x2f8>)
 8001916:	f002 ffd9 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 800191a:	2360      	movs	r3, #96	; 0x60
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	483f      	ldr	r0, [pc, #252]	; (8001a30 <MX_GPIO_Init+0x2dc>)
 8001932:	f002 ffcb 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	4841      	ldr	r0, [pc, #260]	; (8001a50 <MX_GPIO_Init+0x2fc>)
 800194c:	f002 ffbe 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001950:	2340      	movs	r3, #64	; 0x40
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001954:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <MX_GPIO_Init+0x300>)
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001960:	4619      	mov	r1, r3
 8001962:	4834      	ldr	r0, [pc, #208]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 8001964:	f002 ffb2 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001968:	2328      	movs	r3, #40	; 0x28
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197c:	4619      	mov	r1, r3
 800197e:	482d      	ldr	r0, [pc, #180]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 8001980:	f002 ffa4 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001984:	f241 0308 	movw	r3, #4104	; 0x1008
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	4826      	ldr	r0, [pc, #152]	; (8001a38 <MX_GPIO_Init+0x2e4>)
 800199e:	f002 ff95 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	4828      	ldr	r0, [pc, #160]	; (8001a58 <MX_GPIO_Init+0x304>)
 80019b8:	f002 ff88 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019bc:	2308      	movs	r3, #8
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	481a      	ldr	r0, [pc, #104]	; (8001a3c <MX_GPIO_Init+0x2e8>)
 80019d4:	f002 ff7a 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019d8:	2310      	movs	r3, #16
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4812      	ldr	r0, [pc, #72]	; (8001a34 <MX_GPIO_Init+0x2e0>)
 80019ec:	f002 ff6e 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80019f0:	f248 0304 	movw	r3, #32772	; 0x8004
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a02:	4619      	mov	r1, r3
 8001a04:	480e      	ldr	r0, [pc, #56]	; (8001a40 <MX_GPIO_Init+0x2ec>)
 8001a06:	f002 ff61 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a0a:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a20:	4619      	mov	r1, r3
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <MX_GPIO_Init+0x2ec>)
 8001a24:	f002 ff52 	bl	80048cc <HAL_GPIO_Init>
 8001a28:	e018      	b.n	8001a5c <MX_GPIO_Init+0x308>
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40022800 	.word	0x40022800
 8001a40:	40021c00 	.word	0x40021c00
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40022400 	.word	0x40022400
 8001a54:	10120000 	.word	0x10120000
 8001a58:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <MX_GPIO_Init+0x3c0>)
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4829      	ldr	r0, [pc, #164]	; (8001b18 <MX_GPIO_Init+0x3c4>)
 8001a72:	f002 ff2b 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001a76:	2310      	movs	r3, #16
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a86:	230a      	movs	r3, #10
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4822      	ldr	r0, [pc, #136]	; (8001b1c <MX_GPIO_Init+0x3c8>)
 8001a92:	f002 ff1b 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001a96:	2384      	movs	r3, #132	; 0x84
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481d      	ldr	r0, [pc, #116]	; (8001b20 <MX_GPIO_Init+0x3cc>)
 8001aaa:	f002 ff0f 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001aae:	2305      	movs	r3, #5
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001abe:	230a      	movs	r3, #10
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4816      	ldr	r0, [pc, #88]	; (8001b24 <MX_GPIO_Init+0x3d0>)
 8001aca:	f002 feff 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001ace:	2308      	movs	r3, #8
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <MX_GPIO_Init+0x3cc>)
 8001ae6:	f002 fef1 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001aea:	2328      	movs	r3, #40	; 0x28
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001afa:	230a      	movs	r3, #10
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b02:	4619      	mov	r1, r3
 8001b04:	4808      	ldr	r0, [pc, #32]	; (8001b28 <MX_GPIO_Init+0x3d4>)
 8001b06:	f002 fee1 	bl	80048cc <HAL_GPIO_Init>

}
 8001b0a:	bf00      	nop
 8001b0c:	3740      	adds	r7, #64	; 0x40
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	10120000 	.word	0x10120000
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021c00 	.word	0x40021c00
 8001b20:	40021800 	.word	0x40021800
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020000 	.word	0x40020000

08001b2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	uint8_t Message[2];

	if(rxbuffer[0]=='a') HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,1);
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_UART_RxCpltCallback+0x74>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b61      	cmp	r3, #97	; 0x61
 8001b3a:	d104      	bne.n	8001b46 <HAL_UART_RxCpltCallback+0x1a>
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2108      	movs	r1, #8
 8001b40:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <HAL_UART_RxCpltCallback+0x78>)
 8001b42:	f003 f97b 	bl	8004e3c <HAL_GPIO_WritePin>
	if(rxbuffer[0]=='e') HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_UART_RxCpltCallback+0x74>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b65      	cmp	r3, #101	; 0x65
 8001b4c:	d104      	bne.n	8001b58 <HAL_UART_RxCpltCallback+0x2c>
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2108      	movs	r1, #8
 8001b52:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <HAL_UART_RxCpltCallback+0x78>)
 8001b54:	f003 f972 	bl	8004e3c <HAL_GPIO_WritePin>

	if((rxbuffer[0] == 'z') || (rxbuffer[0] == 'q') || (rxbuffer[0] == 's') || (rxbuffer[0] == 'd')){
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_UART_RxCpltCallback+0x74>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b7a      	cmp	r3, #122	; 0x7a
 8001b5e:	d00b      	beq.n	8001b78 <HAL_UART_RxCpltCallback+0x4c>
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_UART_RxCpltCallback+0x74>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b71      	cmp	r3, #113	; 0x71
 8001b66:	d007      	beq.n	8001b78 <HAL_UART_RxCpltCallback+0x4c>
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_UART_RxCpltCallback+0x74>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b73      	cmp	r3, #115	; 0x73
 8001b6e:	d003      	beq.n	8001b78 <HAL_UART_RxCpltCallback+0x4c>
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_UART_RxCpltCallback+0x74>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d10a      	bne.n	8001b8e <HAL_UART_RxCpltCallback+0x62>
		Message[0] = rxbuffer[0];
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_UART_RxCpltCallback+0x74>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	733b      	strb	r3, [r7, #12]
		xQueueSendFromISR(myQueueU2HHandle, &Message, 0);
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_UART_RxCpltCallback+0x7c>)
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	f107 010c 	add.w	r1, r7, #12
 8001b86:	2300      	movs	r3, #0
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f008 ff07 	bl	800a99c <xQueueGenericSendFromISR>
	}

	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4903      	ldr	r1, [pc, #12]	; (8001ba0 <HAL_UART_RxCpltCallback+0x74>)
 8001b92:	4806      	ldr	r0, [pc, #24]	; (8001bac <HAL_UART_RxCpltCallback+0x80>)
 8001b94:	f007 fac2 	bl	800911c <HAL_UART_Receive_IT>
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20005978 	.word	0x20005978
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	20005984 	.word	0x20005984
 8001bac:	20005728 	.word	0x20005728

08001bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc2:	f001 fd19 	bl	80035f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40001000 	.word	0x40001000

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <Error_Handler+0x8>
	...

08001be0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a51      	ldr	r2, [pc, #324]	; (8001d30 <I2Cx_MspInit+0x150>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d14d      	bne.n	8001c8c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001c14:	2302      	movs	r3, #2
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4845      	ldr	r0, [pc, #276]	; (8001d38 <I2Cx_MspInit+0x158>)
 8001c24:	f002 fe52 	bl	80048cc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	4840      	ldr	r0, [pc, #256]	; (8001d38 <I2Cx_MspInit+0x158>)
 8001c36:	f002 fe49 	bl	80048cc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a3d      	ldr	r2, [pc, #244]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001c52:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a37      	ldr	r2, [pc, #220]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c5c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001c5e:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a34      	ldr	r2, [pc, #208]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c68:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	210f      	movs	r1, #15
 8001c6e:	2048      	movs	r0, #72	; 0x48
 8001c70:	f002 f846 	bl	8003d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001c74:	2048      	movs	r0, #72	; 0x48
 8001c76:	f002 f85f 	bl	8003d38 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	2049      	movs	r0, #73	; 0x49
 8001c80:	f002 f83e 	bl	8003d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001c84:	2049      	movs	r0, #73	; 0x49
 8001c86:	f002 f857 	bl	8003d38 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001c8a:	e04d      	b.n	8001d28 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4a28      	ldr	r2, [pc, #160]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	6313      	str	r3, [r2, #48]	; 0x30
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001caa:	2312      	movs	r3, #18
 8001cac:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cba:	f107 031c 	add.w	r3, r7, #28
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481e      	ldr	r0, [pc, #120]	; (8001d3c <I2Cx_MspInit+0x15c>)
 8001cc2:	f002 fe03 	bl	80048cc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481a      	ldr	r0, [pc, #104]	; (8001d3c <I2Cx_MspInit+0x15c>)
 8001cd4:	f002 fdfa 	bl	80048cc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001cde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cfa:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a0c      	ldr	r2, [pc, #48]	; (8001d34 <I2Cx_MspInit+0x154>)
 8001d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d06:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	201f      	movs	r0, #31
 8001d0e:	f001 fff7 	bl	8003d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001d12:	201f      	movs	r0, #31
 8001d14:	f002 f810 	bl	8003d38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	2020      	movs	r0, #32
 8001d1e:	f001 ffef 	bl	8003d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001d22:	2020      	movs	r0, #32
 8001d24:	f002 f808 	bl	8003d38 <HAL_NVIC_EnableIRQ>
}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	; 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200014b0 	.word	0x200014b0
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40021c00 	.word	0x40021c00
 8001d3c:	40020400 	.word	0x40020400

08001d40 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f003 fb7f 	bl	800544c <HAL_I2C_GetState>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d125      	bne.n	8001da0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <I2Cx_Init+0x68>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d103      	bne.n	8001d64 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a13      	ldr	r2, [pc, #76]	; (8001dac <I2Cx_Init+0x6c>)
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e002      	b.n	8001d6a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <I2Cx_Init+0x70>)
 8001d68:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <I2Cx_Init+0x74>)
 8001d6e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff23 	bl	8001be0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f003 f868 	bl	8004e70 <HAL_I2C_Init>
  }
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200014b0 	.word	0x200014b0
 8001dac:	40005c00 	.word	0x40005c00
 8001db0:	40005400 	.word	0x40005400
 8001db4:	40912732 	.word	0x40912732

08001db8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af04      	add	r7, sp, #16
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	72fb      	strb	r3, [r7, #11]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	813b      	strh	r3, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	88f8      	ldrh	r0, [r7, #6]
 8001ddc:	893a      	ldrh	r2, [r7, #8]
 8001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4603      	mov	r3, r0
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f003 fa12 	bl	8005218 <HAL_I2C_Mem_Read>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	4619      	mov	r1, r3
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f832 	bl	8001e6c <I2Cx_Error>
  }
  return status;    
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b08a      	sub	sp, #40	; 0x28
 8001e16:	af04      	add	r7, sp, #16
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	4608      	mov	r0, r1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4603      	mov	r3, r0
 8001e22:	72fb      	strb	r3, [r7, #11]
 8001e24:	460b      	mov	r3, r1
 8001e26:	813b      	strh	r3, [r7, #8]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	b299      	uxth	r1, r3
 8001e34:	88f8      	ldrh	r0, [r7, #6]
 8001e36:	893a      	ldrh	r2, [r7, #8]
 8001e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4603      	mov	r3, r0
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f003 f8d1 	bl	8004ff0 <HAL_I2C_Mem_Write>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f805 	bl	8001e6c <I2Cx_Error>
  }
  return status;
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f003 f889 	bl	8004f90 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff5e 	bl	8001d40 <I2Cx_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <TS_IO_Init+0x10>)
 8001e92:	f7ff ff55 	bl	8001d40 <I2Cx_Init>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200014b0 	.word	0x200014b0

08001ea0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	71bb      	strb	r3, [r7, #6]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001eb2:	79bb      	ldrb	r3, [r7, #6]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	79f9      	ldrb	r1, [r7, #7]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	1d7b      	adds	r3, r7, #5
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <TS_IO_Write+0x30>)
 8001ec4:	f7ff ffa5 	bl	8001e12 <I2Cx_WriteMultiple>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200014b0 	.word	0x200014b0

08001ed4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	4603      	mov	r3, r0
 8001edc:	460a      	mov	r2, r1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001ee8:	79bb      	ldrb	r3, [r7, #6]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	79f9      	ldrb	r1, [r7, #7]
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	f107 030f 	add.w	r3, r7, #15
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	4804      	ldr	r0, [pc, #16]	; (8001f0c <TS_IO_Read+0x38>)
 8001efc:	f7ff ff5c 	bl	8001db8 <I2Cx_ReadMultiple>

  return read_value;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200014b0 	.word	0x200014b0

08001f10 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 fb8d 	bl	8003638 <HAL_Delay>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001f2c:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f2e:	2228      	movs	r2, #40	; 0x28
 8001f30:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f34:	2209      	movs	r2, #9
 8001f36:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f3a:	2235      	movs	r2, #53	; 0x35
 8001f3c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f40:	220b      	movs	r2, #11
 8001f42:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f46:	f240 121b 	movw	r2, #283	; 0x11b
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001f4c:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f4e:	f240 2215 	movw	r2, #533	; 0x215
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f56:	f240 121d 	movw	r2, #285	; 0x11d
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f5e:	f240 2235 	movw	r2, #565	; 0x235
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001f64:	2100      	movs	r1, #0
 8001f66:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f68:	f000 facc 	bl	8002504 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001f6c:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f72:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001f74:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f76:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001f7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <BSP_LCD_Init+0xd0>)
 8001fb0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001fb2:	4810      	ldr	r0, [pc, #64]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001fb4:	f003 fedc 	bl	8005d70 <HAL_LTDC_GetState>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001fc2:	f000 f9c5 	bl	8002350 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001fc6:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <BSP_LCD_Init+0xcc>)
 8001fc8:	f003 fd02 	bl	80059d0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd2:	480a      	ldr	r0, [pc, #40]	; (8001ffc <BSP_LCD_Init+0xd4>)
 8001fd4:	f002 ff32 	bl	8004e3c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2108      	movs	r1, #8
 8001fdc:	4808      	ldr	r0, [pc, #32]	; (8002000 <BSP_LCD_Init+0xd8>)
 8001fde:	f002 ff2d 	bl	8004e3c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001fe2:	f000 faf7 	bl	80025d4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001fe6:	4807      	ldr	r0, [pc, #28]	; (8002004 <BSP_LCD_Init+0xdc>)
 8001fe8:	f000 f8d8 	bl	800219c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20005988 	.word	0x20005988
 8001ff8:	40016800 	.word	0x40016800
 8001ffc:	40022000 	.word	0x40022000
 8002000:	40022800 	.word	0x40022800
 8002004:	20001468 	.word	0x20001468

08002008 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <BSP_LCD_GetXSize+0x20>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a06      	ldr	r2, [pc, #24]	; (800202c <BSP_LCD_GetXSize+0x24>)
 8002012:	2134      	movs	r1, #52	; 0x34
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	3360      	adds	r3, #96	; 0x60
 800201c:	681b      	ldr	r3, [r3, #0]
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	2000153c 	.word	0x2000153c
 800202c:	20005988 	.word	0x20005988

08002030 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <BSP_LCD_GetYSize+0x20>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a06      	ldr	r2, [pc, #24]	; (8002054 <BSP_LCD_GetYSize+0x24>)
 800203a:	2134      	movs	r1, #52	; 0x34
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	3364      	adds	r3, #100	; 0x64
 8002044:	681b      	ldr	r3, [r3, #0]
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	2000153c 	.word	0x2000153c
 8002054:	20005988 	.word	0x20005988

08002058 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002058:	b580      	push	{r7, lr}
 800205a:	b090      	sub	sp, #64	; 0x40
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002068:	f7ff ffce 	bl	8002008 <BSP_LCD_GetXSize>
 800206c:	4603      	mov	r3, r0
 800206e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002074:	f7ff ffdc 	bl	8002030 <BSP_LCD_GetYSize>
 8002078:	4603      	mov	r3, r0
 800207a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002084:	23ff      	movs	r3, #255	; 0xff
 8002086:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800209e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80020a4:	2307      	movs	r3, #7
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80020a8:	f7ff ffae 	bl	8002008 <BSP_LCD_GetXSize>
 80020ac:	4603      	mov	r3, r0
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80020b0:	f7ff ffbe 	bl	8002030 <BSP_LCD_GetYSize>
 80020b4:	4603      	mov	r3, r0
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80020b8:	88fa      	ldrh	r2, [r7, #6]
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	4619      	mov	r1, r3
 80020c0:	4812      	ldr	r0, [pc, #72]	; (800210c <BSP_LCD_LayerDefaultInit+0xb4>)
 80020c2:	f003 fe17 	bl	8005cf4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	4911      	ldr	r1, [pc, #68]	; (8002110 <BSP_LCD_LayerDefaultInit+0xb8>)
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3304      	adds	r3, #4
 80020d6:	f04f 32ff 	mov.w	r2, #4294967295
 80020da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	490c      	ldr	r1, [pc, #48]	; (8002110 <BSP_LCD_LayerDefaultInit+0xb8>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	3308      	adds	r3, #8
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <BSP_LCD_LayerDefaultInit+0xbc>)
 80020ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	4907      	ldr	r1, [pc, #28]	; (8002110 <BSP_LCD_LayerDefaultInit+0xb8>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3740      	adds	r7, #64	; 0x40
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20005988 	.word	0x20005988
 8002110:	20001540 	.word	0x20001540
 8002114:	20001468 	.word	0x20001468

08002118 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <BSP_LCD_SelectLayer+0x1c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
} 
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000153c 	.word	0x2000153c

08002138 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <BSP_LCD_SetTextColor+0x28>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4907      	ldr	r1, [pc, #28]	; (8002164 <BSP_LCD_SetTextColor+0x2c>)
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	601a      	str	r2, [r3, #0]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	2000153c 	.word	0x2000153c
 8002164:	20001540 	.word	0x20001540

08002168 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <BSP_LCD_SetBackColor+0x2c>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4908      	ldr	r1, [pc, #32]	; (8002198 <BSP_LCD_SetBackColor+0x30>)
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3304      	adds	r3, #4
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	2000153c 	.word	0x2000153c
 8002198:	20001540 	.word	0x20001540

0800219c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <BSP_LCD_SetFont+0x2c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4908      	ldr	r1, [pc, #32]	; (80021cc <BSP_LCD_SetFont+0x30>)
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3308      	adds	r3, #8
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000153c 	.word	0x2000153c
 80021cc:	20001540 	.word	0x20001540

080021d0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <BSP_LCD_Clear+0x48>)
 80021da:	681c      	ldr	r4, [r3, #0]
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <BSP_LCD_Clear+0x48>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <BSP_LCD_Clear+0x4c>)
 80021e2:	2134      	movs	r1, #52	; 0x34
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	335c      	adds	r3, #92	; 0x5c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461e      	mov	r6, r3
 80021f0:	f7ff ff0a 	bl	8002008 <BSP_LCD_GetXSize>
 80021f4:	4605      	mov	r5, r0
 80021f6:	f7ff ff1b 	bl	8002030 <BSP_LCD_GetYSize>
 80021fa:	4602      	mov	r2, r0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	462a      	mov	r2, r5
 8002208:	4631      	mov	r1, r6
 800220a:	4620      	mov	r0, r4
 800220c:	f000 f996 	bl	800253c <LL_FillBuffer>
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002218:	2000153c 	.word	0x2000153c
 800221c:	20005988 	.word	0x20005988

08002220 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af02      	add	r7, sp, #8
 8002228:	4604      	mov	r4, r0
 800222a:	4608      	mov	r0, r1
 800222c:	4611      	mov	r1, r2
 800222e:	461a      	mov	r2, r3
 8002230:	4623      	mov	r3, r4
 8002232:	80fb      	strh	r3, [r7, #6]
 8002234:	4603      	mov	r3, r0
 8002236:	80bb      	strh	r3, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002244:	4b30      	ldr	r3, [pc, #192]	; (8002308 <BSP_LCD_FillRect+0xe8>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4930      	ldr	r1, [pc, #192]	; (800230c <BSP_LCD_FillRect+0xec>)
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff6e 	bl	8002138 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <BSP_LCD_FillRect+0xe8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <BSP_LCD_FillRect+0xf0>)
 8002262:	2134      	movs	r1, #52	; 0x34
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3348      	adds	r3, #72	; 0x48
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d114      	bne.n	800229c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002272:	4b25      	ldr	r3, [pc, #148]	; (8002308 <BSP_LCD_FillRect+0xe8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a26      	ldr	r2, [pc, #152]	; (8002310 <BSP_LCD_FillRect+0xf0>)
 8002278:	2134      	movs	r1, #52	; 0x34
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	335c      	adds	r3, #92	; 0x5c
 8002282:	681c      	ldr	r4, [r3, #0]
 8002284:	f7ff fec0 	bl	8002008 <BSP_LCD_GetXSize>
 8002288:	4602      	mov	r2, r0
 800228a:	88bb      	ldrh	r3, [r7, #4]
 800228c:	fb03 f202 	mul.w	r2, r3, r2
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	4413      	add	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4423      	add	r3, r4
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	e013      	b.n	80022c4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <BSP_LCD_FillRect+0xe8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <BSP_LCD_FillRect+0xf0>)
 80022a2:	2134      	movs	r1, #52	; 0x34
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	335c      	adds	r3, #92	; 0x5c
 80022ac:	681c      	ldr	r4, [r3, #0]
 80022ae:	f7ff feab 	bl	8002008 <BSP_LCD_GetXSize>
 80022b2:	4602      	mov	r2, r0
 80022b4:	88bb      	ldrh	r3, [r7, #4]
 80022b6:	fb03 f202 	mul.w	r2, r3, r2
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4423      	add	r3, r4
 80022c2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <BSP_LCD_FillRect+0xe8>)
 80022c6:	681c      	ldr	r4, [r3, #0]
 80022c8:	68fd      	ldr	r5, [r7, #12]
 80022ca:	887e      	ldrh	r6, [r7, #2]
 80022cc:	f8b7 8000 	ldrh.w	r8, [r7]
 80022d0:	f7ff fe9a 	bl	8002008 <BSP_LCD_GetXSize>
 80022d4:	4602      	mov	r2, r0
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	1ad1      	subs	r1, r2, r3
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <BSP_LCD_FillRect+0xe8>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	480b      	ldr	r0, [pc, #44]	; (800230c <BSP_LCD_FillRect+0xec>)
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4403      	add	r3, r0
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	9100      	str	r1, [sp, #0]
 80022f0:	4643      	mov	r3, r8
 80022f2:	4632      	mov	r2, r6
 80022f4:	4629      	mov	r1, r5
 80022f6:	4620      	mov	r0, r4
 80022f8:	f000 f920 	bl	800253c <LL_FillBuffer>
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002306:	bf00      	nop
 8002308:	2000153c 	.word	0x2000153c
 800230c:	20001540 	.word	0x20001540
 8002310:	20005988 	.word	0x20005988

08002314 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <BSP_LCD_DisplayOn+0x30>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <BSP_LCD_DisplayOn+0x30>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002328:	2201      	movs	r2, #1
 800232a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232e:	4806      	ldr	r0, [pc, #24]	; (8002348 <BSP_LCD_DisplayOn+0x34>)
 8002330:	f002 fd84 	bl	8004e3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002334:	2201      	movs	r2, #1
 8002336:	2108      	movs	r1, #8
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <BSP_LCD_DisplayOn+0x38>)
 800233a:	f002 fd7f 	bl	8004e3c <HAL_GPIO_WritePin>
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20005988 	.word	0x20005988
 8002348:	40022000 	.word	0x40022000
 800234c:	40022800 	.word	0x40022800

08002350 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b090      	sub	sp, #64	; 0x40
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800235a:	4b64      	ldr	r3, [pc, #400]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a63      	ldr	r2, [pc, #396]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002360:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b61      	ldr	r3, [pc, #388]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002372:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800238a:	4b58      	ldr	r3, [pc, #352]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a57      	ldr	r2, [pc, #348]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002390:	f043 0310 	orr.w	r3, r3, #16
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b55      	ldr	r3, [pc, #340]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023a2:	4b52      	ldr	r3, [pc, #328]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a51      	ldr	r2, [pc, #324]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023ba:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b49      	ldr	r3, [pc, #292]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a45      	ldr	r2, [pc, #276]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023ea:	4b40      	ldr	r3, [pc, #256]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a3f      	ldr	r2, [pc, #252]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002402:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a39      	ldr	r2, [pc, #228]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800241a:	4b34      	ldr	r3, [pc, #208]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a33      	ldr	r2, [pc, #204]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002420:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <BSP_LCD_MspInit+0x19c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002432:	2310      	movs	r3, #16
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800243e:	2302      	movs	r3, #2
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002442:	230e      	movs	r3, #14
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	4828      	ldr	r0, [pc, #160]	; (80024f0 <BSP_LCD_MspInit+0x1a0>)
 800244e:	f002 fa3d 	bl	80048cc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800245c:	2309      	movs	r3, #9
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002464:	4619      	mov	r1, r3
 8002466:	4823      	ldr	r0, [pc, #140]	; (80024f4 <BSP_LCD_MspInit+0x1a4>)
 8002468:	f002 fa30 	bl	80048cc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800246c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002476:	230e      	movs	r3, #14
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800247a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247e:	4619      	mov	r1, r3
 8002480:	481d      	ldr	r0, [pc, #116]	; (80024f8 <BSP_LCD_MspInit+0x1a8>)
 8002482:	f002 fa23 	bl	80048cc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002486:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002490:	230e      	movs	r3, #14
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002498:	4619      	mov	r1, r3
 800249a:	4818      	ldr	r0, [pc, #96]	; (80024fc <BSP_LCD_MspInit+0x1ac>)
 800249c:	f002 fa16 	bl	80048cc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80024a0:	23f7      	movs	r3, #247	; 0xf7
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80024a8:	230e      	movs	r3, #14
 80024aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80024ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b0:	4619      	mov	r1, r3
 80024b2:	4813      	ldr	r0, [pc, #76]	; (8002500 <BSP_LCD_MspInit+0x1b0>)
 80024b4:	f002 fa0a 	bl	80048cc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80024b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80024c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c6:	4619      	mov	r1, r3
 80024c8:	480b      	ldr	r0, [pc, #44]	; (80024f8 <BSP_LCD_MspInit+0x1a8>)
 80024ca:	f002 f9ff 	bl	80048cc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80024ce:	2308      	movs	r3, #8
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80024d2:	2301      	movs	r3, #1
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	4619      	mov	r1, r3
 80024dc:	4808      	ldr	r0, [pc, #32]	; (8002500 <BSP_LCD_MspInit+0x1b0>)
 80024de:	f002 f9f5 	bl	80048cc <HAL_GPIO_Init>
}
 80024e2:	bf00      	nop
 80024e4:	3740      	adds	r7, #64	; 0x40
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40021800 	.word	0x40021800
 80024f8:	40022000 	.word	0x40022000
 80024fc:	40022400 	.word	0x40022400
 8002500:	40022800 	.word	0x40022800

08002504 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <BSP_LCD_ClockConfig+0x34>)
 8002510:	2208      	movs	r2, #8
 8002512:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <BSP_LCD_ClockConfig+0x34>)
 8002516:	22c0      	movs	r2, #192	; 0xc0
 8002518:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <BSP_LCD_ClockConfig+0x34>)
 800251c:	2205      	movs	r2, #5
 800251e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <BSP_LCD_ClockConfig+0x34>)
 8002522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002528:	4803      	ldr	r0, [pc, #12]	; (8002538 <BSP_LCD_ClockConfig+0x34>)
 800252a:	f004 fad5 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20001558 	.word	0x20001558

0800253c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <LL_FillBuffer+0x88>)
 800254c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002550:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <LL_FillBuffer+0x8c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <LL_FillBuffer+0x90>)
 8002558:	2134      	movs	r1, #52	; 0x34
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3348      	adds	r3, #72	; 0x48
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d103      	bne.n	8002570 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <LL_FillBuffer+0x88>)
 800256a:	2202      	movs	r2, #2
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	e002      	b.n	8002576 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <LL_FillBuffer+0x88>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <LL_FillBuffer+0x88>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <LL_FillBuffer+0x88>)
 800257e:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <LL_FillBuffer+0x94>)
 8002580:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002582:	4810      	ldr	r0, [pc, #64]	; (80025c4 <LL_FillBuffer+0x88>)
 8002584:	f001 ff16 	bl	80043b4 <HAL_DMA2D_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d115      	bne.n	80025ba <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800258e:	68f9      	ldr	r1, [r7, #12]
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <LL_FillBuffer+0x88>)
 8002592:	f002 f86d 	bl	8004670 <HAL_DMA2D_ConfigLayer>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10e      	bne.n	80025ba <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69f9      	ldr	r1, [r7, #28]
 80025a6:	4807      	ldr	r0, [pc, #28]	; (80025c4 <LL_FillBuffer+0x88>)
 80025a8:	f001 ff4e 	bl	8004448 <HAL_DMA2D_Start>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80025b2:	210a      	movs	r1, #10
 80025b4:	4803      	ldr	r0, [pc, #12]	; (80025c4 <LL_FillBuffer+0x88>)
 80025b6:	f001 ff72 	bl	800449e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200014fc 	.word	0x200014fc
 80025c8:	2000153c 	.word	0x2000153c
 80025cc:	20005988 	.word	0x20005988
 80025d0:	4002b000 	.word	0x4002b000

080025d4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <BSP_SDRAM_Init+0xac>)
 80025da:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <BSP_SDRAM_Init+0xb0>)
 80025dc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80025de:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <BSP_SDRAM_Init+0xb4>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <BSP_SDRAM_Init+0xb4>)
 80025e6:	2207      	movs	r2, #7
 80025e8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80025ea:	4b27      	ldr	r3, [pc, #156]	; (8002688 <BSP_SDRAM_Init+0xb4>)
 80025ec:	2204      	movs	r2, #4
 80025ee:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <BSP_SDRAM_Init+0xb4>)
 80025f2:	2207      	movs	r2, #7
 80025f4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <BSP_SDRAM_Init+0xb4>)
 80025f8:	2202      	movs	r2, #2
 80025fa:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <BSP_SDRAM_Init+0xb4>)
 80025fe:	2202      	movs	r2, #2
 8002600:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <BSP_SDRAM_Init+0xb4>)
 8002604:	2202      	movs	r2, #2
 8002606:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <BSP_SDRAM_Init+0xac>)
 800260a:	2200      	movs	r2, #0
 800260c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <BSP_SDRAM_Init+0xac>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <BSP_SDRAM_Init+0xac>)
 8002616:	2204      	movs	r2, #4
 8002618:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <BSP_SDRAM_Init+0xac>)
 800261c:	2210      	movs	r2, #16
 800261e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <BSP_SDRAM_Init+0xac>)
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <BSP_SDRAM_Init+0xac>)
 8002628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <BSP_SDRAM_Init+0xac>)
 8002630:	2200      	movs	r2, #0
 8002632:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <BSP_SDRAM_Init+0xac>)
 8002636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800263a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <BSP_SDRAM_Init+0xac>)
 800263e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <BSP_SDRAM_Init+0xac>)
 8002646:	2200      	movs	r2, #0
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800264a:	2100      	movs	r1, #0
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <BSP_SDRAM_Init+0xac>)
 800264e:	f000 f87f 	bl	8002750 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <BSP_SDRAM_Init+0xb4>)
 8002654:	480a      	ldr	r0, [pc, #40]	; (8002680 <BSP_SDRAM_Init+0xac>)
 8002656:	f005 fa07 	bl	8007a68 <HAL_SDRAM_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <BSP_SDRAM_Init+0xb8>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e002      	b.n	800266e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <BSP_SDRAM_Init+0xb8>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800266e:	f240 6003 	movw	r0, #1539	; 0x603
 8002672:	f000 f80d 	bl	8002690 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <BSP_SDRAM_Init+0xb8>)
 8002678:	781b      	ldrb	r3, [r3, #0]
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20005a30 	.word	0x20005a30
 8002684:	a0000140 	.word	0xa0000140
 8002688:	200015dc 	.word	0x200015dc
 800268c:	20001478 	.word	0x20001478

08002690 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026a4:	2210      	movs	r2, #16
 80026a6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80026b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b8:	4923      	ldr	r1, [pc, #140]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ba:	4824      	ldr	r0, [pc, #144]	; (800274c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026bc:	f005 fa08 	bl	8007ad0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f000 ffb9 	bl	8003638 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026c8:	2202      	movs	r2, #2
 80026ca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ce:	2210      	movs	r2, #16
 80026d0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80026de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e2:	4919      	ldr	r1, [pc, #100]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026e4:	4819      	ldr	r0, [pc, #100]	; (800274c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026e6:	f005 f9f3 	bl	8007ad0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ec:	2203      	movs	r2, #3
 80026ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026f2:	2210      	movs	r2, #16
 80026f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80026f6:	4b14      	ldr	r3, [pc, #80]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026f8:	2208      	movs	r2, #8
 80026fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002706:	4910      	ldr	r1, [pc, #64]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002708:	4810      	ldr	r0, [pc, #64]	; (800274c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800270a:	f005 f9e1 	bl	8007ad0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800270e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002712:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002716:	2204      	movs	r2, #4
 8002718:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800271c:	2210      	movs	r2, #16
 800271e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002722:	2201      	movs	r2, #1
 8002724:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800272a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800272c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002730:	4905      	ldr	r1, [pc, #20]	; (8002748 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002732:	4806      	ldr	r0, [pc, #24]	; (800274c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002734:	f005 f9cc 	bl	8007ad0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4804      	ldr	r0, [pc, #16]	; (800274c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800273c:	f005 f9f3 	bl	8007b26 <HAL_SDRAM_ProgramRefreshRate>
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200015f8 	.word	0x200015f8
 800274c:	20005a30 	.word	0x20005a30

08002750 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002750:	b580      	push	{r7, lr}
 8002752:	b090      	sub	sp, #64	; 0x40
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	4a6f      	ldr	r2, [pc, #444]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6393      	str	r3, [r2, #56]	; 0x38
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002772:	4b6a      	ldr	r3, [pc, #424]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a69      	ldr	r2, [pc, #420]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b67      	ldr	r3, [pc, #412]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	4b64      	ldr	r3, [pc, #400]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a63      	ldr	r2, [pc, #396]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b61      	ldr	r3, [pc, #388]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027a2:	4b5e      	ldr	r3, [pc, #376]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a5d      	ldr	r2, [pc, #372]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b5b      	ldr	r3, [pc, #364]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ba:	4b58      	ldr	r3, [pc, #352]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a57      	ldr	r2, [pc, #348]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027c0:	f043 0310 	orr.w	r3, r3, #16
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b55      	ldr	r3, [pc, #340]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027d2:	4b52      	ldr	r3, [pc, #328]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a51      	ldr	r2, [pc, #324]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b4f      	ldr	r3, [pc, #316]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ea:	4b4c      	ldr	r3, [pc, #304]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a4b      	ldr	r2, [pc, #300]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002802:	4b46      	ldr	r3, [pc, #280]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a45      	ldr	r2, [pc, #276]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b43      	ldr	r3, [pc, #268]	; (800291c <BSP_SDRAM_MspInit+0x1cc>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800281e:	2301      	movs	r3, #1
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002822:	2302      	movs	r3, #2
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002826:	230c      	movs	r3, #12
 8002828:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800282a:	2308      	movs	r3, #8
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800282e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002832:	4619      	mov	r1, r3
 8002834:	483a      	ldr	r0, [pc, #232]	; (8002920 <BSP_SDRAM_MspInit+0x1d0>)
 8002836:	f002 f849 	bl	80048cc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800283a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002840:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002844:	4619      	mov	r1, r3
 8002846:	4837      	ldr	r0, [pc, #220]	; (8002924 <BSP_SDRAM_MspInit+0x1d4>)
 8002848:	f002 f840 	bl	80048cc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800284c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002856:	4619      	mov	r1, r3
 8002858:	4833      	ldr	r0, [pc, #204]	; (8002928 <BSP_SDRAM_MspInit+0x1d8>)
 800285a:	f002 f837 	bl	80048cc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800285e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002868:	4619      	mov	r1, r3
 800286a:	4830      	ldr	r0, [pc, #192]	; (800292c <BSP_SDRAM_MspInit+0x1dc>)
 800286c:	f002 f82e 	bl	80048cc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002870:	f248 1333 	movw	r3, #33075	; 0x8133
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800287a:	4619      	mov	r1, r3
 800287c:	482c      	ldr	r0, [pc, #176]	; (8002930 <BSP_SDRAM_MspInit+0x1e0>)
 800287e:	f002 f825 	bl	80048cc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002882:	2328      	movs	r3, #40	; 0x28
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	4619      	mov	r1, r3
 800288c:	4829      	ldr	r0, [pc, #164]	; (8002934 <BSP_SDRAM_MspInit+0x1e4>)
 800288e:	f002 f81d 	bl	80048cc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ac:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028b4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028bc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028ca:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80028cc:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028d4:	2203      	movs	r2, #3
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028e6:	4a15      	ldr	r2, [pc, #84]	; (800293c <BSP_SDRAM_MspInit+0x1ec>)
 80028e8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80028f6:	4810      	ldr	r0, [pc, #64]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028f8:	f001 fbba 	bl	8004070 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80028fc:	480e      	ldr	r0, [pc, #56]	; (8002938 <BSP_SDRAM_MspInit+0x1e8>)
 80028fe:	f001 fb09 	bl	8003f14 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	210f      	movs	r1, #15
 8002906:	2038      	movs	r0, #56	; 0x38
 8002908:	f001 f9fa 	bl	8003d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800290c:	2038      	movs	r0, #56	; 0x38
 800290e:	f001 fa13 	bl	8003d38 <HAL_NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3740      	adds	r7, #64	; 0x40
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40020800 	.word	0x40020800
 8002924:	40020c00 	.word	0x40020c00
 8002928:	40021000 	.word	0x40021000
 800292c:	40021400 	.word	0x40021400
 8002930:	40021800 	.word	0x40021800
 8002934:	40021c00 	.word	0x40021c00
 8002938:	20001608 	.word	0x20001608
 800293c:	40026410 	.word	0x40026410

08002940 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	460a      	mov	r2, r1
 800294a:	80fb      	strh	r3, [r7, #6]
 800294c:	4613      	mov	r3, r2
 800294e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <BSP_TS_Init+0x68>)
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800295a:	4a14      	ldr	r2, [pc, #80]	; (80029ac <BSP_TS_Init+0x6c>)
 800295c:	88bb      	ldrh	r3, [r7, #4]
 800295e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <BSP_TS_Init+0x70>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2070      	movs	r0, #112	; 0x70
 8002966:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <BSP_TS_Init+0x70>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2070      	movs	r0, #112	; 0x70
 800296e:	4798      	blx	r3
 8002970:	4603      	mov	r3, r0
 8002972:	2b51      	cmp	r3, #81	; 0x51
 8002974:	d111      	bne.n	800299a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <BSP_TS_Init+0x74>)
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <BSP_TS_Init+0x70>)
 800297a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <BSP_TS_Init+0x78>)
 800297e:	2270      	movs	r2, #112	; 0x70
 8002980:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <BSP_TS_Init+0x7c>)
 8002984:	2208      	movs	r2, #8
 8002986:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <BSP_TS_Init+0x74>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <BSP_TS_Init+0x78>)
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	b292      	uxth	r2, r2
 8002994:	4610      	mov	r0, r2
 8002996:	4798      	blx	r3
 8002998:	e001      	b.n	800299e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800299a:	2303      	movs	r3, #3
 800299c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	2000166c 	.word	0x2000166c
 80029ac:	2000166e 	.word	0x2000166e
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20001668 	.word	0x20001668
 80029b8:	20001671 	.word	0x20001671
 80029bc:	20001670 	.word	0x20001670

080029c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_MspInit+0x4c>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_MspInit+0x4c>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_MspInit+0x4c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_MspInit+0x4c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_MspInit+0x4c>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_MspInit+0x4c>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	210f      	movs	r1, #15
 80029fa:	f06f 0001 	mvn.w	r0, #1
 80029fe:	f001 f97f 	bl	8003d00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a2a      	ldr	r2, [pc, #168]	; (8002ad8 <HAL_ADC_MspInit+0xc8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d124      	bne.n	8002a7c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a32:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a23      	ldr	r2, [pc, #140]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b21      	ldr	r3, [pc, #132]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a66:	2303      	movs	r3, #3
 8002a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 031c 	add.w	r3, r7, #28
 8002a72:	4619      	mov	r1, r3
 8002a74:	481a      	ldr	r0, [pc, #104]	; (8002ae0 <HAL_ADC_MspInit+0xd0>)
 8002a76:	f001 ff29 	bl	80048cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a7a:	e029      	b.n	8002ad0 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_ADC_MspInit+0xd4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d124      	bne.n	8002ad0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_ADC_MspInit+0xcc>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8002ab6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002abc:	2303      	movs	r3, #3
 8002abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4807      	ldr	r0, [pc, #28]	; (8002ae8 <HAL_ADC_MspInit+0xd8>)
 8002acc:	f001 fefe 	bl	80048cc <HAL_GPIO_Init>
}
 8002ad0:	bf00      	nop
 8002ad2:	3730      	adds	r7, #48	; 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40012000 	.word	0x40012000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	40012200 	.word	0x40012200
 8002ae8:	40021400 	.word	0x40021400

08002aec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_DAC_MspInit+0x84>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12b      	bne.n	8002b66 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_DAC_MspInit+0x88>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_DAC_MspInit+0x88>)
 8002b14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_DAC_MspInit+0x88>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <HAL_DAC_MspInit+0x88>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <HAL_DAC_MspInit+0x88>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <HAL_DAC_MspInit+0x88>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b3e:	2310      	movs	r3, #16
 8002b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b42:	2303      	movs	r3, #3
 8002b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4809      	ldr	r0, [pc, #36]	; (8002b78 <HAL_DAC_MspInit+0x8c>)
 8002b52:	f001 febb 	bl	80048cc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2036      	movs	r0, #54	; 0x36
 8002b5c:	f001 f8d0 	bl	8003d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b60:	2036      	movs	r0, #54	; 0x36
 8002b62:	f001 f8e9 	bl	8003d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002b66:	bf00      	nop
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40007400 	.word	0x40007400
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000

08002b7c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_DMA2D_MspInit+0x38>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_DMA2D_MspInit+0x3c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_DMA2D_MspInit+0x3c>)
 8002b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_DMA2D_MspInit+0x3c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	4002b000 	.word	0x4002b000
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <HAL_I2C_MspInit+0xdc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d129      	bne.n	8002c32 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a2e      	ldr	r2, [pc, #184]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c00:	2301      	movs	r3, #1
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c08:	2304      	movs	r3, #4
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	4823      	ldr	r0, [pc, #140]	; (8002ca0 <HAL_I2C_MspInit+0xe4>)
 8002c14:	f001 fe5a 	bl	80048cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a1f      	ldr	r2, [pc, #124]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c30:	e02d      	b.n	8002c8e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_I2C_MspInit+0xe8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d128      	bne.n	8002c8e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002c54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c5a:	2312      	movs	r3, #18
 8002c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c66:	2304      	movs	r3, #4
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c6a:	f107 031c 	add.w	r3, r7, #28
 8002c6e:	4619      	mov	r1, r3
 8002c70:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <HAL_I2C_MspInit+0xec>)
 8002c72:	f001 fe2b 	bl	80048cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_I2C_MspInit+0xe0>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
}
 8002c8e:	bf00      	nop
 8002c90:	3730      	adds	r7, #48	; 0x30
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40005400 	.word	0x40005400
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40005c00 	.word	0x40005c00
 8002ca8:	40021c00 	.word	0x40021c00

08002cac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <HAL_I2C_MspDeInit+0x64>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d110      	bne.n	8002ce0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <HAL_I2C_MspDeInit+0x68>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <HAL_I2C_MspDeInit+0x68>)
 8002cc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cce:	4812      	ldr	r0, [pc, #72]	; (8002d18 <HAL_I2C_MspDeInit+0x6c>)
 8002cd0:	f001 ffa8 	bl	8004c24 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd8:	480f      	ldr	r0, [pc, #60]	; (8002d18 <HAL_I2C_MspDeInit+0x6c>)
 8002cda:	f001 ffa3 	bl	8004c24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002cde:	e013      	b.n	8002d08 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <HAL_I2C_MspDeInit+0x70>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10e      	bne.n	8002d08 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_I2C_MspDeInit+0x68>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_I2C_MspDeInit+0x68>)
 8002cf0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	4809      	ldr	r0, [pc, #36]	; (8002d20 <HAL_I2C_MspDeInit+0x74>)
 8002cfa:	f001 ff93 	bl	8004c24 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d02:	4807      	ldr	r0, [pc, #28]	; (8002d20 <HAL_I2C_MspDeInit+0x74>)
 8002d04:	f001 ff8e 	bl	8004c24 <HAL_GPIO_DeInit>
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40005400 	.word	0x40005400
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	40005c00 	.word	0x40005c00
 8002d20:	40021c00 	.word	0x40021c00

08002d24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08e      	sub	sp, #56	; 0x38
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a55      	ldr	r2, [pc, #340]	; (8002e98 <HAL_LTDC_MspInit+0x174>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f040 80a3 	bne.w	8002e8e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d48:	4b54      	ldr	r3, [pc, #336]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	4a53      	ldr	r2, [pc, #332]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d52:	6453      	str	r3, [r2, #68]	; 0x44
 8002d54:	4b51      	ldr	r3, [pc, #324]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d5c:	623b      	str	r3, [r7, #32]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d60:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4a4d      	ldr	r2, [pc, #308]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d66:	f043 0310 	orr.w	r3, r3, #16
 8002d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d78:	4b48      	ldr	r3, [pc, #288]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4a47      	ldr	r2, [pc, #284]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d82:	6313      	str	r3, [r2, #48]	; 0x30
 8002d84:	4b45      	ldr	r3, [pc, #276]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d90:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a41      	ldr	r2, [pc, #260]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002da8:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db2:	6313      	str	r3, [r2, #48]	; 0x30
 8002db4:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6313      	str	r3, [r2, #48]	; 0x30
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_LTDC_MspInit+0x178>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002dd8:	2310      	movs	r3, #16
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002de8:	230e      	movs	r3, #14
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df0:	4619      	mov	r1, r3
 8002df2:	482b      	ldr	r0, [pc, #172]	; (8002ea0 <HAL_LTDC_MspInit+0x17c>)
 8002df4:	f001 fd6a 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002df8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e06:	2300      	movs	r3, #0
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e0a:	230e      	movs	r3, #14
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e12:	4619      	mov	r1, r3
 8002e14:	4823      	ldr	r0, [pc, #140]	; (8002ea4 <HAL_LTDC_MspInit+0x180>)
 8002e16:	f001 fd59 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002e1a:	23f7      	movs	r3, #247	; 0xf7
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e2a:	230e      	movs	r3, #14
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e32:	4619      	mov	r1, r3
 8002e34:	481c      	ldr	r0, [pc, #112]	; (8002ea8 <HAL_LTDC_MspInit+0x184>)
 8002e36:	f001 fd49 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e54:	4619      	mov	r1, r3
 8002e56:	4815      	ldr	r0, [pc, #84]	; (8002eac <HAL_LTDC_MspInit+0x188>)
 8002e58:	f001 fd38 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002e5c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e6e:	230e      	movs	r3, #14
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	4619      	mov	r1, r3
 8002e78:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <HAL_LTDC_MspInit+0x18c>)
 8002e7a:	f001 fd27 	bl	80048cc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2105      	movs	r1, #5
 8002e82:	2058      	movs	r0, #88	; 0x58
 8002e84:	f000 ff3c 	bl	8003d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002e88:	2058      	movs	r0, #88	; 0x58
 8002e8a:	f000 ff55 	bl	8003d38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002e8e:	bf00      	nop
 8002e90:	3738      	adds	r7, #56	; 0x38
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40016800 	.word	0x40016800
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40022400 	.word	0x40022400
 8002ea8:	40022800 	.word	0x40022800
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	40022000 	.word	0x40022000

08002eb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <HAL_RTC_MspInit+0x2c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <HAL_RTC_MspInit+0x30>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a06      	ldr	r2, [pc, #24]	; (8002ee4 <HAL_RTC_MspInit+0x30>)
 8002ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40002800 	.word	0x40002800
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <HAL_SPI_MspInit+0xd4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d154      	bne.n	8002fb4 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
 8002f16:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f22:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a20      	ldr	r2, [pc, #128]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <HAL_SPI_MspInit+0xd8>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002f52:	2302      	movs	r3, #2
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f62:	2305      	movs	r3, #5
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002f66:	f107 0314 	add.w	r3, r7, #20
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4815      	ldr	r0, [pc, #84]	; (8002fc4 <HAL_SPI_MspInit+0xdc>)
 8002f6e:	f001 fcad 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f72:	2301      	movs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f82:	2305      	movs	r3, #5
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <HAL_SPI_MspInit+0xdc>)
 8002f8e:	f001 fc9d 	bl	80048cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fa4:	2305      	movs	r3, #5
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	4619      	mov	r1, r3
 8002fae:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <HAL_SPI_MspInit+0xe0>)
 8002fb0:	f001 fc8c 	bl	80048cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40003800 	.word	0x40003800
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	40020400 	.word	0x40020400

08002fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2e      	ldr	r2, [pc, #184]	; (8003094 <HAL_TIM_Base_MspInit+0xc8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fde:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fea:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ff6:	e046      	b.n	8003086 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003000:	d10c      	bne.n	800301c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003002:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a24      	ldr	r2, [pc, #144]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]
}
 800301a:	e034      	b.n	8003086 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_TIM_Base_MspInit+0xd0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10c      	bne.n	8003040 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003026:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]
}
 800303e:	e022      	b.n	8003086 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <HAL_TIM_Base_MspInit+0xd4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10c      	bne.n	8003064 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
}
 8003062:	e010      	b.n	8003086 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <HAL_TIM_Base_MspInit+0xd8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10b      	bne.n	8003086 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	6453      	str	r3, [r2, #68]	; 0x44
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_TIM_Base_MspInit+0xcc>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
}
 8003086:	bf00      	nop
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40023800 	.word	0x40023800
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000c00 	.word	0x40000c00
 80030a4:	40010400 	.word	0x40010400

080030a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a22      	ldr	r2, [pc, #136]	; (8003150 <HAL_TIM_MspPostInit+0xa8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d11c      	bne.n	8003104 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_TIM_MspPostInit+0xac>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a21      	ldr	r2, [pc, #132]	; (8003154 <HAL_TIM_MspPostInit+0xac>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_TIM_MspPostInit+0xac>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030e2:	2310      	movs	r3, #16
 80030e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e6:	2302      	movs	r3, #2
 80030e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030f2:	2302      	movs	r3, #2
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	4816      	ldr	r0, [pc, #88]	; (8003158 <HAL_TIM_MspPostInit+0xb0>)
 80030fe:	f001 fbe5 	bl	80048cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003102:	e020      	b.n	8003146 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <HAL_TIM_MspPostInit+0xb4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d11b      	bne.n	8003146 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_TIM_MspPostInit+0xac>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <HAL_TIM_MspPostInit+0xac>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_TIM_MspPostInit+0xac>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003126:	2304      	movs	r3, #4
 8003128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003136:	2303      	movs	r3, #3
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	4619      	mov	r1, r3
 8003140:	4807      	ldr	r0, [pc, #28]	; (8003160 <HAL_TIM_MspPostInit+0xb8>)
 8003142:	f001 fbc3 	bl	80048cc <HAL_GPIO_Init>
}
 8003146:	bf00      	nop
 8003148:	3728      	adds	r7, #40	; 0x28
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40000400 	.word	0x40000400
 8003154:	40023800 	.word	0x40023800
 8003158:	40020400 	.word	0x40020400
 800315c:	40010400 	.word	0x40010400
 8003160:	40022000 	.word	0x40022000

08003164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08e      	sub	sp, #56	; 0x38
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a57      	ldr	r2, [pc, #348]	; (80032e0 <HAL_UART_MspInit+0x17c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d128      	bne.n	80031d8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003186:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <HAL_UART_MspInit+0x180>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_UART_MspInit+0x180>)
 800318c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <HAL_UART_MspInit+0x180>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800319a:	623b      	str	r3, [r7, #32]
 800319c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a50      	ldr	r2, [pc, #320]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80031a4:	f043 0320 	orr.w	r3, r3, #32
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b4e      	ldr	r3, [pc, #312]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80031b6:	23c0      	movs	r3, #192	; 0xc0
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80031c6:	2308      	movs	r3, #8
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ce:	4619      	mov	r1, r3
 80031d0:	4845      	ldr	r0, [pc, #276]	; (80032e8 <HAL_UART_MspInit+0x184>)
 80031d2:	f001 fb7b 	bl	80048cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80031d6:	e07f      	b.n	80032d8 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a43      	ldr	r2, [pc, #268]	; (80032ec <HAL_UART_MspInit+0x188>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d14d      	bne.n	800327e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031e2:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	4a3f      	ldr	r2, [pc, #252]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80031e8:	f043 0310 	orr.w	r3, r3, #16
 80031ec:	6453      	str	r3, [r2, #68]	; 0x44
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fa:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a39      	ldr	r2, [pc, #228]	; (80032e4 <HAL_UART_MspInit+0x180>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	6313      	str	r3, [r2, #48]	; 0x30
 8003206:	4b37      	ldr	r3, [pc, #220]	; (80032e4 <HAL_UART_MspInit+0x180>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_UART_MspInit+0x180>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a33      	ldr	r2, [pc, #204]	; (80032e4 <HAL_UART_MspInit+0x180>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_UART_MspInit+0x180>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003236:	2300      	movs	r3, #0
 8003238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800323a:	2307      	movs	r3, #7
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800323e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003242:	4619      	mov	r1, r3
 8003244:	482a      	ldr	r0, [pc, #168]	; (80032f0 <HAL_UART_MspInit+0x18c>)
 8003246:	f001 fb41 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800324a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800325c:	2307      	movs	r3, #7
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003264:	4619      	mov	r1, r3
 8003266:	4823      	ldr	r0, [pc, #140]	; (80032f4 <HAL_UART_MspInit+0x190>)
 8003268:	f001 fb30 	bl	80048cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	2107      	movs	r1, #7
 8003270:	2025      	movs	r0, #37	; 0x25
 8003272:	f000 fd45 	bl	8003d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003276:	2025      	movs	r0, #37	; 0x25
 8003278:	f000 fd5e 	bl	8003d38 <HAL_NVIC_EnableIRQ>
}
 800327c:	e02c      	b.n	80032d8 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_UART_MspInit+0x194>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d127      	bne.n	80032d8 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_UART_MspInit+0x180>)
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <HAL_UART_MspInit+0x180>)
 800328e:	f043 0320 	orr.w	r3, r3, #32
 8003292:	6453      	str	r3, [r2, #68]	; 0x44
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_UART_MspInit+0x180>)
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	6313      	str	r3, [r2, #48]	; 0x30
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <HAL_UART_MspInit+0x180>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80032b8:	23c0      	movs	r3, #192	; 0xc0
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c4:	2303      	movs	r3, #3
 80032c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80032c8:	2308      	movs	r3, #8
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d0:	4619      	mov	r1, r3
 80032d2:	480a      	ldr	r0, [pc, #40]	; (80032fc <HAL_UART_MspInit+0x198>)
 80032d4:	f001 fafa 	bl	80048cc <HAL_GPIO_Init>
}
 80032d8:	bf00      	nop
 80032da:	3738      	adds	r7, #56	; 0x38
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40007800 	.word	0x40007800
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40021400 	.word	0x40021400
 80032ec:	40011000 	.word	0x40011000
 80032f0:	40020400 	.word	0x40020400
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40011400 	.word	0x40011400
 80032fc:	40020800 	.word	0x40020800

08003300 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003314:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <HAL_FMC_MspInit+0x100>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d16d      	bne.n	80033f8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <HAL_FMC_MspInit+0x100>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003322:	4b38      	ldr	r3, [pc, #224]	; (8003404 <HAL_FMC_MspInit+0x104>)
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	4a37      	ldr	r2, [pc, #220]	; (8003404 <HAL_FMC_MspInit+0x104>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6393      	str	r3, [r2, #56]	; 0x38
 800332e:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_FMC_MspInit+0x104>)
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800333a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800333e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003348:	2303      	movs	r3, #3
 800334a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800334c:	230c      	movs	r3, #12
 800334e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	482c      	ldr	r0, [pc, #176]	; (8003408 <HAL_FMC_MspInit+0x108>)
 8003356:	f001 fab9 	bl	80048cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800335a:	f248 1333 	movw	r3, #33075	; 0x8133
 800335e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003368:	2303      	movs	r3, #3
 800336a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800336c:	230c      	movs	r3, #12
 800336e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	4619      	mov	r1, r3
 8003374:	4825      	ldr	r0, [pc, #148]	; (800340c <HAL_FMC_MspInit+0x10c>)
 8003376:	f001 faa9 	bl	80048cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800337a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800337e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003388:	2303      	movs	r3, #3
 800338a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800338c:	230c      	movs	r3, #12
 800338e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	4619      	mov	r1, r3
 8003394:	481e      	ldr	r0, [pc, #120]	; (8003410 <HAL_FMC_MspInit+0x110>)
 8003396:	f001 fa99 	bl	80048cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800339a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800339e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a8:	2303      	movs	r3, #3
 80033aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033ac:	230c      	movs	r3, #12
 80033ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4817      	ldr	r0, [pc, #92]	; (8003414 <HAL_FMC_MspInit+0x114>)
 80033b6:	f001 fa89 	bl	80048cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80033ba:	2328      	movs	r3, #40	; 0x28
 80033bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c6:	2303      	movs	r3, #3
 80033c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033ca:	230c      	movs	r3, #12
 80033cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4811      	ldr	r0, [pc, #68]	; (8003418 <HAL_FMC_MspInit+0x118>)
 80033d4:	f001 fa7a 	bl	80048cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033d8:	2308      	movs	r3, #8
 80033da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e4:	2303      	movs	r3, #3
 80033e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033e8:	230c      	movs	r3, #12
 80033ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	4619      	mov	r1, r3
 80033f0:	480a      	ldr	r0, [pc, #40]	; (800341c <HAL_FMC_MspInit+0x11c>)
 80033f2:	f001 fa6b 	bl	80048cc <HAL_GPIO_Init>
 80033f6:	e000      	b.n	80033fa <HAL_FMC_MspInit+0xfa>
    return;
 80033f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20001674 	.word	0x20001674
 8003404:	40023800 	.word	0x40023800
 8003408:	40021000 	.word	0x40021000
 800340c:	40021800 	.word	0x40021800
 8003410:	40020c00 	.word	0x40020c00
 8003414:	40021400 	.word	0x40021400
 8003418:	40021c00 	.word	0x40021c00
 800341c:	40020800 	.word	0x40020800

08003420 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003428:	f7ff ff6a 	bl	8003300 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08c      	sub	sp, #48	; 0x30
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003444:	2200      	movs	r2, #0
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	2036      	movs	r0, #54	; 0x36
 800344a:	f000 fc59 	bl	8003d00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800344e:	2036      	movs	r0, #54	; 0x36
 8003450:	f000 fc72 	bl	8003d38 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003454:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <HAL_InitTick+0xa0>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_InitTick+0xa0>)
 800345a:	f043 0310 	orr.w	r3, r3, #16
 800345e:	6413      	str	r3, [r2, #64]	; 0x40
 8003460:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <HAL_InitTick+0xa0>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800346c:	f107 0210 	add.w	r2, r7, #16
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f003 fafc 	bl	8006a74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800347c:	f003 fad2 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 8003480:	4603      	mov	r3, r0
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <HAL_InitTick+0xa4>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0c9b      	lsrs	r3, r3, #18
 8003490:	3b01      	subs	r3, #1
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_InitTick+0xa8>)
 8003496:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <HAL_InitTick+0xac>)
 8003498:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_InitTick+0xa8>)
 800349c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034a2:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <HAL_InitTick+0xa8>)
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_InitTick+0xa8>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_InitTick+0xa8>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80034b4:	4809      	ldr	r0, [pc, #36]	; (80034dc <HAL_InitTick+0xa8>)
 80034b6:	f004 fc01 	bl	8007cbc <HAL_TIM_Base_Init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80034c0:	4806      	ldr	r0, [pc, #24]	; (80034dc <HAL_InitTick+0xa8>)
 80034c2:	f004 fc53 	bl	8007d6c <HAL_TIM_Base_Start_IT>
 80034c6:	4603      	mov	r3, r0
 80034c8:	e000      	b.n	80034cc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3730      	adds	r7, #48	; 0x30
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	431bde83 	.word	0x431bde83
 80034dc:	20005a64 	.word	0x20005a64
 80034e0:	40001000 	.word	0x40001000

080034e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034e8:	e7fe      	b.n	80034e8 <NMI_Handler+0x4>

080034ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ee:	e7fe      	b.n	80034ee <HardFault_Handler+0x4>

080034f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <MemManage_Handler+0x4>

080034f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034fa:	e7fe      	b.n	80034fa <BusFault_Handler+0x4>

080034fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003500:	e7fe      	b.n	8003500 <UsageFault_Handler+0x4>

08003502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <USART1_IRQHandler+0x10>)
 8003516:	f005 fe3f 	bl	8009198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20005728 	.word	0x20005728

08003524 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <TIM6_DAC_IRQHandler+0x20>)
 800352a:	791b      	ldrb	r3, [r3, #4]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003532:	4804      	ldr	r0, [pc, #16]	; (8003544 <TIM6_DAC_IRQHandler+0x20>)
 8003534:	f000 fc30 	bl	8003d98 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003538:	4803      	ldr	r0, [pc, #12]	; (8003548 <TIM6_DAC_IRQHandler+0x24>)
 800353a:	f004 fcf0 	bl	8007f1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200057b0 	.word	0x200057b0
 8003548:	20005a64 	.word	0x20005a64

0800354c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003550:	4802      	ldr	r0, [pc, #8]	; (800355c <LTDC_IRQHandler+0x10>)
 8003552:	f002 fb0d 	bl	8005b70 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200055e8 	.word	0x200055e8

08003560 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <SystemInit+0x28>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	4a07      	ldr	r2, [pc, #28]	; (8003588 <SystemInit+0x28>)
 800356c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <SystemInit+0x28>)
 8003576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800357a:	609a      	str	r2, [r3, #8]
#endif
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800358c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003590:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003592:	e003      	b.n	800359c <LoopCopyDataInit>

08003594 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003596:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003598:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800359a:	3104      	adds	r1, #4

0800359c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800359c:	480b      	ldr	r0, [pc, #44]	; (80035cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035a4:	d3f6      	bcc.n	8003594 <CopyDataInit>
  ldr  r2, =_sbss
 80035a6:	4a0b      	ldr	r2, [pc, #44]	; (80035d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035a8:	e002      	b.n	80035b0 <LoopFillZerobss>

080035aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035ac:	f842 3b04 	str.w	r3, [r2], #4

080035b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035b4:	d3f9      	bcc.n	80035aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035b6:	f7ff ffd3 	bl	8003560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ba:	f008 fa03 	bl	800b9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035be:	f7fd f97f 	bl	80008c0 <main>
  bx  lr    
 80035c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035c4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80035c8:	0800d9ac 	.word	0x0800d9ac
  ldr  r0, =_sdata
 80035cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035d0:	2000148c 	.word	0x2000148c
  ldr  r2, =_sbss
 80035d4:	2000148c 	.word	0x2000148c
  ldr  r3, = _ebss
 80035d8:	20005ab4 	.word	0x20005ab4

080035dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035dc:	e7fe      	b.n	80035dc <ADC_IRQHandler>

080035de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e2:	2003      	movs	r0, #3
 80035e4:	f000 fb81 	bl	8003cea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7ff ff23 	bl	8003434 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80035ee:	f7ff f9e7 	bl	80029c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_IncTick+0x20>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_IncTick+0x24>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4413      	add	r3, r2
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_IncTick+0x24>)
 800360a:	6013      	str	r3, [r2, #0]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20001484 	.word	0x20001484
 800361c:	20005ab0 	.word	0x20005ab0

08003620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return uwTick;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_GetTick+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20005ab0 	.word	0x20005ab0

08003638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003640:	f7ff ffee 	bl	8003620 <HAL_GetTick>
 8003644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d005      	beq.n	800365e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_Delay+0x44>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800365e:	bf00      	nop
 8003660:	f7ff ffde 	bl	8003620 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	429a      	cmp	r2, r3
 800366e:	d8f7      	bhi.n	8003660 <HAL_Delay+0x28>
  {
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20001484 	.word	0x20001484

08003680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e031      	b.n	80036fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff f9b6 	bl	8002a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_ADC_Init+0x84>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	f043 0202 	orr.w	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f964 	bl	800399c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
 80036ea:	e001      	b.n	80036f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	ffffeefd 	.word	0xffffeefd

08003708 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1c>
 8003720:	2302      	movs	r3, #2
 8003722:	e12a      	b.n	800397a <HAL_ADC_ConfigChannel+0x272>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b09      	cmp	r3, #9
 8003732:	d93a      	bls.n	80037aa <HAL_ADC_ConfigChannel+0xa2>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800373c:	d035      	beq.n	80037aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68d9      	ldr	r1, [r3, #12]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	3b1e      	subs	r3, #30
 8003754:	2207      	movs	r2, #7
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a87      	ldr	r2, [pc, #540]	; (8003988 <HAL_ADC_ConfigChannel+0x280>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10a      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68d9      	ldr	r1, [r3, #12]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	061a      	lsls	r2, r3, #24
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003782:	e035      	b.n	80037f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68d9      	ldr	r1, [r3, #12]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	4618      	mov	r0, r3
 8003796:	4603      	mov	r3, r0
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4403      	add	r3, r0
 800379c:	3b1e      	subs	r3, #30
 800379e:	409a      	lsls	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037a8:	e022      	b.n	80037f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6919      	ldr	r1, [r3, #16]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	2207      	movs	r2, #7
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43da      	mvns	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	400a      	ands	r2, r1
 80037cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6919      	ldr	r1, [r3, #16]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	4618      	mov	r0, r3
 80037e0:	4603      	mov	r3, r0
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4403      	add	r3, r0
 80037e6:	409a      	lsls	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	d824      	bhi.n	8003842 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	3b05      	subs	r3, #5
 800380a:	221f      	movs	r2, #31
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43da      	mvns	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	400a      	ands	r2, r1
 8003818:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	4618      	mov	r0, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	3b05      	subs	r3, #5
 8003834:	fa00 f203 	lsl.w	r2, r0, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	635a      	str	r2, [r3, #52]	; 0x34
 8003840:	e04c      	b.n	80038dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b0c      	cmp	r3, #12
 8003848:	d824      	bhi.n	8003894 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	3b23      	subs	r3, #35	; 0x23
 800385c:	221f      	movs	r2, #31
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	400a      	ands	r2, r1
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	4618      	mov	r0, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	3b23      	subs	r3, #35	; 0x23
 8003886:	fa00 f203 	lsl.w	r2, r0, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
 8003892:	e023      	b.n	80038dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	3b41      	subs	r3, #65	; 0x41
 80038a6:	221f      	movs	r2, #31
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43da      	mvns	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	400a      	ands	r2, r1
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	3b41      	subs	r3, #65	; 0x41
 80038d0:	fa00 f203 	lsl.w	r2, r0, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2a      	ldr	r2, [pc, #168]	; (800398c <HAL_ADC_ConfigChannel+0x284>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10a      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x1f4>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ee:	d105      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80038f0:	4b27      	ldr	r3, [pc, #156]	; (8003990 <HAL_ADC_ConfigChannel+0x288>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <HAL_ADC_ConfigChannel+0x288>)
 80038f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a22      	ldr	r2, [pc, #136]	; (800398c <HAL_ADC_ConfigChannel+0x284>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d109      	bne.n	800391a <HAL_ADC_ConfigChannel+0x212>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b12      	cmp	r3, #18
 800390c:	d105      	bne.n	800391a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_ADC_ConfigChannel+0x288>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_ADC_ConfigChannel+0x288>)
 8003914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003918:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_ADC_ConfigChannel+0x284>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d125      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x268>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a17      	ldr	r2, [pc, #92]	; (8003988 <HAL_ADC_ConfigChannel+0x280>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x22e>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b11      	cmp	r3, #17
 8003934:	d11c      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_ADC_ConfigChannel+0x288>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a15      	ldr	r2, [pc, #84]	; (8003990 <HAL_ADC_ConfigChannel+0x288>)
 800393c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003940:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a10      	ldr	r2, [pc, #64]	; (8003988 <HAL_ADC_ConfigChannel+0x280>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d111      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_ADC_ConfigChannel+0x28c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a11      	ldr	r2, [pc, #68]	; (8003998 <HAL_ADC_ConfigChannel+0x290>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0c9a      	lsrs	r2, r3, #18
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003962:	e002      	b.n	800396a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3b01      	subs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f9      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	10000012 	.word	0x10000012
 800398c:	40012000 	.word	0x40012000
 8003990:	40012300 	.word	0x40012300
 8003994:	2000147c 	.word	0x2000147c
 8003998:	431bde83 	.word	0x431bde83

0800399c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80039a4:	4b78      	ldr	r3, [pc, #480]	; (8003b88 <ADC_Init+0x1ec>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a77      	ldr	r2, [pc, #476]	; (8003b88 <ADC_Init+0x1ec>)
 80039aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80039ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80039b0:	4b75      	ldr	r3, [pc, #468]	; (8003b88 <ADC_Init+0x1ec>)
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4973      	ldr	r1, [pc, #460]	; (8003b88 <ADC_Init+0x1ec>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	021a      	lsls	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6899      	ldr	r1, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	4a58      	ldr	r2, [pc, #352]	; (8003b8c <ADC_Init+0x1f0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6899      	ldr	r1, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6899      	ldr	r1, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	e00f      	b.n	8003a96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0202 	bic.w	r2, r2, #2
 8003aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6899      	ldr	r1, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	005a      	lsls	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d01b      	beq.n	8003afc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	3b01      	subs	r3, #1
 8003af0:	035a      	lsls	r2, r3, #13
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	e007      	b.n	8003b0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	051a      	lsls	r2, r3, #20
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6899      	ldr	r1, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b4e:	025a      	lsls	r2, r3, #9
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6899      	ldr	r1, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	029a      	lsls	r2, r3, #10
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40012300 	.word	0x40012300
 8003b8c:	0f000001 	.word	0x0f000001

08003b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bac:	4013      	ands	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bbe:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	60d3      	str	r3, [r2, #12]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000ed00 	.word	0xe000ed00
 8003bd4:	05fa0000 	.word	0x05fa0000

08003bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	f003 0307 	and.w	r3, r3, #7
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	db0b      	blt.n	8003c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	f003 021f 	and.w	r2, r3, #31
 8003c0c:	4907      	ldr	r1, [pc, #28]	; (8003c2c <__NVIC_EnableIRQ+0x38>)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2001      	movs	r0, #1
 8003c16:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000e100 	.word	0xe000e100

08003c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	6039      	str	r1, [r7, #0]
 8003c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	db0a      	blt.n	8003c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	490c      	ldr	r1, [pc, #48]	; (8003c7c <__NVIC_SetPriority+0x4c>)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	0112      	lsls	r2, r2, #4
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	440b      	add	r3, r1
 8003c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c58:	e00a      	b.n	8003c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <__NVIC_SetPriority+0x50>)
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3b04      	subs	r3, #4
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	761a      	strb	r2, [r3, #24]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	e000e100 	.word	0xe000e100
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b089      	sub	sp, #36	; 0x24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f1c3 0307 	rsb	r3, r3, #7
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	bf28      	it	cs
 8003ca2:	2304      	movcs	r3, #4
 8003ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d902      	bls.n	8003cb4 <NVIC_EncodePriority+0x30>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3b03      	subs	r3, #3
 8003cb2:	e000      	b.n	8003cb6 <NVIC_EncodePriority+0x32>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	43d9      	mvns	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cdc:	4313      	orrs	r3, r2
         );
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3724      	adds	r7, #36	; 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ff4c 	bl	8003b90 <__NVIC_SetPriorityGrouping>
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d12:	f7ff ff61 	bl	8003bd8 <__NVIC_GetPriorityGrouping>
 8003d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	6978      	ldr	r0, [r7, #20]
 8003d1e:	f7ff ffb1 	bl	8003c84 <NVIC_EncodePriority>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ff80 	bl	8003c30 <__NVIC_SetPriority>
}
 8003d30:	bf00      	nop
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff54 	bl	8003bf4 <__NVIC_EnableIRQ>
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e014      	b.n	8003d90 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	791b      	ldrb	r3, [r3, #4]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fe feb8 	bl	8002aec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d120      	bne.n	8003df2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dbe:	d118      	bne.n	8003df2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dea:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f82d 	bl	8003e4c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e00:	d120      	bne.n	8003e44 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e10:	d118      	bne.n	8003e44 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2204      	movs	r2, #4
 8003e16:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f043 0202 	orr.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f85d 	bl	8003efe <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	795b      	ldrb	r3, [r3, #5]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_DAC_ConfigChannel+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e03c      	b.n	8003ef2 <HAL_DAC_ConfigChannel+0x92>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2202      	movs	r2, #2
 8003e82:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	22c0      	movs	r2, #192	; 0xc0
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f20:	f7ff fb7e 	bl	8003620 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e099      	b.n	8004064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f50:	e00f      	b.n	8003f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f52:	f7ff fb65 	bl	8003620 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d908      	bls.n	8003f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e078      	b.n	8004064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e8      	bne.n	8003f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4b38      	ldr	r3, [pc, #224]	; (800406c <HAL_DMA_Init+0x158>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0307 	bic.w	r3, r3, #7
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b04      	cmp	r3, #4
 8004004:	d117      	bne.n	8004036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f94f 	bl	80042bc <DMA_CheckFifoParam>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2240      	movs	r2, #64	; 0x40
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004032:	2301      	movs	r3, #1
 8004034:	e016      	b.n	8004064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f906 	bl	8004250 <DMA_CalcBaseAndBitshift>
 8004044:	4603      	mov	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	223f      	movs	r2, #63	; 0x3f
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	f010803f 	.word	0xf010803f

08004070 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e050      	b.n	8004124 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d101      	bne.n	8004092 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
 8004090:	e048      	b.n	8004124 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2221      	movs	r2, #33	; 0x21
 80040d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f8bc 	bl	8004250 <DMA_CalcBaseAndBitshift>
 80040d8:	4603      	mov	r3, r0
 80040da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	223f      	movs	r2, #63	; 0x3f
 80040e2:	409a      	lsls	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800413a:	f7ff fa71 	bl	8003620 <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d008      	beq.n	800415e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2280      	movs	r2, #128	; 0x80
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e052      	b.n	8004204 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0216 	bic.w	r2, r2, #22
 800416c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800417c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <HAL_DMA_Abort+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0208 	bic.w	r2, r2, #8
 800419c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ae:	e013      	b.n	80041d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041b0:	f7ff fa36 	bl	8003620 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d90c      	bls.n	80041d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2203      	movs	r2, #3
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e015      	b.n	8004204 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e4      	bne.n	80041b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	223f      	movs	r2, #63	; 0x3f
 80041ec:	409a      	lsls	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d004      	beq.n	800422a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e00c      	b.n	8004244 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2205      	movs	r2, #5
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	3b10      	subs	r3, #16
 8004260:	4a13      	ldr	r2, [pc, #76]	; (80042b0 <DMA_CalcBaseAndBitshift+0x60>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <DMA_CalcBaseAndBitshift+0x64>)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d908      	bls.n	8004290 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004286:	4013      	ands	r3, r2
 8004288:	1d1a      	adds	r2, r3, #4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	659a      	str	r2, [r3, #88]	; 0x58
 800428e:	e006      	b.n	800429e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	aaaaaaab 	.word	0xaaaaaaab
 80042b4:	0800d994 	.word	0x0800d994
 80042b8:	fffffc00 	.word	0xfffffc00

080042bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d11f      	bne.n	8004316 <DMA_CheckFifoParam+0x5a>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d856      	bhi.n	800438a <DMA_CheckFifoParam+0xce>
 80042dc:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <DMA_CheckFifoParam+0x28>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	080042f5 	.word	0x080042f5
 80042e8:	08004307 	.word	0x08004307
 80042ec:	080042f5 	.word	0x080042f5
 80042f0:	0800438b 	.word	0x0800438b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d046      	beq.n	800438e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004304:	e043      	b.n	800438e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800430e:	d140      	bne.n	8004392 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004314:	e03d      	b.n	8004392 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d121      	bne.n	8004364 <DMA_CheckFifoParam+0xa8>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b03      	cmp	r3, #3
 8004324:	d837      	bhi.n	8004396 <DMA_CheckFifoParam+0xda>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <DMA_CheckFifoParam+0x70>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	0800433d 	.word	0x0800433d
 8004330:	08004343 	.word	0x08004343
 8004334:	0800433d 	.word	0x0800433d
 8004338:	08004355 	.word	0x08004355
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      break;
 8004340:	e030      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d025      	beq.n	800439a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004352:	e022      	b.n	800439a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800435c:	d11f      	bne.n	800439e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004362:	e01c      	b.n	800439e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d903      	bls.n	8004372 <DMA_CheckFifoParam+0xb6>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d003      	beq.n	8004378 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004370:	e018      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
      break;
 8004376:	e015      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	e00b      	b.n	80043a2 <DMA_CheckFifoParam+0xe6>
      break;
 800438a:	bf00      	nop
 800438c:	e00a      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
      break;
 800438e:	bf00      	nop
 8004390:	e008      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004392:	bf00      	nop
 8004394:	e006      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004396:	bf00      	nop
 8004398:	e004      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
      break;
 800439a:	bf00      	nop
 800439c:	e002      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <DMA_CheckFifoParam+0xe8>
      break;
 80043a2:	bf00      	nop
    }
  } 
  
  return status; 
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop

080043b4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e039      	b.n	800443a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe fbce 	bl	8002b7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004404:	f023 0107 	bic.w	r1, r3, #7
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_DMA2D_Init+0x90>)
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68d1      	ldr	r1, [r2, #12]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	430b      	orrs	r3, r1
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	ffffc000 	.word	0xffffc000

08004448 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_DMA2D_Start+0x1c>
 8004460:	2302      	movs	r3, #2
 8004462:	e018      	b.n	8004496 <HAL_DMA2D_Start+0x4e>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 f988 	bl	8004794 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d056      	beq.n	8004568 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80044ba:	f7ff f8b1 	bl	8003620 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80044c0:	e04b      	b.n	800455a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	f043 0202 	orr.w	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2221      	movs	r2, #33	; 0x21
 8004506:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2204      	movs	r2, #4
 800450c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0a5      	b.n	8004668 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d01a      	beq.n	800455a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004524:	f7ff f87c 	bl	8003620 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d302      	bcc.n	800453a <HAL_DMA2D_PollForTransfer+0x9c>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e086      	b.n	8004668 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ac      	beq.n	80044c2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d061      	beq.n	800464e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800458a:	f7ff f849 	bl	8003620 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004590:	e056      	b.n	8004640 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02e      	beq.n	8004602 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	f043 0204 	orr.w	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	f043 0202 	orr.w	r2, r3, #2
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2229      	movs	r2, #41	; 0x29
 80045ec:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2204      	movs	r2, #4
 80045f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e032      	b.n	8004668 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d01a      	beq.n	8004640 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7ff f809 	bl	8003620 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <HAL_DMA2D_PollForTransfer+0x182>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10f      	bne.n	8004640 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2203      	movs	r2, #3
 8004630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e013      	b.n	8004668 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0a1      	beq.n	8004592 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2212      	movs	r2, #18
 8004654:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_DMA2D_ConfigLayer+0x20>
 800468c:	2302      	movs	r3, #2
 800468e:	e079      	b.n	8004784 <HAL_DMA2D_ConfigLayer+0x114>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	3318      	adds	r3, #24
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80046ba:	4b35      	ldr	r3, [pc, #212]	; (8004790 <HAL_DMA2D_ConfigLayer+0x120>)
 80046bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b0a      	cmp	r3, #10
 80046c4:	d003      	beq.n	80046ce <HAL_DMA2D_ConfigLayer+0x5e>
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b09      	cmp	r3, #9
 80046cc:	d107      	bne.n	80046de <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e005      	b.n	80046ea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d120      	bne.n	8004732 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	ea02 0103 	and.w	r1, r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	430a      	orrs	r2, r1
 8004706:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b0a      	cmp	r3, #10
 8004718:	d003      	beq.n	8004722 <HAL_DMA2D_ConfigLayer+0xb2>
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b09      	cmp	r3, #9
 8004720:	d127      	bne.n	8004772 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800472e:	629a      	str	r2, [r3, #40]	; 0x28
 8004730:	e01f      	b.n	8004772 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	ea02 0103 	and.w	r1, r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	430a      	orrs	r2, r1
 8004748:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b0a      	cmp	r3, #10
 800475a:	d003      	beq.n	8004764 <HAL_DMA2D_ConfigLayer+0xf4>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b09      	cmp	r3, #9
 8004762:	d106      	bne.n	8004772 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004770:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	ff03000f 	.word	0xff03000f

08004794 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004794:	b480      	push	{r7}
 8004796:	b08b      	sub	sp, #44	; 0x2c
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	041a      	lsls	r2, r3, #16
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047cc:	d174      	bne.n	80048b8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80047d4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047dc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80047e4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d108      	bne.n	8004806 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	e053      	b.n	80048ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d106      	bne.n	800481c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4313      	orrs	r3, r2
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
 800481a:	e048      	b.n	80048ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d111      	bne.n	8004848 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	0cdb      	lsrs	r3, r3, #19
 8004828:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	0a9b      	lsrs	r3, r3, #10
 800482e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	08db      	lsrs	r3, r3, #3
 8004834:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	02db      	lsls	r3, r3, #11
 800483e:	4313      	orrs	r3, r2
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
 8004846:	e032      	b.n	80048ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d117      	bne.n	8004880 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	0fdb      	lsrs	r3, r3, #31
 8004854:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	0cdb      	lsrs	r3, r3, #19
 800485a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	0adb      	lsrs	r3, r3, #11
 8004860:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	029b      	lsls	r3, r3, #10
 8004870:	431a      	orrs	r2, r3
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	03db      	lsls	r3, r3, #15
 8004876:	4313      	orrs	r3, r2
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
 800487e:	e016      	b.n	80048ae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	0f1b      	lsrs	r3, r3, #28
 8004884:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	0d1b      	lsrs	r3, r3, #20
 800488a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	0b1b      	lsrs	r3, r3, #12
 8004890:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	011a      	lsls	r2, r3, #4
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	431a      	orrs	r2, r3
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	031b      	lsls	r3, r3, #12
 80048a6:	4313      	orrs	r3, r2
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80048b6:	e003      	b.n	80048c0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	60da      	str	r2, [r3, #12]
}
 80048c0:	bf00      	nop
 80048c2:	372c      	adds	r7, #44	; 0x2c
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	e175      	b.n	8004bd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80048ec:	2201      	movs	r2, #1
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	429a      	cmp	r2, r3
 8004906:	f040 8164 	bne.w	8004bd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d00b      	beq.n	800492a <HAL_GPIO_Init+0x5e>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d007      	beq.n	800492a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800491e:	2b11      	cmp	r3, #17
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b12      	cmp	r3, #18
 8004928:	d130      	bne.n	800498c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	2203      	movs	r2, #3
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004960:	2201      	movs	r2, #1
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 0201 	and.w	r2, r3, #1
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x100>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b12      	cmp	r3, #18
 80049ca:	d123      	bne.n	8004a14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	08da      	lsrs	r2, r3, #3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3208      	adds	r2, #8
 80049d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	220f      	movs	r2, #15
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	08da      	lsrs	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3208      	adds	r2, #8
 8004a0e:	69b9      	ldr	r1, [r7, #24]
 8004a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 0203 	and.w	r2, r3, #3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80be 	beq.w	8004bd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a56:	4b66      	ldr	r3, [pc, #408]	; (8004bf0 <HAL_GPIO_Init+0x324>)
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	4a65      	ldr	r2, [pc, #404]	; (8004bf0 <HAL_GPIO_Init+0x324>)
 8004a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a60:	6453      	str	r3, [r2, #68]	; 0x44
 8004a62:	4b63      	ldr	r3, [pc, #396]	; (8004bf0 <HAL_GPIO_Init+0x324>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004a6e:	4a61      	ldr	r2, [pc, #388]	; (8004bf4 <HAL_GPIO_Init+0x328>)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	3302      	adds	r3, #2
 8004a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	220f      	movs	r2, #15
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a58      	ldr	r2, [pc, #352]	; (8004bf8 <HAL_GPIO_Init+0x32c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d037      	beq.n	8004b0a <HAL_GPIO_Init+0x23e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a57      	ldr	r2, [pc, #348]	; (8004bfc <HAL_GPIO_Init+0x330>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d031      	beq.n	8004b06 <HAL_GPIO_Init+0x23a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a56      	ldr	r2, [pc, #344]	; (8004c00 <HAL_GPIO_Init+0x334>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02b      	beq.n	8004b02 <HAL_GPIO_Init+0x236>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a55      	ldr	r2, [pc, #340]	; (8004c04 <HAL_GPIO_Init+0x338>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d025      	beq.n	8004afe <HAL_GPIO_Init+0x232>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a54      	ldr	r2, [pc, #336]	; (8004c08 <HAL_GPIO_Init+0x33c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01f      	beq.n	8004afa <HAL_GPIO_Init+0x22e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a53      	ldr	r2, [pc, #332]	; (8004c0c <HAL_GPIO_Init+0x340>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d019      	beq.n	8004af6 <HAL_GPIO_Init+0x22a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a52      	ldr	r2, [pc, #328]	; (8004c10 <HAL_GPIO_Init+0x344>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_GPIO_Init+0x226>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a51      	ldr	r2, [pc, #324]	; (8004c14 <HAL_GPIO_Init+0x348>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00d      	beq.n	8004aee <HAL_GPIO_Init+0x222>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a50      	ldr	r2, [pc, #320]	; (8004c18 <HAL_GPIO_Init+0x34c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <HAL_GPIO_Init+0x21e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a4f      	ldr	r2, [pc, #316]	; (8004c1c <HAL_GPIO_Init+0x350>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_GPIO_Init+0x21a>
 8004ae2:	2309      	movs	r3, #9
 8004ae4:	e012      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004ae6:	230a      	movs	r3, #10
 8004ae8:	e010      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004aea:	2308      	movs	r3, #8
 8004aec:	e00e      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004aee:	2307      	movs	r3, #7
 8004af0:	e00c      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004af2:	2306      	movs	r3, #6
 8004af4:	e00a      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004af6:	2305      	movs	r3, #5
 8004af8:	e008      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004afa:	2304      	movs	r3, #4
 8004afc:	e006      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004afe:	2303      	movs	r3, #3
 8004b00:	e004      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e002      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_GPIO_Init+0x240>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	f002 0203 	and.w	r2, r2, #3
 8004b12:	0092      	lsls	r2, r2, #2
 8004b14:	4093      	lsls	r3, r2
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b1c:	4935      	ldr	r1, [pc, #212]	; (8004bf4 <HAL_GPIO_Init+0x328>)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	3302      	adds	r3, #2
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b2a:	4b3d      	ldr	r3, [pc, #244]	; (8004c20 <HAL_GPIO_Init+0x354>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b4e:	4a34      	ldr	r2, [pc, #208]	; (8004c20 <HAL_GPIO_Init+0x354>)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b54:	4b32      	ldr	r3, [pc, #200]	; (8004c20 <HAL_GPIO_Init+0x354>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <HAL_GPIO_Init+0x354>)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b7e:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <HAL_GPIO_Init+0x354>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ba2:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <HAL_GPIO_Init+0x354>)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_GPIO_Init+0x354>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <HAL_GPIO_Init+0x354>)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b0f      	cmp	r3, #15
 8004bdc:	f67f ae86 	bls.w	80048ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3724      	adds	r7, #36	; 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40013800 	.word	0x40013800
 8004bf8:	40020000 	.word	0x40020000
 8004bfc:	40020400 	.word	0x40020400
 8004c00:	40020800 	.word	0x40020800
 8004c04:	40020c00 	.word	0x40020c00
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40021400 	.word	0x40021400
 8004c10:	40021800 	.word	0x40021800
 8004c14:	40021c00 	.word	0x40021c00
 8004c18:	40022000 	.word	0x40022000
 8004c1c:	40022400 	.word	0x40022400
 8004c20:	40013c00 	.word	0x40013c00

08004c24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	e0d9      	b.n	8004df4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c40:	2201      	movs	r2, #1
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f040 80c9 	bne.w	8004dee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004c5c:	4a6b      	ldr	r2, [pc, #428]	; (8004e0c <HAL_GPIO_DeInit+0x1e8>)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	3302      	adds	r3, #2
 8004c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c68:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	220f      	movs	r2, #15
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a63      	ldr	r2, [pc, #396]	; (8004e10 <HAL_GPIO_DeInit+0x1ec>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d037      	beq.n	8004cf6 <HAL_GPIO_DeInit+0xd2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a62      	ldr	r2, [pc, #392]	; (8004e14 <HAL_GPIO_DeInit+0x1f0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <HAL_GPIO_DeInit+0xce>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a61      	ldr	r2, [pc, #388]	; (8004e18 <HAL_GPIO_DeInit+0x1f4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d02b      	beq.n	8004cee <HAL_GPIO_DeInit+0xca>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a60      	ldr	r2, [pc, #384]	; (8004e1c <HAL_GPIO_DeInit+0x1f8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d025      	beq.n	8004cea <HAL_GPIO_DeInit+0xc6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a5f      	ldr	r2, [pc, #380]	; (8004e20 <HAL_GPIO_DeInit+0x1fc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01f      	beq.n	8004ce6 <HAL_GPIO_DeInit+0xc2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a5e      	ldr	r2, [pc, #376]	; (8004e24 <HAL_GPIO_DeInit+0x200>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d019      	beq.n	8004ce2 <HAL_GPIO_DeInit+0xbe>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a5d      	ldr	r2, [pc, #372]	; (8004e28 <HAL_GPIO_DeInit+0x204>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_GPIO_DeInit+0xba>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a5c      	ldr	r2, [pc, #368]	; (8004e2c <HAL_GPIO_DeInit+0x208>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00d      	beq.n	8004cda <HAL_GPIO_DeInit+0xb6>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a5b      	ldr	r2, [pc, #364]	; (8004e30 <HAL_GPIO_DeInit+0x20c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <HAL_GPIO_DeInit+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a5a      	ldr	r2, [pc, #360]	; (8004e34 <HAL_GPIO_DeInit+0x210>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <HAL_GPIO_DeInit+0xae>
 8004cce:	2309      	movs	r3, #9
 8004cd0:	e012      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	e010      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	e00e      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004cda:	2307      	movs	r3, #7
 8004cdc:	e00c      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004cde:	2306      	movs	r3, #6
 8004ce0:	e00a      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004ce2:	2305      	movs	r3, #5
 8004ce4:	e008      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	e006      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004cea:	2303      	movs	r3, #3
 8004cec:	e004      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e002      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_GPIO_DeInit+0xd4>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	f002 0203 	and.w	r2, r2, #3
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	4093      	lsls	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d132      	bne.n	8004d6e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d08:	4b4b      	ldr	r3, [pc, #300]	; (8004e38 <HAL_GPIO_DeInit+0x214>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	4949      	ldr	r1, [pc, #292]	; (8004e38 <HAL_GPIO_DeInit+0x214>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d16:	4b48      	ldr	r3, [pc, #288]	; (8004e38 <HAL_GPIO_DeInit+0x214>)
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	4946      	ldr	r1, [pc, #280]	; (8004e38 <HAL_GPIO_DeInit+0x214>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d24:	4b44      	ldr	r3, [pc, #272]	; (8004e38 <HAL_GPIO_DeInit+0x214>)
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	4942      	ldr	r1, [pc, #264]	; (8004e38 <HAL_GPIO_DeInit+0x214>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004d32:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <HAL_GPIO_DeInit+0x214>)
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	493f      	ldr	r1, [pc, #252]	; (8004e38 <HAL_GPIO_DeInit+0x214>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	220f      	movs	r2, #15
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004d50:	4a2e      	ldr	r2, [pc, #184]	; (8004e0c <HAL_GPIO_DeInit+0x1e8>)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	3302      	adds	r3, #2
 8004d58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	482a      	ldr	r0, [pc, #168]	; (8004e0c <HAL_GPIO_DeInit+0x1e8>)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	089b      	lsrs	r3, r3, #2
 8004d66:	400a      	ands	r2, r1
 8004d68:	3302      	adds	r3, #2
 8004d6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	2103      	movs	r1, #3
 8004d78:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	401a      	ands	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	08da      	lsrs	r2, r3, #3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3208      	adds	r2, #8
 8004d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	220f      	movs	r2, #15
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	08d2      	lsrs	r2, r2, #3
 8004da4:	4019      	ands	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3208      	adds	r2, #8
 8004daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	2103      	movs	r1, #3
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	2101      	movs	r1, #1
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	2103      	movs	r1, #3
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	43db      	mvns	r3, r3
 8004de8:	401a      	ands	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	3301      	adds	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b0f      	cmp	r3, #15
 8004df8:	f67f af22 	bls.w	8004c40 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40013800 	.word	0x40013800
 8004e10:	40020000 	.word	0x40020000
 8004e14:	40020400 	.word	0x40020400
 8004e18:	40020800 	.word	0x40020800
 8004e1c:	40020c00 	.word	0x40020c00
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40021400 	.word	0x40021400
 8004e28:	40021800 	.word	0x40021800
 8004e2c:	40021c00 	.word	0x40021c00
 8004e30:	40022000 	.word	0x40022000
 8004e34:	40022400 	.word	0x40022400
 8004e38:	40013c00 	.word	0x40013c00

08004e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	807b      	strh	r3, [r7, #2]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e4c:	787b      	ldrb	r3, [r7, #1]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004e58:	e003      	b.n	8004e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e5a:	887b      	ldrh	r3, [r7, #2]
 8004e5c:	041a      	lsls	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	619a      	str	r2, [r3, #24]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e07f      	b.n	8004f82 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fd fe90 	bl	8002bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2224      	movs	r2, #36	; 0x24
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ec0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d107      	bne.n	8004eea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	e006      	b.n	8004ef8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ef6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d104      	bne.n	8004f0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <HAL_I2C_Init+0x11c>)
 8004f16:	430b      	orrs	r3, r1
 8004f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	ea42 0103 	orr.w	r1, r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	021a      	lsls	r2, r3, #8
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	02008000 	.word	0x02008000

08004f90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e021      	b.n	8004fe6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2224      	movs	r2, #36	; 0x24
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fd fe76 	bl	8002cac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	817b      	strh	r3, [r7, #10]
 8005002:	460b      	mov	r3, r1
 8005004:	813b      	strh	r3, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b20      	cmp	r3, #32
 8005014:	f040 80f9 	bne.w	800520a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_I2C_Mem_Write+0x34>
 800501e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800502a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0ed      	b.n	800520c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_I2C_Mem_Write+0x4e>
 800503a:	2302      	movs	r3, #2
 800503c:	e0e6      	b.n	800520c <HAL_I2C_Mem_Write+0x21c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005046:	f7fe faeb 	bl	8003620 <HAL_GetTick>
 800504a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2319      	movs	r3, #25
 8005052:	2201      	movs	r2, #1
 8005054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fad1 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0d1      	b.n	800520c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2221      	movs	r2, #33	; 0x21
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2240      	movs	r2, #64	; 0x40
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005088:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005090:	88f8      	ldrh	r0, [r7, #6]
 8005092:	893a      	ldrh	r2, [r7, #8]
 8005094:	8979      	ldrh	r1, [r7, #10]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	4603      	mov	r3, r0
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f9e1 	bl	8005468 <I2C_RequestMemoryWrite>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0a9      	b.n	800520c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2bff      	cmp	r3, #255	; 0xff
 80050c0:	d90e      	bls.n	80050e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	22ff      	movs	r2, #255	; 0xff
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	8979      	ldrh	r1, [r7, #10]
 80050d0:	2300      	movs	r3, #0
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fbb3 	bl	8005844 <I2C_TransferConfig>
 80050de:	e00f      	b.n	8005100 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	8979      	ldrh	r1, [r7, #10]
 80050f2:	2300      	movs	r3, #0
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fba2 	bl	8005844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fabb 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e07b      	b.n	800520c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d034      	beq.n	80051b8 <HAL_I2C_Mem_Write+0x1c8>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d130      	bne.n	80051b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	2200      	movs	r2, #0
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fa4d 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e04d      	b.n	800520c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2bff      	cmp	r3, #255	; 0xff
 8005178:	d90e      	bls.n	8005198 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	22ff      	movs	r2, #255	; 0xff
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	b2da      	uxtb	r2, r3
 8005186:	8979      	ldrh	r1, [r7, #10]
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fb57 	bl	8005844 <I2C_TransferConfig>
 8005196:	e00f      	b.n	80051b8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	8979      	ldrh	r1, [r7, #10]
 80051aa:	2300      	movs	r3, #0
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fb46 	bl	8005844 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d19e      	bne.n	8005100 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fa9a 	bl	8005700 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e01a      	b.n	800520c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2220      	movs	r2, #32
 80051dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_I2C_Mem_Write+0x224>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	e000      	b.n	800520c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800520a:	2302      	movs	r3, #2
  }
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	fe00e800 	.word	0xfe00e800

08005218 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	817b      	strh	r3, [r7, #10]
 800522a:	460b      	mov	r3, r1
 800522c:	813b      	strh	r3, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b20      	cmp	r3, #32
 800523c:	f040 80fd 	bne.w	800543a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_I2C_Mem_Read+0x34>
 8005246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005252:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0f1      	b.n	800543c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_I2C_Mem_Read+0x4e>
 8005262:	2302      	movs	r3, #2
 8005264:	e0ea      	b.n	800543c <HAL_I2C_Mem_Read+0x224>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800526e:	f7fe f9d7 	bl	8003620 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2319      	movs	r3, #25
 800527a:	2201      	movs	r2, #1
 800527c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f9bd 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0d5      	b.n	800543c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2222      	movs	r2, #34	; 0x22
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2240      	movs	r2, #64	; 0x40
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052b8:	88f8      	ldrh	r0, [r7, #6]
 80052ba:	893a      	ldrh	r2, [r7, #8]
 80052bc:	8979      	ldrh	r1, [r7, #10]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	4603      	mov	r3, r0
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f921 	bl	8005510 <I2C_RequestMemoryRead>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0ad      	b.n	800543c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2bff      	cmp	r3, #255	; 0xff
 80052e8:	d90e      	bls.n	8005308 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	8979      	ldrh	r1, [r7, #10]
 80052f8:	4b52      	ldr	r3, [pc, #328]	; (8005444 <HAL_I2C_Mem_Read+0x22c>)
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fa9f 	bl	8005844 <I2C_TransferConfig>
 8005306:	e00f      	b.n	8005328 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005316:	b2da      	uxtb	r2, r3
 8005318:	8979      	ldrh	r1, [r7, #10]
 800531a:	4b4a      	ldr	r3, [pc, #296]	; (8005444 <HAL_I2C_Mem_Read+0x22c>)
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fa8e 	bl	8005844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	2200      	movs	r2, #0
 8005330:	2104      	movs	r1, #4
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f964 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e07c      	b.n	800543c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d034      	beq.n	80053e8 <HAL_I2C_Mem_Read+0x1d0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d130      	bne.n	80053e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	2200      	movs	r2, #0
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f935 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e04d      	b.n	800543c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2bff      	cmp	r3, #255	; 0xff
 80053a8:	d90e      	bls.n	80053c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	8979      	ldrh	r1, [r7, #10]
 80053b8:	2300      	movs	r3, #0
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fa3f 	bl	8005844 <I2C_TransferConfig>
 80053c6:	e00f      	b.n	80053e8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	8979      	ldrh	r1, [r7, #10]
 80053da:	2300      	movs	r3, #0
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fa2e 	bl	8005844 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d19a      	bne.n	8005328 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f982 	bl	8005700 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e01a      	b.n	800543c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2220      	movs	r2, #32
 800540c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_I2C_Mem_Read+0x230>)
 800541a:	400b      	ands	r3, r1
 800541c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e000      	b.n	800543c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
  }
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	80002400 	.word	0x80002400
 8005448:	fe00e800 	.word	0xfe00e800

0800544c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800545a:	b2db      	uxtb	r3, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	461a      	mov	r2, r3
 8005476:	4603      	mov	r3, r0
 8005478:	817b      	strh	r3, [r7, #10]
 800547a:	460b      	mov	r3, r1
 800547c:	813b      	strh	r3, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	8979      	ldrh	r1, [r7, #10]
 8005488:	4b20      	ldr	r3, [pc, #128]	; (800550c <I2C_RequestMemoryWrite+0xa4>)
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f9d7 	bl	8005844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	69b9      	ldr	r1, [r7, #24]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f8f0 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e02c      	b.n	8005504 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d105      	bne.n	80054bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054b0:	893b      	ldrh	r3, [r7, #8]
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	629a      	str	r2, [r3, #40]	; 0x28
 80054ba:	e015      	b.n	80054e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054bc:	893b      	ldrh	r3, [r7, #8]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	69b9      	ldr	r1, [r7, #24]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f8d6 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e012      	b.n	8005504 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054de:	893b      	ldrh	r3, [r7, #8]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2200      	movs	r2, #0
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f884 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	80002000 	.word	0x80002000

08005510 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	4608      	mov	r0, r1
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	4603      	mov	r3, r0
 8005520:	817b      	strh	r3, [r7, #10]
 8005522:	460b      	mov	r3, r1
 8005524:	813b      	strh	r3, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	8979      	ldrh	r1, [r7, #10]
 8005530:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <I2C_RequestMemoryRead+0xa4>)
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2300      	movs	r3, #0
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f984 	bl	8005844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	69b9      	ldr	r1, [r7, #24]
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f89d 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e02c      	b.n	80055aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005556:	893b      	ldrh	r3, [r7, #8]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	629a      	str	r2, [r3, #40]	; 0x28
 8005560:	e015      	b.n	800558e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005562:	893b      	ldrh	r3, [r7, #8]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	b29b      	uxth	r3, r3
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	69b9      	ldr	r1, [r7, #24]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f883 	bl	8005680 <I2C_WaitOnTXISFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e012      	b.n	80055aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005584:	893b      	ldrh	r3, [r7, #8]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2200      	movs	r2, #0
 8005596:	2140      	movs	r1, #64	; 0x40
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 f831 	bl	8005600 <I2C_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	80002000 	.word	0x80002000

080055b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d103      	bne.n	80055d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d007      	beq.n	80055f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	619a      	str	r2, [r3, #24]
  }
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005610:	e022      	b.n	8005658 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d01e      	beq.n	8005658 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fe f801 	bl	8003620 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <I2C_WaitOnFlagUntilTimeout+0x30>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d113      	bne.n	8005658 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e00f      	b.n	8005678 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4013      	ands	r3, r2
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	429a      	cmp	r2, r3
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	429a      	cmp	r2, r3
 8005674:	d0cd      	beq.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800568c:	e02c      	b.n	80056e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f870 	bl	8005778 <I2C_IsAcknowledgeFailed>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e02a      	b.n	80056f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d01e      	beq.n	80056e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056aa:	f7fd ffb9 	bl	8003620 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d302      	bcc.n	80056c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d113      	bne.n	80056e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e007      	b.n	80056f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d1cb      	bne.n	800568e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800570c:	e028      	b.n	8005760 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f830 	bl	8005778 <I2C_IsAcknowledgeFailed>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e026      	b.n	8005770 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005722:	f7fd ff7d 	bl	8003620 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	429a      	cmp	r2, r3
 8005730:	d302      	bcc.n	8005738 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d113      	bne.n	8005760 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e007      	b.n	8005770 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b20      	cmp	r3, #32
 800576c:	d1cf      	bne.n	800570e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b10      	cmp	r3, #16
 8005790:	d151      	bne.n	8005836 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005792:	e022      	b.n	80057da <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d01e      	beq.n	80057da <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579c:	f7fd ff40 	bl	8003620 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d302      	bcc.n	80057b2 <I2C_IsAcknowledgeFailed+0x3a>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d113      	bne.n	80057da <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e02e      	b.n	8005838 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d1d5      	bne.n	8005794 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2210      	movs	r2, #16
 80057ee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2220      	movs	r2, #32
 80057f6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7ff fedd 	bl	80055b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <I2C_IsAcknowledgeFailed+0xc8>)
 800580a:	400b      	ands	r3, r1
 800580c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005812:	f043 0204 	orr.w	r2, r3, #4
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	fe00e800 	.word	0xfe00e800

08005844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	817b      	strh	r3, [r7, #10]
 8005852:	4613      	mov	r3, r2
 8005854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	0d5b      	lsrs	r3, r3, #21
 8005860:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005864:	4b0d      	ldr	r3, [pc, #52]	; (800589c <I2C_TransferConfig+0x58>)
 8005866:	430b      	orrs	r3, r1
 8005868:	43db      	mvns	r3, r3
 800586a:	ea02 0103 	and.w	r1, r2, r3
 800586e:	897b      	ldrh	r3, [r7, #10]
 8005870:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005874:	7a7b      	ldrb	r3, [r7, #9]
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	431a      	orrs	r2, r3
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	03ff63ff 	.word	0x03ff63ff

080058a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d138      	bne.n	8005928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e032      	b.n	800592a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2224      	movs	r2, #36	; 0x24
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	e000      	b.n	800592a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005928:	2302      	movs	r3, #2
  }
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b20      	cmp	r3, #32
 800594a:	d139      	bne.n	80059c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005956:	2302      	movs	r3, #2
 8005958:	e033      	b.n	80059c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2224      	movs	r2, #36	; 0x24
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005988:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e000      	b.n	80059c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
  }
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e0bf      	b.n	8005b62 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fd f994 	bl	8002d24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005a12:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6999      	ldr	r1, [r3, #24]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a28:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6899      	ldr	r1, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b4a      	ldr	r3, [pc, #296]	; (8005b6c <HAL_LTDC_Init+0x19c>)
 8005a44:	400b      	ands	r3, r1
 8005a46:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6899      	ldr	r1, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68d9      	ldr	r1, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b3e      	ldr	r3, [pc, #248]	; (8005b6c <HAL_LTDC_Init+0x19c>)
 8005a72:	400b      	ands	r3, r1
 8005a74:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	041b      	lsls	r3, r3, #16
 8005a7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68d9      	ldr	r1, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1a      	ldr	r2, [r3, #32]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6919      	ldr	r1, [r3, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b33      	ldr	r3, [pc, #204]	; (8005b6c <HAL_LTDC_Init+0x19c>)
 8005aa0:	400b      	ands	r3, r1
 8005aa2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6919      	ldr	r1, [r3, #16]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6959      	ldr	r1, [r3, #20]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	4b27      	ldr	r3, [pc, #156]	; (8005b6c <HAL_LTDC_Init+0x19c>)
 8005ace:	400b      	ands	r3, r1
 8005ad0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	041b      	lsls	r3, r3, #16
 8005ad8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6959      	ldr	r1, [r3, #20]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0206 	orr.w	r2, r2, #6
 8005b3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	f000f800 	.word	0xf000f800

08005b70 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d023      	beq.n	8005bda <HAL_LTDC_IRQHandler+0x6a>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01e      	beq.n	8005bda <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0204 	bic.w	r2, r2, #4
 8005baa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bba:	f043 0201 	orr.w	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f86f 	bl	8005cb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d023      	beq.n	8005c2c <HAL_LTDC_IRQHandler+0xbc>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01e      	beq.n	8005c2c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0202 	bic.w	r2, r2, #2
 8005bfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2202      	movs	r2, #2
 8005c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c0c:	f043 0202 	orr.w	r2, r3, #2
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2204      	movs	r2, #4
 8005c1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f846 	bl	8005cb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01b      	beq.n	8005c6e <HAL_LTDC_IRQHandler+0xfe>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d016      	beq.n	8005c6e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2201      	movs	r2, #1
 8005c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f82f 	bl	8005ccc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01b      	beq.n	8005cb0 <HAL_LTDC_IRQHandler+0x140>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0208 	bic.w	r2, r2, #8
 8005c90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2208      	movs	r2, #8
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f818 	bl	8005ce0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005cf4:	b5b0      	push	{r4, r5, r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_LTDC_ConfigLayer+0x1a>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e02c      	b.n	8005d68 <HAL_LTDC_ConfigLayer+0x74>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2134      	movs	r1, #52	; 0x34
 8005d24:	fb01 f303 	mul.w	r3, r1, r3
 8005d28:	4413      	add	r3, r2
 8005d2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4614      	mov	r4, r2
 8005d32:	461d      	mov	r5, r3
 8005d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f81f 	bl	8005d8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2201      	movs	r2, #1
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bdb0      	pop	{r4, r5, r7, pc}

08005d70 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d7e:	b2db      	uxtb	r3, r3
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b089      	sub	sp, #36	; 0x24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	0c1b      	lsrs	r3, r3, #16
 8005da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da8:	4413      	add	r3, r2
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	01db      	lsls	r3, r3, #7
 8005db8:	4413      	add	r3, r2
 8005dba:	3384      	adds	r3, #132	; 0x84
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	01d2      	lsls	r2, r2, #7
 8005dc8:	440a      	add	r2, r1
 8005dca:	3284      	adds	r2, #132	; 0x84
 8005dcc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005dd0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	0c1b      	lsrs	r3, r3, #16
 8005dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de2:	4413      	add	r3, r2
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	01db      	lsls	r3, r3, #7
 8005df0:	440b      	add	r3, r1
 8005df2:	3384      	adds	r3, #132	; 0x84
 8005df4:	4619      	mov	r1, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e0a:	4413      	add	r3, r2
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3384      	adds	r3, #132	; 0x84
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	6812      	ldr	r2, [r2, #0]
 8005e24:	4611      	mov	r1, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	01d2      	lsls	r2, r2, #7
 8005e2a:	440a      	add	r2, r1
 8005e2c:	3284      	adds	r2, #132	; 0x84
 8005e2e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e32:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e42:	4413      	add	r3, r2
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	01db      	lsls	r3, r3, #7
 8005e50:	440b      	add	r3, r1
 8005e52:	3384      	adds	r3, #132	; 0x84
 8005e54:	4619      	mov	r1, r3
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	01db      	lsls	r3, r3, #7
 8005e66:	4413      	add	r3, r2
 8005e68:	3384      	adds	r3, #132	; 0x84
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	4611      	mov	r1, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	01d2      	lsls	r2, r2, #7
 8005e76:	440a      	add	r2, r1
 8005e78:	3284      	adds	r2, #132	; 0x84
 8005e7a:	f023 0307 	bic.w	r3, r3, #7
 8005e7e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	01db      	lsls	r3, r3, #7
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3384      	adds	r3, #132	; 0x84
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ea6:	041b      	lsls	r3, r3, #16
 8005ea8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	061b      	lsls	r3, r3, #24
 8005eb0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	01db      	lsls	r3, r3, #7
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3384      	adds	r3, #132	; 0x84
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	01db      	lsls	r3, r3, #7
 8005ecc:	4413      	add	r3, r2
 8005ece:	3384      	adds	r3, #132	; 0x84
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005edc:	461a      	mov	r2, r3
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	01db      	lsls	r3, r3, #7
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3384      	adds	r3, #132	; 0x84
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	01db      	lsls	r3, r3, #7
 8005f06:	4413      	add	r3, r2
 8005f08:	3384      	adds	r3, #132	; 0x84
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	4611      	mov	r1, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	01d2      	lsls	r2, r2, #7
 8005f16:	440a      	add	r2, r1
 8005f18:	3284      	adds	r2, #132	; 0x84
 8005f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	01db      	lsls	r3, r3, #7
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3384      	adds	r3, #132	; 0x84
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	01db      	lsls	r3, r3, #7
 8005f40:	4413      	add	r3, r2
 8005f42:	3384      	adds	r3, #132	; 0x84
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	01db      	lsls	r3, r3, #7
 8005f50:	440b      	add	r3, r1
 8005f52:	3384      	adds	r3, #132	; 0x84
 8005f54:	4619      	mov	r1, r3
 8005f56:	4b58      	ldr	r3, [pc, #352]	; (80060b8 <LTDC_SetConfig+0x32c>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	69da      	ldr	r2, [r3, #28]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	68f9      	ldr	r1, [r7, #12]
 8005f66:	6809      	ldr	r1, [r1, #0]
 8005f68:	4608      	mov	r0, r1
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	01c9      	lsls	r1, r1, #7
 8005f6e:	4401      	add	r1, r0
 8005f70:	3184      	adds	r1, #132	; 0x84
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	01db      	lsls	r3, r3, #7
 8005f80:	4413      	add	r3, r2
 8005f82:	3384      	adds	r3, #132	; 0x84
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	01db      	lsls	r3, r3, #7
 8005f90:	4413      	add	r3, r2
 8005f92:	3384      	adds	r3, #132	; 0x84
 8005f94:	461a      	mov	r2, r3
 8005f96:	2300      	movs	r3, #0
 8005f98:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	01db      	lsls	r3, r3, #7
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3384      	adds	r3, #132	; 0x84
 8005fa8:	461a      	mov	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005fb8:	2304      	movs	r3, #4
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	e01b      	b.n	8005ff6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d102      	bne.n	8005fcc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	e014      	b.n	8005ff6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d00b      	beq.n	8005fec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d007      	beq.n	8005fec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d003      	beq.n	8005fec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005fe8:	2b07      	cmp	r3, #7
 8005fea:	d102      	bne.n	8005ff2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005fec:	2302      	movs	r3, #2
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	e001      	b.n	8005ff6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	01db      	lsls	r3, r3, #7
 8006000:	4413      	add	r3, r2
 8006002:	3384      	adds	r3, #132	; 0x84
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	4611      	mov	r1, r2
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	01d2      	lsls	r2, r2, #7
 8006010:	440a      	add	r2, r1
 8006012:	3284      	adds	r2, #132	; 0x84
 8006014:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006018:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	041a      	lsls	r2, r3, #16
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6859      	ldr	r1, [r3, #4]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	1acb      	subs	r3, r1, r3
 8006030:	69f9      	ldr	r1, [r7, #28]
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	3303      	adds	r3, #3
 8006038:	68f9      	ldr	r1, [r7, #12]
 800603a:	6809      	ldr	r1, [r1, #0]
 800603c:	4608      	mov	r0, r1
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	01c9      	lsls	r1, r1, #7
 8006042:	4401      	add	r1, r0
 8006044:	3184      	adds	r1, #132	; 0x84
 8006046:	4313      	orrs	r3, r2
 8006048:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	01db      	lsls	r3, r3, #7
 8006054:	4413      	add	r3, r2
 8006056:	3384      	adds	r3, #132	; 0x84
 8006058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4619      	mov	r1, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	440b      	add	r3, r1
 8006066:	3384      	adds	r3, #132	; 0x84
 8006068:	4619      	mov	r1, r3
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <LTDC_SetConfig+0x330>)
 800606c:	4013      	ands	r3, r2
 800606e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	01db      	lsls	r3, r3, #7
 800607a:	4413      	add	r3, r2
 800607c:	3384      	adds	r3, #132	; 0x84
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	4413      	add	r3, r2
 8006092:	3384      	adds	r3, #132	; 0x84
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	4611      	mov	r1, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	01d2      	lsls	r2, r2, #7
 80060a0:	440a      	add	r2, r1
 80060a2:	3284      	adds	r2, #132	; 0x84
 80060a4:	f043 0301 	orr.w	r3, r3, #1
 80060a8:	6013      	str	r3, [r2, #0]
}
 80060aa:	bf00      	nop
 80060ac:	3724      	adds	r7, #36	; 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	fffff8f8 	.word	0xfffff8f8
 80060bc:	fffff800 	.word	0xfffff800

080060c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a04      	ldr	r2, [pc, #16]	; (80060dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ce:	6013      	str	r3, [r2, #0]
}
 80060d0:	bf00      	nop
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40007000 	.word	0x40007000

080060e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80060ea:	4b23      	ldr	r3, [pc, #140]	; (8006178 <HAL_PWREx_EnableOverDrive+0x98>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	4a22      	ldr	r2, [pc, #136]	; (8006178 <HAL_PWREx_EnableOverDrive+0x98>)
 80060f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f4:	6413      	str	r3, [r2, #64]	; 0x40
 80060f6:	4b20      	ldr	r3, [pc, #128]	; (8006178 <HAL_PWREx_EnableOverDrive+0x98>)
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006102:	4b1e      	ldr	r3, [pc, #120]	; (800617c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1d      	ldr	r2, [pc, #116]	; (800617c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800610e:	f7fd fa87 	bl	8003620 <HAL_GetTick>
 8006112:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006114:	e009      	b.n	800612a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006116:	f7fd fa83 	bl	8003620 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006124:	d901      	bls.n	800612a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e022      	b.n	8006170 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800612a:	4b14      	ldr	r3, [pc, #80]	; (800617c <HAL_PWREx_EnableOverDrive+0x9c>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006136:	d1ee      	bne.n	8006116 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006138:	4b10      	ldr	r3, [pc, #64]	; (800617c <HAL_PWREx_EnableOverDrive+0x9c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a0f      	ldr	r2, [pc, #60]	; (800617c <HAL_PWREx_EnableOverDrive+0x9c>)
 800613e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006142:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006144:	f7fd fa6c 	bl	8003620 <HAL_GetTick>
 8006148:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800614a:	e009      	b.n	8006160 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800614c:	f7fd fa68 	bl	8003620 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800615a:	d901      	bls.n	8006160 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e007      	b.n	8006170 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800616c:	d1ee      	bne.n	800614c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000

08006180 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006188:	2300      	movs	r3, #0
 800618a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e291      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8087 	beq.w	80062b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a4:	4b96      	ldr	r3, [pc, #600]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 030c 	and.w	r3, r3, #12
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d00c      	beq.n	80061ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b0:	4b93      	ldr	r3, [pc, #588]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 030c 	and.w	r3, r3, #12
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d112      	bne.n	80061e2 <HAL_RCC_OscConfig+0x62>
 80061bc:	4b90      	ldr	r3, [pc, #576]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c8:	d10b      	bne.n	80061e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ca:	4b8d      	ldr	r3, [pc, #564]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d06c      	beq.n	80062b0 <HAL_RCC_OscConfig+0x130>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d168      	bne.n	80062b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e26b      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ea:	d106      	bne.n	80061fa <HAL_RCC_OscConfig+0x7a>
 80061ec:	4b84      	ldr	r3, [pc, #528]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a83      	ldr	r2, [pc, #524]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80061f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	e02e      	b.n	8006258 <HAL_RCC_OscConfig+0xd8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10c      	bne.n	800621c <HAL_RCC_OscConfig+0x9c>
 8006202:	4b7f      	ldr	r3, [pc, #508]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a7e      	ldr	r2, [pc, #504]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b7c      	ldr	r3, [pc, #496]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a7b      	ldr	r2, [pc, #492]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e01d      	b.n	8006258 <HAL_RCC_OscConfig+0xd8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006224:	d10c      	bne.n	8006240 <HAL_RCC_OscConfig+0xc0>
 8006226:	4b76      	ldr	r3, [pc, #472]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a75      	ldr	r2, [pc, #468]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 800622c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b73      	ldr	r3, [pc, #460]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a72      	ldr	r2, [pc, #456]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e00b      	b.n	8006258 <HAL_RCC_OscConfig+0xd8>
 8006240:	4b6f      	ldr	r3, [pc, #444]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a6e      	ldr	r2, [pc, #440]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4b6c      	ldr	r3, [pc, #432]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a6b      	ldr	r2, [pc, #428]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d013      	beq.n	8006288 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fd f9de 	bl	8003620 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006268:	f7fd f9da 	bl	8003620 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	; 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e21f      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627a:	4b61      	ldr	r3, [pc, #388]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0xe8>
 8006286:	e014      	b.n	80062b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006288:	f7fd f9ca 	bl	8003620 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006290:	f7fd f9c6 	bl	8003620 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b64      	cmp	r3, #100	; 0x64
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e20b      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a2:	4b57      	ldr	r3, [pc, #348]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x110>
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d069      	beq.n	8006392 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062be:	4b50      	ldr	r3, [pc, #320]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ca:	4b4d      	ldr	r3, [pc, #308]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d11c      	bne.n	8006310 <HAL_RCC_OscConfig+0x190>
 80062d6:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d116      	bne.n	8006310 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e2:	4b47      	ldr	r3, [pc, #284]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_RCC_OscConfig+0x17a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d001      	beq.n	80062fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e1df      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fa:	4b41      	ldr	r3, [pc, #260]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	493d      	ldr	r1, [pc, #244]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 800630a:	4313      	orrs	r3, r2
 800630c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630e:	e040      	b.n	8006392 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d023      	beq.n	8006360 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006318:	4b39      	ldr	r3, [pc, #228]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a38      	ldr	r2, [pc, #224]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fd f97c 	bl	8003620 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800632c:	f7fd f978 	bl	8003620 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e1bd      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633e:	4b30      	ldr	r3, [pc, #192]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634a:	4b2d      	ldr	r3, [pc, #180]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4929      	ldr	r1, [pc, #164]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 800635a:	4313      	orrs	r3, r2
 800635c:	600b      	str	r3, [r1, #0]
 800635e:	e018      	b.n	8006392 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006360:	4b27      	ldr	r3, [pc, #156]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a26      	ldr	r2, [pc, #152]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636c:	f7fd f958 	bl	8003620 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006374:	f7fd f954 	bl	8003620 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e199      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006386:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d038      	beq.n	8006410 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d019      	beq.n	80063da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a6:	4b16      	ldr	r3, [pc, #88]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80063a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80063ac:	f043 0301 	orr.w	r3, r3, #1
 80063b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b2:	f7fd f935 	bl	8003620 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ba:	f7fd f931 	bl	8003620 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e176      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063cc:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80063ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <HAL_RCC_OscConfig+0x23a>
 80063d8:	e01a      	b.n	8006410 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063da:	4b09      	ldr	r3, [pc, #36]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80063dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063de:	4a08      	ldr	r2, [pc, #32]	; (8006400 <HAL_RCC_OscConfig+0x280>)
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e6:	f7fd f91b 	bl	8003620 <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ec:	e00a      	b.n	8006404 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ee:	f7fd f917 	bl	8003620 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d903      	bls.n	8006404 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e15c      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
 8006400:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006404:	4b91      	ldr	r3, [pc, #580]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ee      	bne.n	80063ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80a4 	beq.w	8006566 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800641e:	4b8b      	ldr	r3, [pc, #556]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10d      	bne.n	8006446 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800642a:	4b88      	ldr	r3, [pc, #544]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	4a87      	ldr	r2, [pc, #540]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006434:	6413      	str	r3, [r2, #64]	; 0x40
 8006436:	4b85      	ldr	r3, [pc, #532]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643e:	60bb      	str	r3, [r7, #8]
 8006440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006442:	2301      	movs	r3, #1
 8006444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006446:	4b82      	ldr	r3, [pc, #520]	; (8006650 <HAL_RCC_OscConfig+0x4d0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644e:	2b00      	cmp	r3, #0
 8006450:	d118      	bne.n	8006484 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006452:	4b7f      	ldr	r3, [pc, #508]	; (8006650 <HAL_RCC_OscConfig+0x4d0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a7e      	ldr	r2, [pc, #504]	; (8006650 <HAL_RCC_OscConfig+0x4d0>)
 8006458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800645c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800645e:	f7fd f8df 	bl	8003620 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006466:	f7fd f8db 	bl	8003620 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b64      	cmp	r3, #100	; 0x64
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e120      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006478:	4b75      	ldr	r3, [pc, #468]	; (8006650 <HAL_RCC_OscConfig+0x4d0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d106      	bne.n	800649a <HAL_RCC_OscConfig+0x31a>
 800648c:	4b6f      	ldr	r3, [pc, #444]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	4a6e      	ldr	r2, [pc, #440]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	6713      	str	r3, [r2, #112]	; 0x70
 8006498:	e02d      	b.n	80064f6 <HAL_RCC_OscConfig+0x376>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <HAL_RCC_OscConfig+0x33c>
 80064a2:	4b6a      	ldr	r3, [pc, #424]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	4a69      	ldr	r2, [pc, #420]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	6713      	str	r3, [r2, #112]	; 0x70
 80064ae:	4b67      	ldr	r3, [pc, #412]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	4a66      	ldr	r2, [pc, #408]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064b4:	f023 0304 	bic.w	r3, r3, #4
 80064b8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ba:	e01c      	b.n	80064f6 <HAL_RCC_OscConfig+0x376>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d10c      	bne.n	80064de <HAL_RCC_OscConfig+0x35e>
 80064c4:	4b61      	ldr	r3, [pc, #388]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c8:	4a60      	ldr	r2, [pc, #384]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064ca:	f043 0304 	orr.w	r3, r3, #4
 80064ce:	6713      	str	r3, [r2, #112]	; 0x70
 80064d0:	4b5e      	ldr	r3, [pc, #376]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d4:	4a5d      	ldr	r2, [pc, #372]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	6713      	str	r3, [r2, #112]	; 0x70
 80064dc:	e00b      	b.n	80064f6 <HAL_RCC_OscConfig+0x376>
 80064de:	4b5b      	ldr	r3, [pc, #364]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	4a5a      	ldr	r2, [pc, #360]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ea:	4b58      	ldr	r3, [pc, #352]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	4a57      	ldr	r2, [pc, #348]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80064f0:	f023 0304 	bic.w	r3, r3, #4
 80064f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d015      	beq.n	800652a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fe:	f7fd f88f 	bl	8003620 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006504:	e00a      	b.n	800651c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006506:	f7fd f88b 	bl	8003620 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f241 3288 	movw	r2, #5000	; 0x1388
 8006514:	4293      	cmp	r3, r2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e0ce      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800651c:	4b4b      	ldr	r3, [pc, #300]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0ee      	beq.n	8006506 <HAL_RCC_OscConfig+0x386>
 8006528:	e014      	b.n	8006554 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652a:	f7fd f879 	bl	8003620 <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006530:	e00a      	b.n	8006548 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006532:	f7fd f875 	bl	8003620 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e0b8      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006548:	4b40      	ldr	r3, [pc, #256]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800654a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1ee      	bne.n	8006532 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d105      	bne.n	8006566 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800655a:	4b3c      	ldr	r3, [pc, #240]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	4a3b      	ldr	r2, [pc, #236]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006564:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80a4 	beq.w	80066b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006570:	4b36      	ldr	r3, [pc, #216]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b08      	cmp	r3, #8
 800657a:	d06b      	beq.n	8006654 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	2b02      	cmp	r3, #2
 8006582:	d149      	bne.n	8006618 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006584:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a30      	ldr	r2, [pc, #192]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800658a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fd f846 	bl	8003620 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006598:	f7fd f842 	bl	8003620 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e087      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065aa:	4b28      	ldr	r3, [pc, #160]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	019b      	lsls	r3, r3, #6
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	3b01      	subs	r3, #1
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	061b      	lsls	r3, r3, #24
 80065da:	4313      	orrs	r3, r2
 80065dc:	4a1b      	ldr	r2, [pc, #108]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80065de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065e4:	4b19      	ldr	r3, [pc, #100]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a18      	ldr	r2, [pc, #96]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 80065ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7fd f816 	bl	8003620 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fd f812 	bl	8003620 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e057      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800660a:	4b10      	ldr	r3, [pc, #64]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f0      	beq.n	80065f8 <HAL_RCC_OscConfig+0x478>
 8006616:	e04f      	b.n	80066b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a0b      	ldr	r2, [pc, #44]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 800661e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fc fffc 	bl	8003620 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800662c:	f7fc fff8 	bl	8003620 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e03d      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663e:	4b03      	ldr	r3, [pc, #12]	; (800664c <HAL_RCC_OscConfig+0x4cc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0x4ac>
 800664a:	e035      	b.n	80066b8 <HAL_RCC_OscConfig+0x538>
 800664c:	40023800 	.word	0x40023800
 8006650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <HAL_RCC_OscConfig+0x544>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d028      	beq.n	80066b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800666c:	429a      	cmp	r2, r3
 800666e:	d121      	bne.n	80066b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667a:	429a      	cmp	r2, r3
 800667c:	d11a      	bne.n	80066b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800668a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800668c:	4293      	cmp	r3, r2
 800668e:	d111      	bne.n	80066b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	3b01      	subs	r3, #1
 800669e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d107      	bne.n	80066b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d001      	beq.n	80066b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40023800 	.word	0x40023800

080066c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0d0      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e0:	4b6a      	ldr	r3, [pc, #424]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d910      	bls.n	8006710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ee:	4b67      	ldr	r3, [pc, #412]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f023 020f 	bic.w	r2, r3, #15
 80066f6:	4965      	ldr	r1, [pc, #404]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fe:	4b63      	ldr	r3, [pc, #396]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d001      	beq.n	8006710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0b8      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d020      	beq.n	800675e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006728:	4b59      	ldr	r3, [pc, #356]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4a58      	ldr	r2, [pc, #352]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800672e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006740:	4b53      	ldr	r3, [pc, #332]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	4a52      	ldr	r2, [pc, #328]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800674a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800674c:	4b50      	ldr	r3, [pc, #320]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	494d      	ldr	r1, [pc, #308]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800675a:	4313      	orrs	r3, r2
 800675c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d040      	beq.n	80067ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d107      	bne.n	8006782 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006772:	4b47      	ldr	r3, [pc, #284]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d115      	bne.n	80067aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e07f      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d107      	bne.n	800679a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800678a:	4b41      	ldr	r3, [pc, #260]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e073      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800679a:	4b3d      	ldr	r3, [pc, #244]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e06b      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067aa:	4b39      	ldr	r3, [pc, #228]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f023 0203 	bic.w	r2, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4936      	ldr	r1, [pc, #216]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067bc:	f7fc ff30 	bl	8003620 <HAL_GetTick>
 80067c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c2:	e00a      	b.n	80067da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c4:	f7fc ff2c 	bl	8003620 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e053      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067da:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 020c 	and.w	r2, r3, #12
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d1eb      	bne.n	80067c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067ec:	4b27      	ldr	r3, [pc, #156]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d210      	bcs.n	800681c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fa:	4b24      	ldr	r3, [pc, #144]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f023 020f 	bic.w	r2, r3, #15
 8006802:	4922      	ldr	r1, [pc, #136]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	4313      	orrs	r3, r2
 8006808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800680a:	4b20      	ldr	r3, [pc, #128]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d001      	beq.n	800681c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e032      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006828:	4b19      	ldr	r3, [pc, #100]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	4916      	ldr	r1, [pc, #88]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006836:	4313      	orrs	r3, r2
 8006838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006846:	4b12      	ldr	r3, [pc, #72]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	490e      	ldr	r1, [pc, #56]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006856:	4313      	orrs	r3, r2
 8006858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800685a:	f000 f821 	bl	80068a0 <HAL_RCC_GetSysClockFreq>
 800685e:	4602      	mov	r2, r0
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	091b      	lsrs	r3, r3, #4
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	490a      	ldr	r1, [pc, #40]	; (8006894 <HAL_RCC_ClockConfig+0x1cc>)
 800686c:	5ccb      	ldrb	r3, [r1, r3]
 800686e:	fa22 f303 	lsr.w	r3, r2, r3
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <HAL_RCC_ClockConfig+0x1d0>)
 8006874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <HAL_RCC_ClockConfig+0x1d4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f7fc fdda 	bl	8003434 <HAL_InitTick>

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40023c00 	.word	0x40023c00
 8006890:	40023800 	.word	0x40023800
 8006894:	0800d97c 	.word	0x0800d97c
 8006898:	2000147c 	.word	0x2000147c
 800689c:	20001480 	.word	0x20001480

080068a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a0:	b5b0      	push	{r4, r5, r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80068a6:	2100      	movs	r1, #0
 80068a8:	6079      	str	r1, [r7, #4]
 80068aa:	2100      	movs	r1, #0
 80068ac:	60f9      	str	r1, [r7, #12]
 80068ae:	2100      	movs	r1, #0
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80068b2:	2100      	movs	r1, #0
 80068b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b6:	4952      	ldr	r1, [pc, #328]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80068b8:	6889      	ldr	r1, [r1, #8]
 80068ba:	f001 010c 	and.w	r1, r1, #12
 80068be:	2908      	cmp	r1, #8
 80068c0:	d00d      	beq.n	80068de <HAL_RCC_GetSysClockFreq+0x3e>
 80068c2:	2908      	cmp	r1, #8
 80068c4:	f200 8094 	bhi.w	80069f0 <HAL_RCC_GetSysClockFreq+0x150>
 80068c8:	2900      	cmp	r1, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_RCC_GetSysClockFreq+0x32>
 80068cc:	2904      	cmp	r1, #4
 80068ce:	d003      	beq.n	80068d8 <HAL_RCC_GetSysClockFreq+0x38>
 80068d0:	e08e      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068d2:	4b4c      	ldr	r3, [pc, #304]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x164>)
 80068d4:	60bb      	str	r3, [r7, #8]
      break;
 80068d6:	e08e      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068d8:	4b4b      	ldr	r3, [pc, #300]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x168>)
 80068da:	60bb      	str	r3, [r7, #8]
      break;
 80068dc:	e08b      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068de:	4948      	ldr	r1, [pc, #288]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80068e0:	6849      	ldr	r1, [r1, #4]
 80068e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80068e6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80068e8:	4945      	ldr	r1, [pc, #276]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80068ea:	6849      	ldr	r1, [r1, #4]
 80068ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80068f0:	2900      	cmp	r1, #0
 80068f2:	d024      	beq.n	800693e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068f4:	4942      	ldr	r1, [pc, #264]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80068f6:	6849      	ldr	r1, [r1, #4]
 80068f8:	0989      	lsrs	r1, r1, #6
 80068fa:	4608      	mov	r0, r1
 80068fc:	f04f 0100 	mov.w	r1, #0
 8006900:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006904:	f04f 0500 	mov.w	r5, #0
 8006908:	ea00 0204 	and.w	r2, r0, r4
 800690c:	ea01 0305 	and.w	r3, r1, r5
 8006910:	493d      	ldr	r1, [pc, #244]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x168>)
 8006912:	fb01 f003 	mul.w	r0, r1, r3
 8006916:	2100      	movs	r1, #0
 8006918:	fb01 f102 	mul.w	r1, r1, r2
 800691c:	1844      	adds	r4, r0, r1
 800691e:	493a      	ldr	r1, [pc, #232]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x168>)
 8006920:	fba2 0101 	umull	r0, r1, r2, r1
 8006924:	1863      	adds	r3, r4, r1
 8006926:	4619      	mov	r1, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	461a      	mov	r2, r3
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	f7f9 fc6e 	bl	8000210 <__aeabi_uldivmod>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4613      	mov	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	e04a      	b.n	80069d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800693e:	4b30      	ldr	r3, [pc, #192]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x160>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	099b      	lsrs	r3, r3, #6
 8006944:	461a      	mov	r2, r3
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800694e:	f04f 0100 	mov.w	r1, #0
 8006952:	ea02 0400 	and.w	r4, r2, r0
 8006956:	ea03 0501 	and.w	r5, r3, r1
 800695a:	4620      	mov	r0, r4
 800695c:	4629      	mov	r1, r5
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	014b      	lsls	r3, r1, #5
 8006968:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800696c:	0142      	lsls	r2, r0, #5
 800696e:	4610      	mov	r0, r2
 8006970:	4619      	mov	r1, r3
 8006972:	1b00      	subs	r0, r0, r4
 8006974:	eb61 0105 	sbc.w	r1, r1, r5
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	018b      	lsls	r3, r1, #6
 8006982:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006986:	0182      	lsls	r2, r0, #6
 8006988:	1a12      	subs	r2, r2, r0
 800698a:	eb63 0301 	sbc.w	r3, r3, r1
 800698e:	f04f 0000 	mov.w	r0, #0
 8006992:	f04f 0100 	mov.w	r1, #0
 8006996:	00d9      	lsls	r1, r3, #3
 8006998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800699c:	00d0      	lsls	r0, r2, #3
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	1912      	adds	r2, r2, r4
 80069a4:	eb45 0303 	adc.w	r3, r5, r3
 80069a8:	f04f 0000 	mov.w	r0, #0
 80069ac:	f04f 0100 	mov.w	r1, #0
 80069b0:	0299      	lsls	r1, r3, #10
 80069b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80069b6:	0290      	lsls	r0, r2, #10
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4610      	mov	r0, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	f7f9 fc22 	bl	8000210 <__aeabi_uldivmod>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4613      	mov	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80069d4:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x160>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	0c1b      	lsrs	r3, r3, #16
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	3301      	adds	r3, #1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	60bb      	str	r3, [r7, #8]
      break;
 80069ee:	e002      	b.n	80069f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069f0:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x164>)
 80069f2:	60bb      	str	r3, [r7, #8]
      break;
 80069f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069f6:	68bb      	ldr	r3, [r7, #8]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	00f42400 	.word	0x00f42400
 8006a08:	017d7840 	.word	0x017d7840

08006a0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a12:	681b      	ldr	r3, [r3, #0]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	2000147c 	.word	0x2000147c

08006a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a28:	f7ff fff0 	bl	8006a0c <HAL_RCC_GetHCLKFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	0a9b      	lsrs	r3, r3, #10
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	4903      	ldr	r1, [pc, #12]	; (8006a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40023800 	.word	0x40023800
 8006a48:	0800d98c 	.word	0x0800d98c

08006a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a50:	f7ff ffdc 	bl	8006a0c <HAL_RCC_GetHCLKFreq>
 8006a54:	4602      	mov	r2, r0
 8006a56:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	0b5b      	lsrs	r3, r3, #13
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	4903      	ldr	r1, [pc, #12]	; (8006a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a62:	5ccb      	ldrb	r3, [r1, r3]
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	0800d98c 	.word	0x0800d98c

08006a74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	220f      	movs	r2, #15
 8006a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a84:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f003 0203 	and.w	r2, r3, #3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a90:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006aa8:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	08db      	lsrs	r3, r3, #3
 8006aae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ab6:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <HAL_RCC_GetClockConfig+0x60>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 020f 	and.w	r2, r3, #15
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	40023c00 	.word	0x40023c00

08006ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d012      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b00:	4b69      	ldr	r3, [pc, #420]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4a68      	ldr	r2, [pc, #416]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b0a:	6093      	str	r3, [r2, #8]
 8006b0c:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b14:	4964      	ldr	r1, [pc, #400]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b22:	2301      	movs	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d017      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b32:	4b5d      	ldr	r3, [pc, #372]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b40:	4959      	ldr	r1, [pc, #356]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b50:	d101      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006b52:	2301      	movs	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d017      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b6e:	4b4e      	ldr	r3, [pc, #312]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7c:	494a      	ldr	r1, [pc, #296]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b8c:	d101      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006baa:	2301      	movs	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 808b 	beq.w	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bbc:	4b3a      	ldr	r3, [pc, #232]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	4a39      	ldr	r2, [pc, #228]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8006bc8:	4b37      	ldr	r3, [pc, #220]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	60bb      	str	r3, [r7, #8]
 8006bd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006bd4:	4b35      	ldr	r3, [pc, #212]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a34      	ldr	r2, [pc, #208]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be0:	f7fc fd1e 	bl	8003620 <HAL_GetTick>
 8006be4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be8:	f7fc fd1a 	bl	8003620 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e357      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bfa:	4b2c      	ldr	r3, [pc, #176]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c06:	4b28      	ldr	r3, [pc, #160]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d035      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d02e      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c24:	4b20      	ldr	r3, [pc, #128]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	4a1d      	ldr	r2, [pc, #116]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c46:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c4c:	4b16      	ldr	r3, [pc, #88]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d114      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fc fce2 	bl	8003620 <HAL_GetTick>
 8006c5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c60:	f7fc fcde 	bl	8003620 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e319      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0ee      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c8e:	d111      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c9c:	4b04      	ldr	r3, [pc, #16]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c9e:	400b      	ands	r3, r1
 8006ca0:	4901      	ldr	r1, [pc, #4]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	608b      	str	r3, [r1, #8]
 8006ca6:	e00b      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	40007000 	.word	0x40007000
 8006cb0:	0ffffcff 	.word	0x0ffffcff
 8006cb4:	4bb1      	ldr	r3, [pc, #708]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	4ab0      	ldr	r2, [pc, #704]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cbe:	6093      	str	r3, [r2, #8]
 8006cc0:	4bae      	ldr	r3, [pc, #696]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ccc:	49ab      	ldr	r1, [pc, #684]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d010      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cde:	4ba7      	ldr	r3, [pc, #668]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce4:	4aa5      	ldr	r2, [pc, #660]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006cee:	4ba3      	ldr	r3, [pc, #652]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	49a0      	ldr	r1, [pc, #640]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d0c:	4b9b      	ldr	r3, [pc, #620]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d1a:	4998      	ldr	r1, [pc, #608]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d2e:	4b93      	ldr	r3, [pc, #588]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d3c:	498f      	ldr	r1, [pc, #572]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d50:	4b8a      	ldr	r3, [pc, #552]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d5e:	4987      	ldr	r1, [pc, #540]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d72:	4b82      	ldr	r3, [pc, #520]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	497e      	ldr	r1, [pc, #504]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d94:	4b79      	ldr	r3, [pc, #484]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9a:	f023 0203 	bic.w	r2, r3, #3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	4976      	ldr	r1, [pc, #472]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006db6:	4b71      	ldr	r3, [pc, #452]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbc:	f023 020c 	bic.w	r2, r3, #12
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc4:	496d      	ldr	r1, [pc, #436]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dd8:	4b68      	ldr	r3, [pc, #416]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de6:	4965      	ldr	r1, [pc, #404]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006dfa:	4b60      	ldr	r3, [pc, #384]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e08:	495c      	ldr	r1, [pc, #368]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e1c:	4b57      	ldr	r3, [pc, #348]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2a:	4954      	ldr	r1, [pc, #336]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e3e:	4b4f      	ldr	r3, [pc, #316]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4c:	494b      	ldr	r1, [pc, #300]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006e60:	4b46      	ldr	r3, [pc, #280]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6e:	4943      	ldr	r1, [pc, #268]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e82:	4b3e      	ldr	r3, [pc, #248]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e90:	493a      	ldr	r1, [pc, #232]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ea4:	4b35      	ldr	r3, [pc, #212]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb2:	4932      	ldr	r1, [pc, #200]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d011      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006ec6:	4b2d      	ldr	r3, [pc, #180]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed4:	4929      	ldr	r1, [pc, #164]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ee4:	d101      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f14:	4919      	ldr	r1, [pc, #100]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f28:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f38:	4910      	ldr	r1, [pc, #64]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d006      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80d9 	beq.w	8007106 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f54:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f60:	f7fc fb5e 	bl	8003620 <HAL_GetTick>
 8006f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f66:	e00b      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f68:	f7fc fb5a 	bl	8003620 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b64      	cmp	r3, #100	; 0x64
 8006f74:	d904      	bls.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e197      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006f7a:	bf00      	nop
 8006f7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f80:	4b6c      	ldr	r3, [pc, #432]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1ed      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d021      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d11d      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fa0:	4b64      	ldr	r3, [pc, #400]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	f003 0303 	and.w	r3, r3, #3
 8006fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fae:	4b61      	ldr	r3, [pc, #388]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb4:	0e1b      	lsrs	r3, r3, #24
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	019a      	lsls	r2, r3, #6
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	061b      	lsls	r3, r3, #24
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	071b      	lsls	r3, r3, #28
 8006fd4:	4957      	ldr	r1, [pc, #348]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ff0:	d00a      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d02e      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007006:	d129      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007008:	4b4a      	ldr	r3, [pc, #296]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800700a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007016:	4b47      	ldr	r3, [pc, #284]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800701c:	0f1b      	lsrs	r3, r3, #28
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	019a      	lsls	r2, r3, #6
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	041b      	lsls	r3, r3, #16
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	061b      	lsls	r3, r3, #24
 8007036:	431a      	orrs	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	071b      	lsls	r3, r3, #28
 800703c:	493d      	ldr	r1, [pc, #244]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007044:	4b3b      	ldr	r3, [pc, #236]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800704a:	f023 021f 	bic.w	r2, r3, #31
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	3b01      	subs	r3, #1
 8007054:	4937      	ldr	r1, [pc, #220]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01d      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007068:	4b32      	ldr	r3, [pc, #200]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800706a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706e:	0e1b      	lsrs	r3, r3, #24
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007076:	4b2f      	ldr	r3, [pc, #188]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800707c:	0f1b      	lsrs	r3, r3, #28
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	019a      	lsls	r2, r3, #6
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	041b      	lsls	r3, r3, #16
 8007090:	431a      	orrs	r2, r3
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	061b      	lsls	r3, r3, #24
 8007096:	431a      	orrs	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	071b      	lsls	r3, r3, #28
 800709c:	4925      	ldr	r1, [pc, #148]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d011      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	019a      	lsls	r2, r3, #6
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	061b      	lsls	r3, r3, #24
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	071b      	lsls	r3, r3, #28
 80070cc:	4919      	ldr	r1, [pc, #100]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070d4:	4b17      	ldr	r3, [pc, #92]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a16      	ldr	r2, [pc, #88]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e0:	f7fc fa9e 	bl	8003620 <HAL_GetTick>
 80070e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070e8:	f7fc fa9a 	bl	8003620 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b64      	cmp	r3, #100	; 0x64
 80070f4:	d901      	bls.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e0d7      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070fa:	4b0e      	ldr	r3, [pc, #56]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f0      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b01      	cmp	r3, #1
 800710a:	f040 80cd 	bne.w	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a08      	ldr	r2, [pc, #32]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800711a:	f7fc fa81 	bl	8003620 <HAL_GetTick>
 800711e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007120:	e00a      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007122:	f7fc fa7d 	bl	8003620 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b64      	cmp	r3, #100	; 0x64
 800712e:	d903      	bls.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e0ba      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007134:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007138:	4b5e      	ldr	r3, [pc, #376]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007144:	d0ed      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007162:	2b00      	cmp	r3, #0
 8007164:	d02e      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d12a      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800716e:	4b51      	ldr	r3, [pc, #324]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800717c:	4b4d      	ldr	r3, [pc, #308]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800717e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007182:	0f1b      	lsrs	r3, r3, #28
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	019a      	lsls	r2, r3, #6
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	041b      	lsls	r3, r3, #16
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	061b      	lsls	r3, r3, #24
 800719c:	431a      	orrs	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	071b      	lsls	r3, r3, #28
 80071a2:	4944      	ldr	r1, [pc, #272]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80071aa:	4b42      	ldr	r3, [pc, #264]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	3b01      	subs	r3, #1
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	493d      	ldr	r1, [pc, #244]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d022      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d8:	d11d      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071da:	4b36      	ldr	r3, [pc, #216]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e0:	0e1b      	lsrs	r3, r3, #24
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071e8:	4b32      	ldr	r3, [pc, #200]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ee:	0f1b      	lsrs	r3, r3, #28
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	019a      	lsls	r2, r3, #6
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	431a      	orrs	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	061b      	lsls	r3, r3, #24
 8007208:	431a      	orrs	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	071b      	lsls	r3, r3, #28
 800720e:	4929      	ldr	r1, [pc, #164]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007210:	4313      	orrs	r3, r2
 8007212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d028      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007222:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007228:	0e1b      	lsrs	r3, r3, #24
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007230:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007236:	0c1b      	lsrs	r3, r3, #16
 8007238:	f003 0303 	and.w	r3, r3, #3
 800723c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	019a      	lsls	r2, r3, #6
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	431a      	orrs	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	071b      	lsls	r3, r3, #28
 8007256:	4917      	ldr	r1, [pc, #92]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007258:	4313      	orrs	r3, r2
 800725a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800725e:	4b15      	ldr	r3, [pc, #84]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	4911      	ldr	r1, [pc, #68]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007274:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a0e      	ldr	r2, [pc, #56]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800727a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007280:	f7fc f9ce 	bl	8003620 <HAL_GetTick>
 8007284:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007286:	e008      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007288:	f7fc f9ca 	bl	8003620 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b64      	cmp	r3, #100	; 0x64
 8007294:	d901      	bls.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e007      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072a6:	d1ef      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40023800 	.word	0x40023800

080072b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e081      	b.n	80073ce <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7f5b      	ldrb	r3, [r3, #29]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fb fdea 	bl	8002eb4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	22ca      	movs	r2, #202	; 0xca
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2253      	movs	r2, #83	; 0x53
 80072f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fb16 	bl	8007928 <RTC_EnterInitMode>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	22ff      	movs	r2, #255	; 0xff
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2204      	movs	r2, #4
 800730e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e05c      	b.n	80073ce <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6899      	ldr	r1, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <HAL_RTC_Init+0x120>)
 8007320:	400b      	ands	r3, r1
 8007322:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6899      	ldr	r1, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68d2      	ldr	r2, [r2, #12]
 800734a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6919      	ldr	r1, [r3, #16]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	041a      	lsls	r2, r3, #16
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800736e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10e      	bne.n	800739c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 faaa 	bl	80078d8 <HAL_RTC_WaitForSynchro>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	22ff      	movs	r2, #255	; 0xff
 8007390:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2204      	movs	r2, #4
 8007396:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e018      	b.n	80073ce <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0208 	bic.w	r2, r2, #8
 80073aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	22ff      	movs	r2, #255	; 0xff
 80073c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80073cc:	2300      	movs	r3, #0
  }
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	ff8fffbf 	.word	0xff8fffbf

080073dc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	7f1b      	ldrb	r3, [r3, #28]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_RTC_SetTime+0x1c>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e0a8      	b.n	800754a <HAL_RTC_SetTime+0x16e>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2202      	movs	r2, #2
 8007402:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d126      	bne.n	8007458 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2200      	movs	r2, #0
 800741c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f000 faac 	bl	8007980 <RTC_ByteToBcd2>
 8007428:	4603      	mov	r3, r0
 800742a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 faa5 	bl	8007980 <RTC_ByteToBcd2>
 8007436:	4603      	mov	r3, r0
 8007438:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800743a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	789b      	ldrb	r3, [r3, #2]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fa9d 	bl	8007980 <RTC_ByteToBcd2>
 8007446:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007448:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	7b1b      	ldrb	r3, [r3, #12]
 8007450:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e018      	b.n	800748a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2200      	movs	r2, #0
 800746a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007478:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800747e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	7b1b      	ldrb	r3, [r3, #12]
 8007484:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	22ca      	movs	r2, #202	; 0xca
 8007490:	625a      	str	r2, [r3, #36]	; 0x24
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2253      	movs	r2, #83	; 0x53
 8007498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fa44 	bl	8007928 <RTC_EnterInitMode>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00b      	beq.n	80074be <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	22ff      	movs	r2, #255	; 0xff
 80074ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2204      	movs	r2, #4
 80074b2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e045      	b.n	800754a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	6979      	ldr	r1, [r7, #20]
 80074c4:	4b23      	ldr	r3, [pc, #140]	; (8007554 <HAL_RTC_SetTime+0x178>)
 80074c6:	400b      	ands	r3, r1
 80074c8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074d8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6899      	ldr	r1, [r3, #8]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	691a      	ldr	r2, [r3, #16]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007500:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d111      	bne.n	8007534 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f9e1 	bl	80078d8 <HAL_RTC_WaitForSynchro>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	22ff      	movs	r2, #255	; 0xff
 8007522:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2204      	movs	r2, #4
 8007528:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e00a      	b.n	800754a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	22ff      	movs	r2, #255	; 0xff
 800753a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007548:	2300      	movs	r3, #0
  }
}
 800754a:	4618      	mov	r0, r3
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	bd90      	pop	{r4, r7, pc}
 8007552:	bf00      	nop
 8007554:	007f7f7f 	.word	0x007f7f7f

08007558 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7f1b      	ldrb	r3, [r3, #28]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_RTC_SetDate+0x1c>
 8007570:	2302      	movs	r3, #2
 8007572:	e092      	b.n	800769a <HAL_RTC_SetDate+0x142>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2202      	movs	r2, #2
 800757e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10e      	bne.n	80075a4 <HAL_RTC_SetDate+0x4c>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b00      	cmp	r3, #0
 8007590:	d008      	beq.n	80075a4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	f023 0310 	bic.w	r3, r3, #16
 800759a:	b2db      	uxtb	r3, r3
 800759c:	330a      	adds	r3, #10
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d11c      	bne.n	80075e4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	78db      	ldrb	r3, [r3, #3]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 f9e6 	bl	8007980 <RTC_ByteToBcd2>
 80075b4:	4603      	mov	r3, r0
 80075b6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f9df 	bl	8007980 <RTC_ByteToBcd2>
 80075c2:	4603      	mov	r3, r0
 80075c4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80075c6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	789b      	ldrb	r3, [r3, #2]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f000 f9d7 	bl	8007980 <RTC_ByteToBcd2>
 80075d2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80075d4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80075de:	4313      	orrs	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e00e      	b.n	8007602 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80075f0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80075f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	22ca      	movs	r2, #202	; 0xca
 8007608:	625a      	str	r2, [r3, #36]	; 0x24
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2253      	movs	r2, #83	; 0x53
 8007610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f988 	bl	8007928 <RTC_EnterInitMode>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	22ff      	movs	r2, #255	; 0xff
 8007624:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2204      	movs	r2, #4
 800762a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e031      	b.n	800769a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	6979      	ldr	r1, [r7, #20]
 800763c:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <HAL_RTC_SetDate+0x14c>)
 800763e:	400b      	ands	r3, r1
 8007640:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007650:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d111      	bne.n	8007684 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f939 	bl	80078d8 <HAL_RTC_WaitForSynchro>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	22ff      	movs	r2, #255	; 0xff
 8007672:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2204      	movs	r2, #4
 8007678:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e00a      	b.n	800769a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	22ff      	movs	r2, #255	; 0xff
 800768a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007698:	2300      	movs	r3, #0
  }
}
 800769a:	4618      	mov	r0, r3
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd90      	pop	{r4, r7, pc}
 80076a2:	bf00      	nop
 80076a4:	00ffff3f 	.word	0x00ffff3f

080076a8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b089      	sub	sp, #36	; 0x24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	7f1b      	ldrb	r3, [r3, #28]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_RTC_SetAlarm+0x24>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e101      	b.n	80078d0 <HAL_RTC_SetAlarm+0x228>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2202      	movs	r2, #2
 80076d6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d137      	bne.n	800774e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2200      	movs	r2, #0
 80076f0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f942 	bl	8007980 <RTC_ByteToBcd2>
 80076fc:	4603      	mov	r3, r0
 80076fe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 f93b 	bl	8007980 <RTC_ByteToBcd2>
 800770a:	4603      	mov	r3, r0
 800770c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800770e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	789b      	ldrb	r3, [r3, #2]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f933 	bl	8007980 <RTC_ByteToBcd2>
 800771a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800771c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	7b1b      	ldrb	r3, [r3, #12]
 8007724:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007726:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f925 	bl	8007980 <RTC_ByteToBcd2>
 8007736:	4603      	mov	r3, r0
 8007738:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800773a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007742:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007748:	4313      	orrs	r3, r2
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	e023      	b.n	8007796 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800776e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007774:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	7b1b      	ldrb	r3, [r3, #12]
 800777a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800777c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007784:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007786:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800778c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007792:	4313      	orrs	r3, r2
 8007794:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	22ca      	movs	r2, #202	; 0xca
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2253      	movs	r2, #83	; 0x53
 80077b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ba:	d13f      	bne.n	800783c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077ca:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077da:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077dc:	f7fb ff20 	bl	8003620 <HAL_GetTick>
 80077e0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80077e2:	e013      	b.n	800780c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80077e4:	f7fb ff1c 	bl	8003620 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077f2:	d90b      	bls.n	800780c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	22ff      	movs	r2, #255	; 0xff
 80077fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2203      	movs	r2, #3
 8007800:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e061      	b.n	80078d0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0e4      	beq.n	80077e4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007838:	609a      	str	r2, [r3, #8]
 800783a:	e03e      	b.n	80078ba <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800784a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800785a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800785c:	f7fb fee0 	bl	8003620 <HAL_GetTick>
 8007860:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007862:	e013      	b.n	800788c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007864:	f7fb fedc 	bl	8003620 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007872:	d90b      	bls.n	800788c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	22ff      	movs	r2, #255	; 0xff
 800787a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2203      	movs	r2, #3
 8007880:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e021      	b.n	80078d0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0e4      	beq.n	8007864 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	22ff      	movs	r2, #255	; 0xff
 80078c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3724      	adds	r7, #36	; 0x24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd90      	pop	{r4, r7, pc}

080078d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078f4:	f7fb fe94 	bl	8003620 <HAL_GetTick>
 80078f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80078fa:	e009      	b.n	8007910 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80078fc:	f7fb fe90 	bl	8003620 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800790a:	d901      	bls.n	8007910 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e007      	b.n	8007920 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0ee      	beq.n	80078fc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d119      	bne.n	8007976 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f04f 32ff 	mov.w	r2, #4294967295
 800794a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800794c:	f7fb fe68 	bl	8003620 <HAL_GetTick>
 8007950:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007952:	e009      	b.n	8007968 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007954:	f7fb fe64 	bl	8003620 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007962:	d901      	bls.n	8007968 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e007      	b.n	8007978 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0ee      	beq.n	8007954 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800798e:	e005      	b.n	800799c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	3b0a      	subs	r3, #10
 800799a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	2b09      	cmp	r3, #9
 80079a0:	d8f6      	bhi.n	8007990 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	b2db      	uxtb	r3, r3
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	7f1b      	ldrb	r3, [r3, #28]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e03e      	b.n	8007a56 <HAL_RTCEx_SetTimeStamp+0x9a>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2202      	movs	r2, #2
 80079e2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	22ca      	movs	r2, #202	; 0xca
 80079fe:	625a      	str	r2, [r3, #36]	; 0x24
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2253      	movs	r2, #83	; 0x53
 8007a06:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0206 	bic.w	r2, r2, #6
 8007a16:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a3e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	fffff7f7 	.word	0xfffff7f7

08007a68 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e025      	b.n	8007ac8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fb fcc5 	bl	8003420 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f002 faef 	bl	800a08c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	f002 fb59 	bl	800a170 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d101      	bne.n	8007aec <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e018      	b.n	8007b1e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f002 fbb7 	bl	800a270 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d104      	bne.n	8007b14 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2205      	movs	r2, #5
 8007b0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007b12:	e003      	b.n	8007b1c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b082      	sub	sp, #8
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d101      	bne.n	8007b40 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e00e      	b.n	8007b5e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 fbb2 	bl	800a2b8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e09d      	b.n	8007cb4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d108      	bne.n	8007b92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b88:	d009      	beq.n	8007b9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	61da      	str	r2, [r3, #28]
 8007b90:	e005      	b.n	8007b9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fb f995 	bl	8002ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bde:	d902      	bls.n	8007be6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e002      	b.n	8007bec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bf4:	d007      	beq.n	8007c06 <HAL_SPI_Init+0xa0>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bfe:	d002      	beq.n	8007c06 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c16:	431a      	orrs	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c48:	ea42 0103 	orr.w	r1, r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	0c1b      	lsrs	r3, r3, #16
 8007c62:	f003 0204 	and.w	r2, r3, #4
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c74:	f003 0308 	and.w	r3, r3, #8
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c82:	ea42 0103 	orr.w	r1, r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	69da      	ldr	r2, [r3, #28]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ca2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e049      	b.n	8007d62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d106      	bne.n	8007ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fb f972 	bl	8002fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f000 fc6e 	bl	80085dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d001      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e054      	b.n	8007e2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a26      	ldr	r2, [pc, #152]	; (8007e3c <HAL_TIM_Base_Start_IT+0xd0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d022      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dae:	d01d      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a22      	ldr	r2, [pc, #136]	; (8007e40 <HAL_TIM_Base_Start_IT+0xd4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d018      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a1f      	ldr	r2, [pc, #124]	; (8007e48 <HAL_TIM_Base_Start_IT+0xdc>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00e      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <HAL_TIM_Base_Start_IT+0xe0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d009      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a1c      	ldr	r2, [pc, #112]	; (8007e50 <HAL_TIM_Base_Start_IT+0xe4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_TIM_Base_Start_IT+0x80>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a1b      	ldr	r2, [pc, #108]	; (8007e54 <HAL_TIM_Base_Start_IT+0xe8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d115      	bne.n	8007e18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	4b19      	ldr	r3, [pc, #100]	; (8007e58 <HAL_TIM_Base_Start_IT+0xec>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b06      	cmp	r3, #6
 8007dfc:	d015      	beq.n	8007e2a <HAL_TIM_Base_Start_IT+0xbe>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e04:	d011      	beq.n	8007e2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0201 	orr.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e16:	e008      	b.n	8007e2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	e000      	b.n	8007e2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	40010400 	.word	0x40010400
 8007e50:	40014000 	.word	0x40014000
 8007e54:	40001800 	.word	0x40001800
 8007e58:	00010007 	.word	0x00010007

08007e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e049      	b.n	8007f02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d106      	bne.n	8007e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f841 	bl	8007f0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	f000 fb9e 	bl	80085dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d122      	bne.n	8007f7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d11b      	bne.n	8007f7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f06f 0202 	mvn.w	r2, #2
 8007f4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fb1d 	bl	80085a0 <HAL_TIM_IC_CaptureCallback>
 8007f66:	e005      	b.n	8007f74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fb0f 	bl	800858c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fb20 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	f003 0304 	and.w	r3, r3, #4
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d122      	bne.n	8007fce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f003 0304 	and.w	r3, r3, #4
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d11b      	bne.n	8007fce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f06f 0204 	mvn.w	r2, #4
 8007f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 faf3 	bl	80085a0 <HAL_TIM_IC_CaptureCallback>
 8007fba:	e005      	b.n	8007fc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fae5 	bl	800858c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 faf6 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f003 0308 	and.w	r3, r3, #8
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d122      	bne.n	8008022 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	d11b      	bne.n	8008022 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f06f 0208 	mvn.w	r2, #8
 8007ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fac9 	bl	80085a0 <HAL_TIM_IC_CaptureCallback>
 800800e:	e005      	b.n	800801c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fabb 	bl	800858c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 facc 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b10      	cmp	r3, #16
 800802e:	d122      	bne.n	8008076 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	2b10      	cmp	r3, #16
 800803c:	d11b      	bne.n	8008076 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f06f 0210 	mvn.w	r2, #16
 8008046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2208      	movs	r2, #8
 800804c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa9f 	bl	80085a0 <HAL_TIM_IC_CaptureCallback>
 8008062:	e005      	b.n	8008070 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fa91 	bl	800858c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 faa2 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10e      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b01      	cmp	r3, #1
 8008090:	d107      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f06f 0201 	mvn.w	r2, #1
 800809a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7f9 fd87 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ac:	2b80      	cmp	r3, #128	; 0x80
 80080ae:	d10e      	bne.n	80080ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ba:	2b80      	cmp	r3, #128	; 0x80
 80080bc:	d107      	bne.n	80080ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 ffc5 	bl	8009058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080dc:	d10e      	bne.n	80080fc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e8:	2b80      	cmp	r3, #128	; 0x80
 80080ea:	d107      	bne.n	80080fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 ffb8 	bl	800906c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d10e      	bne.n	8008128 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b40      	cmp	r3, #64	; 0x40
 8008116:	d107      	bne.n	8008128 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa50 	bl	80085c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b20      	cmp	r3, #32
 8008134:	d10e      	bne.n	8008154 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b20      	cmp	r3, #32
 8008142:	d107      	bne.n	8008154 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0220 	mvn.w	r2, #32
 800814c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 ff78 	bl	8009044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008154:	bf00      	nop
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008172:	2302      	movs	r3, #2
 8008174:	e0fd      	b.n	8008372 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b14      	cmp	r3, #20
 8008182:	f200 80f0 	bhi.w	8008366 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008186:	a201      	add	r2, pc, #4	; (adr r2, 800818c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081e1 	.word	0x080081e1
 8008190:	08008367 	.word	0x08008367
 8008194:	08008367 	.word	0x08008367
 8008198:	08008367 	.word	0x08008367
 800819c:	08008221 	.word	0x08008221
 80081a0:	08008367 	.word	0x08008367
 80081a4:	08008367 	.word	0x08008367
 80081a8:	08008367 	.word	0x08008367
 80081ac:	08008263 	.word	0x08008263
 80081b0:	08008367 	.word	0x08008367
 80081b4:	08008367 	.word	0x08008367
 80081b8:	08008367 	.word	0x08008367
 80081bc:	080082a3 	.word	0x080082a3
 80081c0:	08008367 	.word	0x08008367
 80081c4:	08008367 	.word	0x08008367
 80081c8:	08008367 	.word	0x08008367
 80081cc:	080082e5 	.word	0x080082e5
 80081d0:	08008367 	.word	0x08008367
 80081d4:	08008367 	.word	0x08008367
 80081d8:	08008367 	.word	0x08008367
 80081dc:	08008325 	.word	0x08008325
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fa98 	bl	800871c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0208 	orr.w	r2, r2, #8
 80081fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699a      	ldr	r2, [r3, #24]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0204 	bic.w	r2, r2, #4
 800820a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6999      	ldr	r1, [r3, #24]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	619a      	str	r2, [r3, #24]
      break;
 800821e:	e0a3      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68b9      	ldr	r1, [r7, #8]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 faea 	bl	8008800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699a      	ldr	r2, [r3, #24]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800823a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800824a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6999      	ldr	r1, [r3, #24]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	021a      	lsls	r2, r3, #8
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	619a      	str	r2, [r3, #24]
      break;
 8008260:	e082      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fb41 	bl	80088f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69da      	ldr	r2, [r3, #28]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0208 	orr.w	r2, r2, #8
 800827c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0204 	bic.w	r2, r2, #4
 800828c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69d9      	ldr	r1, [r3, #28]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	691a      	ldr	r2, [r3, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	61da      	str	r2, [r3, #28]
      break;
 80082a0:	e062      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fb97 	bl	80089dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69da      	ldr	r2, [r3, #28]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69d9      	ldr	r1, [r3, #28]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	021a      	lsls	r2, r3, #8
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	61da      	str	r2, [r3, #28]
      break;
 80082e2:	e041      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fbce 	bl	8008a8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0208 	orr.w	r2, r2, #8
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0204 	bic.w	r2, r2, #4
 800830e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008322:	e021      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fc00 	bl	8008b30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800833e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800834e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	021a      	lsls	r2, r3, #8
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008364:	e000      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008366:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop

0800837c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_TIM_ConfigClockSource+0x18>
 8008390:	2302      	movs	r3, #2
 8008392:	e0b3      	b.n	80084fc <HAL_TIM_ConfigClockSource+0x180>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4b55      	ldr	r3, [pc, #340]	; (8008504 <HAL_TIM_ConfigClockSource+0x188>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083cc:	d03e      	beq.n	800844c <HAL_TIM_ConfigClockSource+0xd0>
 80083ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083d2:	f200 8087 	bhi.w	80084e4 <HAL_TIM_ConfigClockSource+0x168>
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083da:	f000 8085 	beq.w	80084e8 <HAL_TIM_ConfigClockSource+0x16c>
 80083de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e2:	d87f      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x168>
 80083e4:	2b70      	cmp	r3, #112	; 0x70
 80083e6:	d01a      	beq.n	800841e <HAL_TIM_ConfigClockSource+0xa2>
 80083e8:	2b70      	cmp	r3, #112	; 0x70
 80083ea:	d87b      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x168>
 80083ec:	2b60      	cmp	r3, #96	; 0x60
 80083ee:	d050      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0x116>
 80083f0:	2b60      	cmp	r3, #96	; 0x60
 80083f2:	d877      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x168>
 80083f4:	2b50      	cmp	r3, #80	; 0x50
 80083f6:	d03c      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0xf6>
 80083f8:	2b50      	cmp	r3, #80	; 0x50
 80083fa:	d873      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x168>
 80083fc:	2b40      	cmp	r3, #64	; 0x40
 80083fe:	d058      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x136>
 8008400:	2b40      	cmp	r3, #64	; 0x40
 8008402:	d86f      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x168>
 8008404:	2b30      	cmp	r3, #48	; 0x30
 8008406:	d064      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x156>
 8008408:	2b30      	cmp	r3, #48	; 0x30
 800840a:	d86b      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x168>
 800840c:	2b20      	cmp	r3, #32
 800840e:	d060      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x156>
 8008410:	2b20      	cmp	r3, #32
 8008412:	d867      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x168>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d05c      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x156>
 8008418:	2b10      	cmp	r3, #16
 800841a:	d05a      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800841c:	e062      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6899      	ldr	r1, [r3, #8]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f000 fcdd 	bl	8008dec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008440:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	609a      	str	r2, [r3, #8]
      break;
 800844a:	e04e      	b.n	80084ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	6899      	ldr	r1, [r3, #8]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f000 fcc6 	bl	8008dec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800846e:	609a      	str	r2, [r3, #8]
      break;
 8008470:	e03b      	b.n	80084ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6859      	ldr	r1, [r3, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	461a      	mov	r2, r3
 8008480:	f000 fc3a 	bl	8008cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2150      	movs	r1, #80	; 0x50
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fc93 	bl	8008db6 <TIM_ITRx_SetConfig>
      break;
 8008490:	e02b      	b.n	80084ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6859      	ldr	r1, [r3, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 fc59 	bl	8008d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2160      	movs	r1, #96	; 0x60
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fc83 	bl	8008db6 <TIM_ITRx_SetConfig>
      break;
 80084b0:	e01b      	b.n	80084ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6859      	ldr	r1, [r3, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	461a      	mov	r2, r3
 80084c0:	f000 fc1a 	bl	8008cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2140      	movs	r1, #64	; 0x40
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fc73 	bl	8008db6 <TIM_ITRx_SetConfig>
      break;
 80084d0:	e00b      	b.n	80084ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f000 fc6a 	bl	8008db6 <TIM_ITRx_SetConfig>
        break;
 80084e2:	e002      	b.n	80084ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80084e4:	bf00      	nop
 80084e6:	e000      	b.n	80084ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80084e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	fffeff88 	.word	0xfffeff88

08008508 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_TIM_SlaveConfigSynchro+0x18>
 800851c:	2302      	movs	r3, #2
 800851e:	e031      	b.n	8008584 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fb50 	bl	8008bd8 <TIM_SlaveTimer_SetConfig>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e018      	b.n	8008584 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008560:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008570:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a40      	ldr	r2, [pc, #256]	; (80086f0 <TIM_Base_SetConfig+0x114>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d013      	beq.n	800861c <TIM_Base_SetConfig+0x40>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fa:	d00f      	beq.n	800861c <TIM_Base_SetConfig+0x40>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a3d      	ldr	r2, [pc, #244]	; (80086f4 <TIM_Base_SetConfig+0x118>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00b      	beq.n	800861c <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a3c      	ldr	r2, [pc, #240]	; (80086f8 <TIM_Base_SetConfig+0x11c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d007      	beq.n	800861c <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a3b      	ldr	r2, [pc, #236]	; (80086fc <TIM_Base_SetConfig+0x120>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_Base_SetConfig+0x40>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a3a      	ldr	r2, [pc, #232]	; (8008700 <TIM_Base_SetConfig+0x124>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d108      	bne.n	800862e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a2f      	ldr	r2, [pc, #188]	; (80086f0 <TIM_Base_SetConfig+0x114>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d02b      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863c:	d027      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a2c      	ldr	r2, [pc, #176]	; (80086f4 <TIM_Base_SetConfig+0x118>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d023      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2b      	ldr	r2, [pc, #172]	; (80086f8 <TIM_Base_SetConfig+0x11c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d01f      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2a      	ldr	r2, [pc, #168]	; (80086fc <TIM_Base_SetConfig+0x120>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01b      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a29      	ldr	r2, [pc, #164]	; (8008700 <TIM_Base_SetConfig+0x124>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d017      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a28      	ldr	r2, [pc, #160]	; (8008704 <TIM_Base_SetConfig+0x128>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d013      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a27      	ldr	r2, [pc, #156]	; (8008708 <TIM_Base_SetConfig+0x12c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00f      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a26      	ldr	r2, [pc, #152]	; (800870c <TIM_Base_SetConfig+0x130>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00b      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a25      	ldr	r2, [pc, #148]	; (8008710 <TIM_Base_SetConfig+0x134>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d007      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a24      	ldr	r2, [pc, #144]	; (8008714 <TIM_Base_SetConfig+0x138>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d003      	beq.n	800868e <TIM_Base_SetConfig+0xb2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a23      	ldr	r2, [pc, #140]	; (8008718 <TIM_Base_SetConfig+0x13c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d108      	bne.n	80086a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a0a      	ldr	r2, [pc, #40]	; (80086f0 <TIM_Base_SetConfig+0x114>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d003      	beq.n	80086d4 <TIM_Base_SetConfig+0xf8>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a0c      	ldr	r2, [pc, #48]	; (8008700 <TIM_Base_SetConfig+0x124>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d103      	bne.n	80086dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	691a      	ldr	r2, [r3, #16]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	615a      	str	r2, [r3, #20]
}
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	40010000 	.word	0x40010000
 80086f4:	40000400 	.word	0x40000400
 80086f8:	40000800 	.word	0x40000800
 80086fc:	40000c00 	.word	0x40000c00
 8008700:	40010400 	.word	0x40010400
 8008704:	40014000 	.word	0x40014000
 8008708:	40014400 	.word	0x40014400
 800870c:	40014800 	.word	0x40014800
 8008710:	40001800 	.word	0x40001800
 8008714:	40001c00 	.word	0x40001c00
 8008718:	40002000 	.word	0x40002000

0800871c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	f023 0201 	bic.w	r2, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <TIM_OC1_SetConfig+0xd8>)
 8008748:	4013      	ands	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0303 	bic.w	r3, r3, #3
 8008752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f023 0302 	bic.w	r3, r3, #2
 8008764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a21      	ldr	r2, [pc, #132]	; (80087f8 <TIM_OC1_SetConfig+0xdc>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_OC1_SetConfig+0x64>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a20      	ldr	r2, [pc, #128]	; (80087fc <TIM_OC1_SetConfig+0xe0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d10c      	bne.n	800879a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f023 0308 	bic.w	r3, r3, #8
 8008786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f023 0304 	bic.w	r3, r3, #4
 8008798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a16      	ldr	r2, [pc, #88]	; (80087f8 <TIM_OC1_SetConfig+0xdc>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_OC1_SetConfig+0x8e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a15      	ldr	r2, [pc, #84]	; (80087fc <TIM_OC1_SetConfig+0xe0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d111      	bne.n	80087ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	621a      	str	r2, [r3, #32]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	fffeff8f 	.word	0xfffeff8f
 80087f8:	40010000 	.word	0x40010000
 80087fc:	40010400 	.word	0x40010400

08008800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f023 0210 	bic.w	r2, r3, #16
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4b2e      	ldr	r3, [pc, #184]	; (80088e4 <TIM_OC2_SetConfig+0xe4>)
 800882c:	4013      	ands	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0320 	bic.w	r3, r3, #32
 800884a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a23      	ldr	r2, [pc, #140]	; (80088e8 <TIM_OC2_SetConfig+0xe8>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d003      	beq.n	8008868 <TIM_OC2_SetConfig+0x68>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a22      	ldr	r2, [pc, #136]	; (80088ec <TIM_OC2_SetConfig+0xec>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d10d      	bne.n	8008884 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800886e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	011b      	lsls	r3, r3, #4
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008882:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <TIM_OC2_SetConfig+0xe8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_OC2_SetConfig+0x94>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a17      	ldr	r2, [pc, #92]	; (80088ec <TIM_OC2_SetConfig+0xec>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d113      	bne.n	80088bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800889a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	621a      	str	r2, [r3, #32]
}
 80088d6:	bf00      	nop
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	feff8fff 	.word	0xfeff8fff
 80088e8:	40010000 	.word	0x40010000
 80088ec:	40010400 	.word	0x40010400

080088f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4b2d      	ldr	r3, [pc, #180]	; (80089d0 <TIM_OC3_SetConfig+0xe0>)
 800891c:	4013      	ands	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a22      	ldr	r2, [pc, #136]	; (80089d4 <TIM_OC3_SetConfig+0xe4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d003      	beq.n	8008956 <TIM_OC3_SetConfig+0x66>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a21      	ldr	r2, [pc, #132]	; (80089d8 <TIM_OC3_SetConfig+0xe8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d10d      	bne.n	8008972 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800895c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	4313      	orrs	r3, r2
 8008968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <TIM_OC3_SetConfig+0xe4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d003      	beq.n	8008982 <TIM_OC3_SetConfig+0x92>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <TIM_OC3_SetConfig+0xe8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d113      	bne.n	80089aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	621a      	str	r2, [r3, #32]
}
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	fffeff8f 	.word	0xfffeff8f
 80089d4:	40010000 	.word	0x40010000
 80089d8:	40010400 	.word	0x40010400

080089dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <TIM_OC4_SetConfig+0xa4>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	031b      	lsls	r3, r3, #12
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a13      	ldr	r2, [pc, #76]	; (8008a84 <TIM_OC4_SetConfig+0xa8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_OC4_SetConfig+0x68>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a12      	ldr	r2, [pc, #72]	; (8008a88 <TIM_OC4_SetConfig+0xac>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d109      	bne.n	8008a58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	019b      	lsls	r3, r3, #6
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	feff8fff 	.word	0xfeff8fff
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40010400 	.word	0x40010400

08008a8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4b1b      	ldr	r3, [pc, #108]	; (8008b24 <TIM_OC5_SetConfig+0x98>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008acc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	041b      	lsls	r3, r3, #16
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a12      	ldr	r2, [pc, #72]	; (8008b28 <TIM_OC5_SetConfig+0x9c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_OC5_SetConfig+0x5e>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <TIM_OC5_SetConfig+0xa0>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d109      	bne.n	8008afe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008af0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	685a      	ldr	r2, [r3, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	621a      	str	r2, [r3, #32]
}
 8008b18:	bf00      	nop
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	fffeff8f 	.word	0xfffeff8f
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40010400 	.word	0x40010400

08008b30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4b1c      	ldr	r3, [pc, #112]	; (8008bcc <TIM_OC6_SetConfig+0x9c>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	051b      	lsls	r3, r3, #20
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a13      	ldr	r2, [pc, #76]	; (8008bd0 <TIM_OC6_SetConfig+0xa0>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d003      	beq.n	8008b90 <TIM_OC6_SetConfig+0x60>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a12      	ldr	r2, [pc, #72]	; (8008bd4 <TIM_OC6_SetConfig+0xa4>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d109      	bne.n	8008ba4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	029b      	lsls	r3, r3, #10
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	621a      	str	r2, [r3, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	feff8fff 	.word	0xfeff8fff
 8008bd0:	40010000 	.word	0x40010000
 8008bd4:	40010400 	.word	0x40010400

08008bd8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	4b3d      	ldr	r3, [pc, #244]	; (8008cf4 <TIM_SlaveTimer_SetConfig+0x11c>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2b70      	cmp	r3, #112	; 0x70
 8008c1c:	d01a      	beq.n	8008c54 <TIM_SlaveTimer_SetConfig+0x7c>
 8008c1e:	2b70      	cmp	r3, #112	; 0x70
 8008c20:	d860      	bhi.n	8008ce4 <TIM_SlaveTimer_SetConfig+0x10c>
 8008c22:	2b60      	cmp	r3, #96	; 0x60
 8008c24:	d054      	beq.n	8008cd0 <TIM_SlaveTimer_SetConfig+0xf8>
 8008c26:	2b60      	cmp	r3, #96	; 0x60
 8008c28:	d85c      	bhi.n	8008ce4 <TIM_SlaveTimer_SetConfig+0x10c>
 8008c2a:	2b50      	cmp	r3, #80	; 0x50
 8008c2c:	d046      	beq.n	8008cbc <TIM_SlaveTimer_SetConfig+0xe4>
 8008c2e:	2b50      	cmp	r3, #80	; 0x50
 8008c30:	d858      	bhi.n	8008ce4 <TIM_SlaveTimer_SetConfig+0x10c>
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d019      	beq.n	8008c6a <TIM_SlaveTimer_SetConfig+0x92>
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d854      	bhi.n	8008ce4 <TIM_SlaveTimer_SetConfig+0x10c>
 8008c3a:	2b30      	cmp	r3, #48	; 0x30
 8008c3c:	d054      	beq.n	8008ce8 <TIM_SlaveTimer_SetConfig+0x110>
 8008c3e:	2b30      	cmp	r3, #48	; 0x30
 8008c40:	d850      	bhi.n	8008ce4 <TIM_SlaveTimer_SetConfig+0x10c>
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d050      	beq.n	8008ce8 <TIM_SlaveTimer_SetConfig+0x110>
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d84c      	bhi.n	8008ce4 <TIM_SlaveTimer_SetConfig+0x10c>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d04c      	beq.n	8008ce8 <TIM_SlaveTimer_SetConfig+0x110>
 8008c4e:	2b10      	cmp	r3, #16
 8008c50:	d04a      	beq.n	8008ce8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8008c52:	e047      	b.n	8008ce4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	68d9      	ldr	r1, [r3, #12]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	f000 f8c2 	bl	8008dec <TIM_ETR_SetConfig>
      break;
 8008c68:	e03f      	b.n	8008cea <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b05      	cmp	r3, #5
 8008c70:	d101      	bne.n	8008c76 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e03a      	b.n	8008cec <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6a1a      	ldr	r2, [r3, #32]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0201 	bic.w	r2, r2, #1
 8008c8c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c9c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	621a      	str	r2, [r3, #32]
      break;
 8008cba:	e016      	b.n	8008cea <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	6899      	ldr	r1, [r3, #8]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f000 f815 	bl	8008cf8 <TIM_TI1_ConfigInputStage>
      break;
 8008cce:	e00c      	b.n	8008cea <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6899      	ldr	r1, [r3, #8]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f000 f83a 	bl	8008d56 <TIM_TI2_ConfigInputStage>
      break;
 8008ce2:	e002      	b.n	8008cea <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8008ce8:	bf00      	nop
  }
  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	fffefff8 	.word	0xfffefff8

08008cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	f023 0201 	bic.w	r2, r3, #1
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f023 030a 	bic.w	r3, r3, #10
 8008d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	621a      	str	r2, [r3, #32]
}
 8008d4a:	bf00      	nop
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b087      	sub	sp, #28
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	f023 0210 	bic.w	r2, r3, #16
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	031b      	lsls	r3, r3, #12
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	011b      	lsls	r3, r3, #4
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	621a      	str	r2, [r3, #32]
}
 8008daa:	bf00      	nop
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	f043 0307 	orr.w	r3, r3, #7
 8008dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	609a      	str	r2, [r3, #8]
}
 8008de0:	bf00      	nop
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	021a      	lsls	r2, r3, #8
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	609a      	str	r2, [r3, #8]
}
 8008e20:	bf00      	nop
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d101      	bne.n	8008e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e40:	2302      	movs	r3, #2
 8008e42:	e06d      	b.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a30      	ldr	r2, [pc, #192]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d004      	beq.n	8008e78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a2f      	ldr	r2, [pc, #188]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d108      	bne.n	8008e8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a20      	ldr	r2, [pc, #128]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d022      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb6:	d01d      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a1d      	ldr	r2, [pc, #116]	; (8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d018      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a1c      	ldr	r2, [pc, #112]	; (8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d013      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a1a      	ldr	r2, [pc, #104]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00e      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a15      	ldr	r2, [pc, #84]	; (8008f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d009      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a16      	ldr	r2, [pc, #88]	; (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d004      	beq.n	8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a15      	ldr	r2, [pc, #84]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d10c      	bne.n	8008f0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	40010000 	.word	0x40010000
 8008f30:	40010400 	.word	0x40010400
 8008f34:	40000400 	.word	0x40000400
 8008f38:	40000800 	.word	0x40000800
 8008f3c:	40000c00 	.word	0x40000c00
 8008f40:	40014000 	.word	0x40014000
 8008f44:	40001800 	.word	0x40001800

08008f48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e065      	b.n	8009030 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	041b      	lsls	r3, r3, #16
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a16      	ldr	r2, [pc, #88]	; (800903c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d004      	beq.n	8008ff2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a14      	ldr	r2, [pc, #80]	; (8009040 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d115      	bne.n	800901e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	051b      	lsls	r3, r3, #20
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	4313      	orrs	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	40010000 	.word	0x40010000
 8009040:	40010400 	.word	0x40010400

08009044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e040      	b.n	8009114 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009096:	2b00      	cmp	r3, #0
 8009098:	d106      	bne.n	80090a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7fa f85e 	bl	8003164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2224      	movs	r2, #36	; 0x24
 80090ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0201 	bic.w	r2, r2, #1
 80090bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fa76 	bl	80095b0 <UART_SetConfig>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d101      	bne.n	80090ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e022      	b.n	8009114 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fccc 	bl	8009a74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689a      	ldr	r2, [r3, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fd53 	bl	8009bb8 <UART_CheckIdleState>
 8009112:	4603      	mov	r3, r0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800912e:	2b20      	cmp	r3, #32
 8009130:	d12c      	bne.n	800918c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <HAL_UART_Receive_IT+0x22>
 8009138:	88fb      	ldrh	r3, [r7, #6]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e025      	b.n	800918e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_UART_Receive_IT+0x34>
 800914c:	2302      	movs	r3, #2
 800914e:	e01e      	b.n	800918e <HAL_UART_Receive_IT+0x72>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800917a:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800917c:	88fb      	ldrh	r3, [r7, #6]
 800917e:	461a      	mov	r2, r3
 8009180:	68b9      	ldr	r1, [r7, #8]
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f000 fdc8 	bl	8009d18 <UART_Start_Receive_IT>
 8009188:	4603      	mov	r3, r0
 800918a:	e000      	b.n	800918e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800918c:	2302      	movs	r3, #2
  }
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80091be:	4013      	ands	r3, r2
 80091c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d113      	bne.n	80091f0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00e      	beq.n	80091f0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d009      	beq.n	80091f0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 81b9 	beq.w	8009558 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	4798      	blx	r3
      }
      return;
 80091ee:	e1b3      	b.n	8009558 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 80e3 	beq.w	80093be <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d105      	bne.n	800920e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	4ba5      	ldr	r3, [pc, #660]	; (800949c <HAL_UART_IRQHandler+0x304>)
 8009206:	4013      	ands	r3, r2
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 80d8 	beq.w	80093be <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <HAL_UART_IRQHandler+0xa2>
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2201      	movs	r2, #1
 8009228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009230:	f043 0201 	orr.w	r2, r3, #1
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d010      	beq.n	8009266 <HAL_UART_IRQHandler+0xce>
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2202      	movs	r2, #2
 8009254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800925c:	f043 0204 	orr.w	r2, r3, #4
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d010      	beq.n	8009292 <HAL_UART_IRQHandler+0xfa>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00b      	beq.n	8009292 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2204      	movs	r2, #4
 8009280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009288:	f043 0202 	orr.w	r2, r3, #2
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f003 0308 	and.w	r3, r3, #8
 8009298:	2b00      	cmp	r3, #0
 800929a:	d015      	beq.n	80092c8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2208      	movs	r2, #8
 80092b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092be:	f043 0208 	orr.w	r2, r3, #8
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d011      	beq.n	80092f6 <HAL_UART_IRQHandler+0x15e>
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00c      	beq.n	80092f6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ec:	f043 0220 	orr.w	r2, r3, #32
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 812d 	beq.w	800955c <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	d007      	beq.n	8009326 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800932c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b40      	cmp	r3, #64	; 0x40
 800933a:	d004      	beq.n	8009346 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009342:	2b00      	cmp	r3, #0
 8009344:	d031      	beq.n	80093aa <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fd6e 	bl	8009e28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009356:	2b40      	cmp	r3, #64	; 0x40
 8009358:	d123      	bne.n	80093a2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009368:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936e:	2b00      	cmp	r3, #0
 8009370:	d013      	beq.n	800939a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009376:	4a4a      	ldr	r2, [pc, #296]	; (80094a0 <HAL_UART_IRQHandler+0x308>)
 8009378:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937e:	4618      	mov	r0, r3
 8009380:	f7fa ff44 	bl	800420c <HAL_DMA_Abort_IT>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d017      	beq.n	80093ba <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009394:	4610      	mov	r0, r2
 8009396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009398:	e00f      	b.n	80093ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f8f2 	bl	8009584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a0:	e00b      	b.n	80093ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f8ee 	bl	8009584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a8:	e007      	b.n	80093ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8ea 	bl	8009584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80093b8:	e0d0      	b.n	800955c <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ba:	bf00      	nop
    return;
 80093bc:	e0ce      	b.n	800955c <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	f040 80a7 	bne.w	8009516 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 80a1 	beq.w	8009516 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	f003 0310 	and.w	r3, r3, #16
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 809b 	beq.w	8009516 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2210      	movs	r2, #16
 80093e6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	2b40      	cmp	r3, #64	; 0x40
 80093f4:	d156      	bne.n	80094a4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009400:	893b      	ldrh	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 80ac 	beq.w	8009560 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800940e:	893a      	ldrh	r2, [r7, #8]
 8009410:	429a      	cmp	r2, r3
 8009412:	f080 80a5 	bcs.w	8009560 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	893a      	ldrh	r2, [r7, #8]
 800941a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009428:	d02a      	beq.n	8009480 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009438:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 0201 	bic.w	r2, r2, #1
 8009448:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009458:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2220      	movs	r2, #32
 800945e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0210 	bic.w	r2, r2, #16
 8009474:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947a:	4618      	mov	r0, r3
 800947c:	f7fa fe56 	bl	800412c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800948c:	b29b      	uxth	r3, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	b29b      	uxth	r3, r3
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f87f 	bl	8009598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800949a:	e061      	b.n	8009560 <HAL_UART_IRQHandler+0x3c8>
 800949c:	04000120 	.word	0x04000120
 80094a0:	08009e87 	.word	0x08009e87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d050      	beq.n	8009564 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 80094c2:	897b      	ldrh	r3, [r7, #10]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d04d      	beq.n	8009564 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094d6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0201 	bic.w	r2, r2, #1
 80094e6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0210 	bic.w	r2, r2, #16
 8009508:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800950a:	897b      	ldrh	r3, [r7, #10]
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f842 	bl	8009598 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009514:	e026      	b.n	8009564 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00d      	beq.n	800953c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009526:	2b00      	cmp	r3, #0
 8009528:	d008      	beq.n	800953c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800952e:	2b00      	cmp	r3, #0
 8009530:	d01a      	beq.n	8009568 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
    }
    return;
 800953a:	e015      	b.n	8009568 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	d011      	beq.n	800956a <HAL_UART_IRQHandler+0x3d2>
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00c      	beq.n	800956a <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fcae 	bl	8009eb2 <UART_EndTransmit_IT>
    return;
 8009556:	e008      	b.n	800956a <HAL_UART_IRQHandler+0x3d2>
      return;
 8009558:	bf00      	nop
 800955a:	e006      	b.n	800956a <HAL_UART_IRQHandler+0x3d2>
    return;
 800955c:	bf00      	nop
 800955e:	e004      	b.n	800956a <HAL_UART_IRQHandler+0x3d2>
      return;
 8009560:	bf00      	nop
 8009562:	e002      	b.n	800956a <HAL_UART_IRQHandler+0x3d2>
      return;
 8009564:	bf00      	nop
 8009566:	e000      	b.n	800956a <HAL_UART_IRQHandler+0x3d2>
    return;
 8009568:	bf00      	nop
  }

}
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4ba7      	ldr	r3, [pc, #668]	; (8009878 <UART_SetConfig+0x2c8>)
 80095dc:	4013      	ands	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6812      	ldr	r2, [r2, #0]
 80095e2:	6979      	ldr	r1, [r7, #20]
 80095e4:	430b      	orrs	r3, r1
 80095e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	4313      	orrs	r3, r2
 800960c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	430a      	orrs	r2, r1
 8009620:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a95      	ldr	r2, [pc, #596]	; (800987c <UART_SetConfig+0x2cc>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d120      	bne.n	800966e <UART_SetConfig+0xbe>
 800962c:	4b94      	ldr	r3, [pc, #592]	; (8009880 <UART_SetConfig+0x2d0>)
 800962e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	2b03      	cmp	r3, #3
 8009638:	d816      	bhi.n	8009668 <UART_SetConfig+0xb8>
 800963a:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <UART_SetConfig+0x90>)
 800963c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009640:	08009651 	.word	0x08009651
 8009644:	0800965d 	.word	0x0800965d
 8009648:	08009657 	.word	0x08009657
 800964c:	08009663 	.word	0x08009663
 8009650:	2301      	movs	r3, #1
 8009652:	77fb      	strb	r3, [r7, #31]
 8009654:	e14f      	b.n	80098f6 <UART_SetConfig+0x346>
 8009656:	2302      	movs	r3, #2
 8009658:	77fb      	strb	r3, [r7, #31]
 800965a:	e14c      	b.n	80098f6 <UART_SetConfig+0x346>
 800965c:	2304      	movs	r3, #4
 800965e:	77fb      	strb	r3, [r7, #31]
 8009660:	e149      	b.n	80098f6 <UART_SetConfig+0x346>
 8009662:	2308      	movs	r3, #8
 8009664:	77fb      	strb	r3, [r7, #31]
 8009666:	e146      	b.n	80098f6 <UART_SetConfig+0x346>
 8009668:	2310      	movs	r3, #16
 800966a:	77fb      	strb	r3, [r7, #31]
 800966c:	e143      	b.n	80098f6 <UART_SetConfig+0x346>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a84      	ldr	r2, [pc, #528]	; (8009884 <UART_SetConfig+0x2d4>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d132      	bne.n	80096de <UART_SetConfig+0x12e>
 8009678:	4b81      	ldr	r3, [pc, #516]	; (8009880 <UART_SetConfig+0x2d0>)
 800967a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800967e:	f003 030c 	and.w	r3, r3, #12
 8009682:	2b0c      	cmp	r3, #12
 8009684:	d828      	bhi.n	80096d8 <UART_SetConfig+0x128>
 8009686:	a201      	add	r2, pc, #4	; (adr r2, 800968c <UART_SetConfig+0xdc>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	080096c1 	.word	0x080096c1
 8009690:	080096d9 	.word	0x080096d9
 8009694:	080096d9 	.word	0x080096d9
 8009698:	080096d9 	.word	0x080096d9
 800969c:	080096cd 	.word	0x080096cd
 80096a0:	080096d9 	.word	0x080096d9
 80096a4:	080096d9 	.word	0x080096d9
 80096a8:	080096d9 	.word	0x080096d9
 80096ac:	080096c7 	.word	0x080096c7
 80096b0:	080096d9 	.word	0x080096d9
 80096b4:	080096d9 	.word	0x080096d9
 80096b8:	080096d9 	.word	0x080096d9
 80096bc:	080096d3 	.word	0x080096d3
 80096c0:	2300      	movs	r3, #0
 80096c2:	77fb      	strb	r3, [r7, #31]
 80096c4:	e117      	b.n	80098f6 <UART_SetConfig+0x346>
 80096c6:	2302      	movs	r3, #2
 80096c8:	77fb      	strb	r3, [r7, #31]
 80096ca:	e114      	b.n	80098f6 <UART_SetConfig+0x346>
 80096cc:	2304      	movs	r3, #4
 80096ce:	77fb      	strb	r3, [r7, #31]
 80096d0:	e111      	b.n	80098f6 <UART_SetConfig+0x346>
 80096d2:	2308      	movs	r3, #8
 80096d4:	77fb      	strb	r3, [r7, #31]
 80096d6:	e10e      	b.n	80098f6 <UART_SetConfig+0x346>
 80096d8:	2310      	movs	r3, #16
 80096da:	77fb      	strb	r3, [r7, #31]
 80096dc:	e10b      	b.n	80098f6 <UART_SetConfig+0x346>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a69      	ldr	r2, [pc, #420]	; (8009888 <UART_SetConfig+0x2d8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d120      	bne.n	800972a <UART_SetConfig+0x17a>
 80096e8:	4b65      	ldr	r3, [pc, #404]	; (8009880 <UART_SetConfig+0x2d0>)
 80096ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80096f2:	2b30      	cmp	r3, #48	; 0x30
 80096f4:	d013      	beq.n	800971e <UART_SetConfig+0x16e>
 80096f6:	2b30      	cmp	r3, #48	; 0x30
 80096f8:	d814      	bhi.n	8009724 <UART_SetConfig+0x174>
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d009      	beq.n	8009712 <UART_SetConfig+0x162>
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d810      	bhi.n	8009724 <UART_SetConfig+0x174>
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <UART_SetConfig+0x15c>
 8009706:	2b10      	cmp	r3, #16
 8009708:	d006      	beq.n	8009718 <UART_SetConfig+0x168>
 800970a:	e00b      	b.n	8009724 <UART_SetConfig+0x174>
 800970c:	2300      	movs	r3, #0
 800970e:	77fb      	strb	r3, [r7, #31]
 8009710:	e0f1      	b.n	80098f6 <UART_SetConfig+0x346>
 8009712:	2302      	movs	r3, #2
 8009714:	77fb      	strb	r3, [r7, #31]
 8009716:	e0ee      	b.n	80098f6 <UART_SetConfig+0x346>
 8009718:	2304      	movs	r3, #4
 800971a:	77fb      	strb	r3, [r7, #31]
 800971c:	e0eb      	b.n	80098f6 <UART_SetConfig+0x346>
 800971e:	2308      	movs	r3, #8
 8009720:	77fb      	strb	r3, [r7, #31]
 8009722:	e0e8      	b.n	80098f6 <UART_SetConfig+0x346>
 8009724:	2310      	movs	r3, #16
 8009726:	77fb      	strb	r3, [r7, #31]
 8009728:	e0e5      	b.n	80098f6 <UART_SetConfig+0x346>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a57      	ldr	r2, [pc, #348]	; (800988c <UART_SetConfig+0x2dc>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d120      	bne.n	8009776 <UART_SetConfig+0x1c6>
 8009734:	4b52      	ldr	r3, [pc, #328]	; (8009880 <UART_SetConfig+0x2d0>)
 8009736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800973a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800973e:	2bc0      	cmp	r3, #192	; 0xc0
 8009740:	d013      	beq.n	800976a <UART_SetConfig+0x1ba>
 8009742:	2bc0      	cmp	r3, #192	; 0xc0
 8009744:	d814      	bhi.n	8009770 <UART_SetConfig+0x1c0>
 8009746:	2b80      	cmp	r3, #128	; 0x80
 8009748:	d009      	beq.n	800975e <UART_SetConfig+0x1ae>
 800974a:	2b80      	cmp	r3, #128	; 0x80
 800974c:	d810      	bhi.n	8009770 <UART_SetConfig+0x1c0>
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <UART_SetConfig+0x1a8>
 8009752:	2b40      	cmp	r3, #64	; 0x40
 8009754:	d006      	beq.n	8009764 <UART_SetConfig+0x1b4>
 8009756:	e00b      	b.n	8009770 <UART_SetConfig+0x1c0>
 8009758:	2300      	movs	r3, #0
 800975a:	77fb      	strb	r3, [r7, #31]
 800975c:	e0cb      	b.n	80098f6 <UART_SetConfig+0x346>
 800975e:	2302      	movs	r3, #2
 8009760:	77fb      	strb	r3, [r7, #31]
 8009762:	e0c8      	b.n	80098f6 <UART_SetConfig+0x346>
 8009764:	2304      	movs	r3, #4
 8009766:	77fb      	strb	r3, [r7, #31]
 8009768:	e0c5      	b.n	80098f6 <UART_SetConfig+0x346>
 800976a:	2308      	movs	r3, #8
 800976c:	77fb      	strb	r3, [r7, #31]
 800976e:	e0c2      	b.n	80098f6 <UART_SetConfig+0x346>
 8009770:	2310      	movs	r3, #16
 8009772:	77fb      	strb	r3, [r7, #31]
 8009774:	e0bf      	b.n	80098f6 <UART_SetConfig+0x346>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a45      	ldr	r2, [pc, #276]	; (8009890 <UART_SetConfig+0x2e0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d125      	bne.n	80097cc <UART_SetConfig+0x21c>
 8009780:	4b3f      	ldr	r3, [pc, #252]	; (8009880 <UART_SetConfig+0x2d0>)
 8009782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800978e:	d017      	beq.n	80097c0 <UART_SetConfig+0x210>
 8009790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009794:	d817      	bhi.n	80097c6 <UART_SetConfig+0x216>
 8009796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800979a:	d00b      	beq.n	80097b4 <UART_SetConfig+0x204>
 800979c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097a0:	d811      	bhi.n	80097c6 <UART_SetConfig+0x216>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <UART_SetConfig+0x1fe>
 80097a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097aa:	d006      	beq.n	80097ba <UART_SetConfig+0x20a>
 80097ac:	e00b      	b.n	80097c6 <UART_SetConfig+0x216>
 80097ae:	2300      	movs	r3, #0
 80097b0:	77fb      	strb	r3, [r7, #31]
 80097b2:	e0a0      	b.n	80098f6 <UART_SetConfig+0x346>
 80097b4:	2302      	movs	r3, #2
 80097b6:	77fb      	strb	r3, [r7, #31]
 80097b8:	e09d      	b.n	80098f6 <UART_SetConfig+0x346>
 80097ba:	2304      	movs	r3, #4
 80097bc:	77fb      	strb	r3, [r7, #31]
 80097be:	e09a      	b.n	80098f6 <UART_SetConfig+0x346>
 80097c0:	2308      	movs	r3, #8
 80097c2:	77fb      	strb	r3, [r7, #31]
 80097c4:	e097      	b.n	80098f6 <UART_SetConfig+0x346>
 80097c6:	2310      	movs	r3, #16
 80097c8:	77fb      	strb	r3, [r7, #31]
 80097ca:	e094      	b.n	80098f6 <UART_SetConfig+0x346>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a30      	ldr	r2, [pc, #192]	; (8009894 <UART_SetConfig+0x2e4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d125      	bne.n	8009822 <UART_SetConfig+0x272>
 80097d6:	4b2a      	ldr	r3, [pc, #168]	; (8009880 <UART_SetConfig+0x2d0>)
 80097d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80097e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097e4:	d017      	beq.n	8009816 <UART_SetConfig+0x266>
 80097e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097ea:	d817      	bhi.n	800981c <UART_SetConfig+0x26c>
 80097ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097f0:	d00b      	beq.n	800980a <UART_SetConfig+0x25a>
 80097f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097f6:	d811      	bhi.n	800981c <UART_SetConfig+0x26c>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <UART_SetConfig+0x254>
 80097fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009800:	d006      	beq.n	8009810 <UART_SetConfig+0x260>
 8009802:	e00b      	b.n	800981c <UART_SetConfig+0x26c>
 8009804:	2301      	movs	r3, #1
 8009806:	77fb      	strb	r3, [r7, #31]
 8009808:	e075      	b.n	80098f6 <UART_SetConfig+0x346>
 800980a:	2302      	movs	r3, #2
 800980c:	77fb      	strb	r3, [r7, #31]
 800980e:	e072      	b.n	80098f6 <UART_SetConfig+0x346>
 8009810:	2304      	movs	r3, #4
 8009812:	77fb      	strb	r3, [r7, #31]
 8009814:	e06f      	b.n	80098f6 <UART_SetConfig+0x346>
 8009816:	2308      	movs	r3, #8
 8009818:	77fb      	strb	r3, [r7, #31]
 800981a:	e06c      	b.n	80098f6 <UART_SetConfig+0x346>
 800981c:	2310      	movs	r3, #16
 800981e:	77fb      	strb	r3, [r7, #31]
 8009820:	e069      	b.n	80098f6 <UART_SetConfig+0x346>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a1c      	ldr	r2, [pc, #112]	; (8009898 <UART_SetConfig+0x2e8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d137      	bne.n	800989c <UART_SetConfig+0x2ec>
 800982c:	4b14      	ldr	r3, [pc, #80]	; (8009880 <UART_SetConfig+0x2d0>)
 800982e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009832:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009836:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800983a:	d017      	beq.n	800986c <UART_SetConfig+0x2bc>
 800983c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009840:	d817      	bhi.n	8009872 <UART_SetConfig+0x2c2>
 8009842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009846:	d00b      	beq.n	8009860 <UART_SetConfig+0x2b0>
 8009848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800984c:	d811      	bhi.n	8009872 <UART_SetConfig+0x2c2>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <UART_SetConfig+0x2aa>
 8009852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009856:	d006      	beq.n	8009866 <UART_SetConfig+0x2b6>
 8009858:	e00b      	b.n	8009872 <UART_SetConfig+0x2c2>
 800985a:	2300      	movs	r3, #0
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	e04a      	b.n	80098f6 <UART_SetConfig+0x346>
 8009860:	2302      	movs	r3, #2
 8009862:	77fb      	strb	r3, [r7, #31]
 8009864:	e047      	b.n	80098f6 <UART_SetConfig+0x346>
 8009866:	2304      	movs	r3, #4
 8009868:	77fb      	strb	r3, [r7, #31]
 800986a:	e044      	b.n	80098f6 <UART_SetConfig+0x346>
 800986c:	2308      	movs	r3, #8
 800986e:	77fb      	strb	r3, [r7, #31]
 8009870:	e041      	b.n	80098f6 <UART_SetConfig+0x346>
 8009872:	2310      	movs	r3, #16
 8009874:	77fb      	strb	r3, [r7, #31]
 8009876:	e03e      	b.n	80098f6 <UART_SetConfig+0x346>
 8009878:	efff69f3 	.word	0xefff69f3
 800987c:	40011000 	.word	0x40011000
 8009880:	40023800 	.word	0x40023800
 8009884:	40004400 	.word	0x40004400
 8009888:	40004800 	.word	0x40004800
 800988c:	40004c00 	.word	0x40004c00
 8009890:	40005000 	.word	0x40005000
 8009894:	40011400 	.word	0x40011400
 8009898:	40007800 	.word	0x40007800
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a71      	ldr	r2, [pc, #452]	; (8009a68 <UART_SetConfig+0x4b8>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d125      	bne.n	80098f2 <UART_SetConfig+0x342>
 80098a6:	4b71      	ldr	r3, [pc, #452]	; (8009a6c <UART_SetConfig+0x4bc>)
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80098b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80098b4:	d017      	beq.n	80098e6 <UART_SetConfig+0x336>
 80098b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80098ba:	d817      	bhi.n	80098ec <UART_SetConfig+0x33c>
 80098bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098c0:	d00b      	beq.n	80098da <UART_SetConfig+0x32a>
 80098c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098c6:	d811      	bhi.n	80098ec <UART_SetConfig+0x33c>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <UART_SetConfig+0x324>
 80098cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098d0:	d006      	beq.n	80098e0 <UART_SetConfig+0x330>
 80098d2:	e00b      	b.n	80098ec <UART_SetConfig+0x33c>
 80098d4:	2300      	movs	r3, #0
 80098d6:	77fb      	strb	r3, [r7, #31]
 80098d8:	e00d      	b.n	80098f6 <UART_SetConfig+0x346>
 80098da:	2302      	movs	r3, #2
 80098dc:	77fb      	strb	r3, [r7, #31]
 80098de:	e00a      	b.n	80098f6 <UART_SetConfig+0x346>
 80098e0:	2304      	movs	r3, #4
 80098e2:	77fb      	strb	r3, [r7, #31]
 80098e4:	e007      	b.n	80098f6 <UART_SetConfig+0x346>
 80098e6:	2308      	movs	r3, #8
 80098e8:	77fb      	strb	r3, [r7, #31]
 80098ea:	e004      	b.n	80098f6 <UART_SetConfig+0x346>
 80098ec:	2310      	movs	r3, #16
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	e001      	b.n	80098f6 <UART_SetConfig+0x346>
 80098f2:	2310      	movs	r3, #16
 80098f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098fe:	d15b      	bne.n	80099b8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8009900:	7ffb      	ldrb	r3, [r7, #31]
 8009902:	2b08      	cmp	r3, #8
 8009904:	d827      	bhi.n	8009956 <UART_SetConfig+0x3a6>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <UART_SetConfig+0x35c>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	08009931 	.word	0x08009931
 8009910:	08009939 	.word	0x08009939
 8009914:	08009941 	.word	0x08009941
 8009918:	08009957 	.word	0x08009957
 800991c:	08009947 	.word	0x08009947
 8009920:	08009957 	.word	0x08009957
 8009924:	08009957 	.word	0x08009957
 8009928:	08009957 	.word	0x08009957
 800992c:	0800994f 	.word	0x0800994f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009930:	f7fd f878 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 8009934:	61b8      	str	r0, [r7, #24]
        break;
 8009936:	e013      	b.n	8009960 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009938:	f7fd f888 	bl	8006a4c <HAL_RCC_GetPCLK2Freq>
 800993c:	61b8      	str	r0, [r7, #24]
        break;
 800993e:	e00f      	b.n	8009960 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009940:	4b4b      	ldr	r3, [pc, #300]	; (8009a70 <UART_SetConfig+0x4c0>)
 8009942:	61bb      	str	r3, [r7, #24]
        break;
 8009944:	e00c      	b.n	8009960 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009946:	f7fc ffab 	bl	80068a0 <HAL_RCC_GetSysClockFreq>
 800994a:	61b8      	str	r0, [r7, #24]
        break;
 800994c:	e008      	b.n	8009960 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800994e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009952:	61bb      	str	r3, [r7, #24]
        break;
 8009954:	e004      	b.n	8009960 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	77bb      	strb	r3, [r7, #30]
        break;
 800995e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d074      	beq.n	8009a50 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	005a      	lsls	r2, r3, #1
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	085b      	lsrs	r3, r3, #1
 8009970:	441a      	add	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	fbb2 f3f3 	udiv	r3, r2, r3
 800997a:	b29b      	uxth	r3, r3
 800997c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b0f      	cmp	r3, #15
 8009982:	d916      	bls.n	80099b2 <UART_SetConfig+0x402>
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800998a:	d212      	bcs.n	80099b2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	b29b      	uxth	r3, r3
 8009990:	f023 030f 	bic.w	r3, r3, #15
 8009994:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	085b      	lsrs	r3, r3, #1
 800999a:	b29b      	uxth	r3, r3
 800999c:	f003 0307 	and.w	r3, r3, #7
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	89fb      	ldrh	r3, [r7, #14]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	89fa      	ldrh	r2, [r7, #14]
 80099ae:	60da      	str	r2, [r3, #12]
 80099b0:	e04e      	b.n	8009a50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	77bb      	strb	r3, [r7, #30]
 80099b6:	e04b      	b.n	8009a50 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099b8:	7ffb      	ldrb	r3, [r7, #31]
 80099ba:	2b08      	cmp	r3, #8
 80099bc:	d827      	bhi.n	8009a0e <UART_SetConfig+0x45e>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <UART_SetConfig+0x414>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099e9 	.word	0x080099e9
 80099c8:	080099f1 	.word	0x080099f1
 80099cc:	080099f9 	.word	0x080099f9
 80099d0:	08009a0f 	.word	0x08009a0f
 80099d4:	080099ff 	.word	0x080099ff
 80099d8:	08009a0f 	.word	0x08009a0f
 80099dc:	08009a0f 	.word	0x08009a0f
 80099e0:	08009a0f 	.word	0x08009a0f
 80099e4:	08009a07 	.word	0x08009a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099e8:	f7fd f81c 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 80099ec:	61b8      	str	r0, [r7, #24]
        break;
 80099ee:	e013      	b.n	8009a18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099f0:	f7fd f82c 	bl	8006a4c <HAL_RCC_GetPCLK2Freq>
 80099f4:	61b8      	str	r0, [r7, #24]
        break;
 80099f6:	e00f      	b.n	8009a18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099f8:	4b1d      	ldr	r3, [pc, #116]	; (8009a70 <UART_SetConfig+0x4c0>)
 80099fa:	61bb      	str	r3, [r7, #24]
        break;
 80099fc:	e00c      	b.n	8009a18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099fe:	f7fc ff4f 	bl	80068a0 <HAL_RCC_GetSysClockFreq>
 8009a02:	61b8      	str	r0, [r7, #24]
        break;
 8009a04:	e008      	b.n	8009a18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a0a:	61bb      	str	r3, [r7, #24]
        break;
 8009a0c:	e004      	b.n	8009a18 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	77bb      	strb	r3, [r7, #30]
        break;
 8009a16:	bf00      	nop
    }

    if (pclk != 0U)
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d018      	beq.n	8009a50 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	085a      	lsrs	r2, r3, #1
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	441a      	add	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2b0f      	cmp	r3, #15
 8009a38:	d908      	bls.n	8009a4c <UART_SetConfig+0x49c>
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a40:	d204      	bcs.n	8009a4c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	60da      	str	r2, [r3, #12]
 8009a4a:	e001      	b.n	8009a50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009a5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3720      	adds	r7, #32
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	40007c00 	.word	0x40007c00
 8009a6c:	40023800 	.word	0x40023800
 8009a70:	00f42400 	.word	0x00f42400

08009a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00a      	beq.n	8009a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	430a      	orrs	r2, r1
 8009abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	f003 0304 	and.w	r3, r3, #4
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00a      	beq.n	8009ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	f003 0308 	and.w	r3, r3, #8
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b08:	f003 0310 	and.w	r3, r3, #16
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00a      	beq.n	8009b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d01a      	beq.n	8009b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b72:	d10a      	bne.n	8009b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	605a      	str	r2, [r3, #4]
  }
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af02      	add	r7, sp, #8
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bc8:	f7f9 fd2a 	bl	8003620 <HAL_GetTick>
 8009bcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b08      	cmp	r3, #8
 8009bda:	d10e      	bne.n	8009bfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f817 	bl	8009c1e <UART_WaitOnFlagUntilTimeout>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e00d      	b.n	8009c16 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2220      	movs	r2, #32
 8009c04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	60b9      	str	r1, [r7, #8]
 8009c28:	603b      	str	r3, [r7, #0]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c2e:	e05e      	b.n	8009cee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c36:	d05a      	beq.n	8009cee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c38:	f7f9 fcf2 	bl	8003620 <HAL_GetTick>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d302      	bcc.n	8009c4e <UART_WaitOnFlagUntilTimeout+0x30>
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d11b      	bne.n	8009c86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689a      	ldr	r2, [r3, #8]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 0201 	bic.w	r2, r2, #1
 8009c6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2220      	movs	r2, #32
 8009c72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2220      	movs	r2, #32
 8009c78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e043      	b.n	8009d0e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d02c      	beq.n	8009cee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ca2:	d124      	bne.n	8009cee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009cbc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f022 0201 	bic.w	r2, r2, #1
 8009ccc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e00f      	b.n	8009d0e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	69da      	ldr	r2, [r3, #28]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	bf0c      	ite	eq
 8009cfe:	2301      	moveq	r3, #1
 8009d00:	2300      	movne	r3, #0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	461a      	mov	r2, r3
 8009d06:	79fb      	ldrb	r3, [r7, #7]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d091      	beq.n	8009c30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	88fa      	ldrh	r2, [r7, #6]
 8009d30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	88fa      	ldrh	r2, [r7, #6]
 8009d38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d4a:	d10e      	bne.n	8009d6a <UART_Start_Receive_IT+0x52>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d105      	bne.n	8009d60 <UART_Start_Receive_IT+0x48>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009d5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d5e:	e02d      	b.n	8009dbc <UART_Start_Receive_IT+0xa4>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	22ff      	movs	r2, #255	; 0xff
 8009d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d68:	e028      	b.n	8009dbc <UART_Start_Receive_IT+0xa4>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10d      	bne.n	8009d8e <UART_Start_Receive_IT+0x76>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d104      	bne.n	8009d84 <UART_Start_Receive_IT+0x6c>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	22ff      	movs	r2, #255	; 0xff
 8009d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d82:	e01b      	b.n	8009dbc <UART_Start_Receive_IT+0xa4>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	227f      	movs	r2, #127	; 0x7f
 8009d88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d8c:	e016      	b.n	8009dbc <UART_Start_Receive_IT+0xa4>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d96:	d10d      	bne.n	8009db4 <UART_Start_Receive_IT+0x9c>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d104      	bne.n	8009daa <UART_Start_Receive_IT+0x92>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	227f      	movs	r2, #127	; 0x7f
 8009da4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009da8:	e008      	b.n	8009dbc <UART_Start_Receive_IT+0xa4>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	223f      	movs	r2, #63	; 0x3f
 8009dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009db2:	e003      	b.n	8009dbc <UART_Start_Receive_IT+0xa4>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2222      	movs	r2, #34	; 0x22
 8009dc8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f042 0201 	orr.w	r2, r2, #1
 8009dd8:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de2:	d107      	bne.n	8009df4 <UART_Start_Receive_IT+0xdc>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d103      	bne.n	8009df4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4a0c      	ldr	r2, [pc, #48]	; (8009e20 <UART_Start_Receive_IT+0x108>)
 8009df0:	665a      	str	r2, [r3, #100]	; 0x64
 8009df2:	e002      	b.n	8009dfa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4a0b      	ldr	r2, [pc, #44]	; (8009e24 <UART_Start_Receive_IT+0x10c>)
 8009df8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009e10:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	08009fb9 	.word	0x08009fb9
 8009e24:	08009ee5 	.word	0x08009ee5

08009e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e3e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689a      	ldr	r2, [r3, #8]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0201 	bic.w	r2, r2, #1
 8009e4e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d107      	bne.n	8009e68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0210 	bic.w	r2, r2, #16
 8009e66:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009e7a:	bf00      	nop
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff fb6d 	bl	8009584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ec8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff fb4a 	bl	8009570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ef2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ef8:	2b22      	cmp	r3, #34	; 0x22
 8009efa:	d151      	bne.n	8009fa0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f04:	89bb      	ldrh	r3, [r7, #12]
 8009f06:	b2d9      	uxtb	r1, r3
 8009f08:	89fb      	ldrh	r3, [r7, #14]
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f10:	400a      	ands	r2, r1
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d138      	bne.n	8009fb0 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f4c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0201 	bic.w	r2, r2, #1
 8009f5c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2220      	movs	r2, #32
 8009f62:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d10f      	bne.n	8009f92 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 0210 	bic.w	r2, r2, #16
 8009f80:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7ff fb04 	bl	8009598 <HAL_UARTEx_RxEventCallback>
 8009f90:	e002      	b.n	8009f98 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7f7 fdca 	bl	8001b2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f9e:	e007      	b.n	8009fb0 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	699a      	ldr	r2, [r3, #24]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f042 0208 	orr.w	r2, r2, #8
 8009fae:	619a      	str	r2, [r3, #24]
}
 8009fb0:	bf00      	nop
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fc6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fcc:	2b22      	cmp	r3, #34	; 0x22
 8009fce:	d151      	bne.n	800a074 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fdc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009fde:	89ba      	ldrh	r2, [r7, #12]
 8009fe0:	89fb      	ldrh	r3, [r7, #14]
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fee:	1c9a      	adds	r2, r3, #2
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d138      	bne.n	800a084 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a020:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 0201 	bic.w	r2, r2, #1
 800a030:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2220      	movs	r2, #32
 800a036:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a042:	2b01      	cmp	r3, #1
 800a044:	d10f      	bne.n	800a066 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 0210 	bic.w	r2, r2, #16
 800a054:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fa9a 	bl	8009598 <HAL_UARTEx_RxEventCallback>
 800a064:	e002      	b.n	800a06c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7f7 fd60 	bl	8001b2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a072:	e007      	b.n	800a084 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0208 	orr.w	r2, r2, #8
 800a082:	619a      	str	r2, [r3, #24]
}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d027      	beq.n	800a0f6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	4b2f      	ldr	r3, [pc, #188]	; (800a16c <FMC_SDRAM_Init+0xe0>)
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0bc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a0c2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a0c8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a0ce:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a0d4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a0da:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a0e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a0e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	e032      	b.n	800a15c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a102:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a10c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a112:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	4b12      	ldr	r3, [pc, #72]	; (800a16c <FMC_SDRAM_Init+0xe0>)
 800a124:	4013      	ands	r3, r2
 800a126:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a130:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a136:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a13c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a142:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a148:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	ffff8000 	.word	0xffff8000

0800a170 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d02e      	beq.n	800a1e8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a196:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a1a6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a1b0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a1ba:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a1c4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a1ce:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	609a      	str	r2, [r3, #8]
 800a1e6:	e039      	b.n	800a25c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	4b1e      	ldr	r3, [pc, #120]	; (800a26c <FMC_SDRAM_Timing_Init+0xfc>)
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	3b01      	subs	r3, #1
 800a204:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a206:	4313      	orrs	r3, r2
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a21a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	3b01      	subs	r3, #1
 800a228:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a22a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	3b01      	subs	r3, #1
 800a232:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a234:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a23e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	3b01      	subs	r3, #1
 800a246:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a248:	4313      	orrs	r3, r2
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	ff0f0fff 	.word	0xff0f0fff

0800a270 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	691a      	ldr	r2, [r3, #16]
 800a280:	4b0c      	ldr	r3, [pc, #48]	; (800a2b4 <FMC_SDRAM_SendCommand+0x44>)
 800a282:	4013      	ands	r3, r2
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	6811      	ldr	r1, [r2, #0]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	6852      	ldr	r2, [r2, #4]
 800a28c:	4311      	orrs	r1, r2
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	6892      	ldr	r2, [r2, #8]
 800a292:	3a01      	subs	r2, #1
 800a294:	0152      	lsls	r2, r2, #5
 800a296:	4311      	orrs	r1, r2
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	68d2      	ldr	r2, [r2, #12]
 800a29c:	0252      	lsls	r2, r2, #9
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	431a      	orrs	r2, r3
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	ffc00000 	.word	0xffc00000

0800a2b8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	695a      	ldr	r2, [r3, #20]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d007      	beq.n	800a2fe <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	f000 fa30 	bl	800a75a <xQueueCreateMutexStatic>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	e003      	b.n	800a306 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a2fe:	2001      	movs	r0, #1
 800a300:	f000 fa13 	bl	800a72a <xQueueCreateMutex>
 800a304:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f103 0208 	add.w	r2, r3, #8
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f04f 32ff 	mov.w	r2, #4294967295
 800a326:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f103 0208 	add.w	r2, r3, #8
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f103 0208 	add.w	r2, r3, #8
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a342:	bf00      	nop
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a34e:	b480      	push	{r7}
 800a350:	b085      	sub	sp, #20
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	601a      	str	r2, [r3, #0]
}
 800a38a:	bf00      	nop
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a396:	b480      	push	{r7}
 800a398:	b085      	sub	sp, #20
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ac:	d103      	bne.n	800a3b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e00c      	b.n	800a3d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	e002      	b.n	800a3c4 <vListInsert+0x2e>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d2f6      	bcs.n	800a3be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	6892      	ldr	r2, [r2, #8]
 800a41e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	6852      	ldr	r2, [r2, #4]
 800a428:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d103      	bne.n	800a43c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	1e5a      	subs	r2, r3, #1
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10c      	bne.n	800a48a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	b672      	cpsid	i
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	b662      	cpsie	i
 800a484:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a48a:	f001 f815 	bl	800b4b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	68f9      	ldr	r1, [r7, #12]
 800a4be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4c0:	fb01 f303 	mul.w	r3, r1, r3
 800a4c4:	441a      	add	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	22ff      	movs	r2, #255	; 0xff
 800a4ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	22ff      	movs	r2, #255	; 0xff
 800a4d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d114      	bne.n	800a50a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01a      	beq.n	800a51e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3310      	adds	r3, #16
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 fdb3 	bl	800b058 <xTaskRemoveFromEventList>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d012      	beq.n	800a51e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <xQueueGenericReset+0xd0>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	e009      	b.n	800a51e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3310      	adds	r3, #16
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fefd 	bl	800a30e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3324      	adds	r3, #36	; 0x24
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff fef8 	bl	800a30e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a51e:	f000 ffff 	bl	800b520 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a522:	2301      	movs	r3, #1
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	e000ed04 	.word	0xe000ed04

0800a530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08e      	sub	sp, #56	; 0x38
 800a534:	af02      	add	r7, sp, #8
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10c      	bne.n	800a55e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	b672      	cpsid	i
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	b662      	cpsie	i
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a55a:	bf00      	nop
 800a55c:	e7fe      	b.n	800a55c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10c      	bne.n	800a57e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	b672      	cpsid	i
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	b662      	cpsie	i
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a57a:	bf00      	nop
 800a57c:	e7fe      	b.n	800a57c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <xQueueGenericCreateStatic+0x5a>
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <xQueueGenericCreateStatic+0x5e>
 800a58a:	2301      	movs	r3, #1
 800a58c:	e000      	b.n	800a590 <xQueueGenericCreateStatic+0x60>
 800a58e:	2300      	movs	r3, #0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10c      	bne.n	800a5ae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	b672      	cpsid	i
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	b662      	cpsie	i
 800a5a8:	623b      	str	r3, [r7, #32]
}
 800a5aa:	bf00      	nop
 800a5ac:	e7fe      	b.n	800a5ac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d102      	bne.n	800a5ba <xQueueGenericCreateStatic+0x8a>
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <xQueueGenericCreateStatic+0x8e>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e000      	b.n	800a5c0 <xQueueGenericCreateStatic+0x90>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10c      	bne.n	800a5de <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	b672      	cpsid	i
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	b662      	cpsie	i
 800a5d8:	61fb      	str	r3, [r7, #28]
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5de:	2348      	movs	r3, #72	; 0x48
 800a5e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2b48      	cmp	r3, #72	; 0x48
 800a5e6:	d00c      	beq.n	800a602 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	b672      	cpsid	i
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	b662      	cpsie	i
 800a5fc:	61bb      	str	r3, [r7, #24]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a602:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00d      	beq.n	800a62a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a616:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	4613      	mov	r3, r2
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	68b9      	ldr	r1, [r7, #8]
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f847 	bl	800a6b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3730      	adds	r7, #48	; 0x30
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08a      	sub	sp, #40	; 0x28
 800a638:	af02      	add	r7, sp, #8
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10c      	bne.n	800a662 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	b672      	cpsid	i
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	b662      	cpsie	i
 800a65c:	613b      	str	r3, [r7, #16]
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d102      	bne.n	800a66e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	e004      	b.n	800a678 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	fb02 f303 	mul.w	r3, r2, r3
 800a676:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	3348      	adds	r3, #72	; 0x48
 800a67c:	4618      	mov	r0, r3
 800a67e:	f001 f81b 	bl	800b6b8 <pvPortMalloc>
 800a682:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d011      	beq.n	800a6ae <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	3348      	adds	r3, #72	; 0x48
 800a692:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a69c:	79fa      	ldrb	r2, [r7, #7]
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f805 	bl	800a6b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6ae:	69bb      	ldr	r3, [r7, #24]
	}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3720      	adds	r7, #32
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d103      	bne.n	800a6d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	e002      	b.n	800a6da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	69b8      	ldr	r0, [r7, #24]
 800a6ea:	f7ff feb7 	bl	800a45c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6ee:	bf00      	nop
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00e      	beq.n	800a722 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a716:	2300      	movs	r3, #0
 800a718:	2200      	movs	r2, #0
 800a71a:	2100      	movs	r1, #0
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f837 	bl	800a790 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b086      	sub	sp, #24
 800a72e:	af00      	add	r7, sp, #0
 800a730:	4603      	mov	r3, r0
 800a732:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a734:	2301      	movs	r3, #1
 800a736:	617b      	str	r3, [r7, #20]
 800a738:	2300      	movs	r3, #0
 800a73a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	461a      	mov	r2, r3
 800a740:	6939      	ldr	r1, [r7, #16]
 800a742:	6978      	ldr	r0, [r7, #20]
 800a744:	f7ff ff76 	bl	800a634 <xQueueGenericCreate>
 800a748:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff ffd3 	bl	800a6f6 <prvInitialiseMutex>

		return xNewQueue;
 800a750:	68fb      	ldr	r3, [r7, #12]
	}
 800a752:	4618      	mov	r0, r3
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b088      	sub	sp, #32
 800a75e:	af02      	add	r7, sp, #8
 800a760:	4603      	mov	r3, r0
 800a762:	6039      	str	r1, [r7, #0]
 800a764:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a766:	2301      	movs	r3, #1
 800a768:	617b      	str	r3, [r7, #20]
 800a76a:	2300      	movs	r3, #0
 800a76c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2200      	movs	r2, #0
 800a776:	6939      	ldr	r1, [r7, #16]
 800a778:	6978      	ldr	r0, [r7, #20]
 800a77a:	f7ff fed9 	bl	800a530 <xQueueGenericCreateStatic>
 800a77e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7ff ffb8 	bl	800a6f6 <prvInitialiseMutex>

		return xNewQueue;
 800a786:	68fb      	ldr	r3, [r7, #12]
	}
 800a788:	4618      	mov	r0, r3
 800a78a:	3718      	adds	r7, #24
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08e      	sub	sp, #56	; 0x38
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
 800a79c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10c      	bne.n	800a7c6 <xQueueGenericSend+0x36>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	b672      	cpsid	i
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	b662      	cpsie	i
 800a7c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d103      	bne.n	800a7d4 <xQueueGenericSend+0x44>
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <xQueueGenericSend+0x48>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <xQueueGenericSend+0x4a>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10c      	bne.n	800a7f8 <xQueueGenericSend+0x68>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	b672      	cpsid	i
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	b662      	cpsie	i
 800a7f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d103      	bne.n	800a806 <xQueueGenericSend+0x76>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	2b01      	cmp	r3, #1
 800a804:	d101      	bne.n	800a80a <xQueueGenericSend+0x7a>
 800a806:	2301      	movs	r3, #1
 800a808:	e000      	b.n	800a80c <xQueueGenericSend+0x7c>
 800a80a:	2300      	movs	r3, #0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10c      	bne.n	800a82a <xQueueGenericSend+0x9a>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	b672      	cpsid	i
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	b662      	cpsie	i
 800a824:	623b      	str	r3, [r7, #32]
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a82a:	f000 fd21 	bl	800b270 <xTaskGetSchedulerState>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d102      	bne.n	800a83a <xQueueGenericSend+0xaa>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <xQueueGenericSend+0xae>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e000      	b.n	800a840 <xQueueGenericSend+0xb0>
 800a83e:	2300      	movs	r3, #0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10c      	bne.n	800a85e <xQueueGenericSend+0xce>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	b672      	cpsid	i
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	b662      	cpsie	i
 800a858:	61fb      	str	r3, [r7, #28]
}
 800a85a:	bf00      	nop
 800a85c:	e7fe      	b.n	800a85c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a85e:	f000 fe2b 	bl	800b4b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d302      	bcc.n	800a874 <xQueueGenericSend+0xe4>
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b02      	cmp	r3, #2
 800a872:	d129      	bne.n	800a8c8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a87a:	f000 f92f 	bl	800aadc <prvCopyDataToQueue>
 800a87e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a884:	2b00      	cmp	r3, #0
 800a886:	d010      	beq.n	800a8aa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	3324      	adds	r3, #36	; 0x24
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fbe3 	bl	800b058 <xTaskRemoveFromEventList>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d013      	beq.n	800a8c0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a898:	4b3f      	ldr	r3, [pc, #252]	; (800a998 <xQueueGenericSend+0x208>)
 800a89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	e00a      	b.n	800a8c0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d007      	beq.n	800a8c0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8b0:	4b39      	ldr	r3, [pc, #228]	; (800a998 <xQueueGenericSend+0x208>)
 800a8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8c0:	f000 fe2e 	bl	800b520 <vPortExitCritical>
				return pdPASS;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e063      	b.n	800a990 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d103      	bne.n	800a8d6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8ce:	f000 fe27 	bl	800b520 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	e05c      	b.n	800a990 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8dc:	f107 0314 	add.w	r3, r7, #20
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 fc1d 	bl	800b120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8ea:	f000 fe19 	bl	800b520 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8ee:	f000 f9c9 	bl	800ac84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8f2:	f000 fde1 	bl	800b4b8 <vPortEnterCritical>
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8fc:	b25b      	sxtb	r3, r3
 800a8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a902:	d103      	bne.n	800a90c <xQueueGenericSend+0x17c>
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a912:	b25b      	sxtb	r3, r3
 800a914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a918:	d103      	bne.n	800a922 <xQueueGenericSend+0x192>
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a922:	f000 fdfd 	bl	800b520 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a926:	1d3a      	adds	r2, r7, #4
 800a928:	f107 0314 	add.w	r3, r7, #20
 800a92c:	4611      	mov	r1, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 fc0c 	bl	800b14c <xTaskCheckForTimeOut>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d124      	bne.n	800a984 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a93a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a93c:	f000 f98a 	bl	800ac54 <prvIsQueueFull>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d018      	beq.n	800a978 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	3310      	adds	r3, #16
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	4611      	mov	r1, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 fb5c 	bl	800b00c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a956:	f000 f92b 	bl	800abb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a95a:	f000 f9a1 	bl	800aca0 <xTaskResumeAll>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	f47f af7c 	bne.w	800a85e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <xQueueGenericSend+0x208>)
 800a968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	e772      	b.n	800a85e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a97a:	f000 f919 	bl	800abb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a97e:	f000 f98f 	bl	800aca0 <xTaskResumeAll>
 800a982:	e76c      	b.n	800a85e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a986:	f000 f913 	bl	800abb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a98a:	f000 f989 	bl	800aca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a98e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a990:	4618      	mov	r0, r3
 800a992:	3738      	adds	r7, #56	; 0x38
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	e000ed04 	.word	0xe000ed04

0800a99c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08e      	sub	sp, #56	; 0x38
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10c      	bne.n	800a9ce <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	b672      	cpsid	i
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	b662      	cpsie	i
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d103      	bne.n	800a9dc <xQueueGenericSendFromISR+0x40>
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d101      	bne.n	800a9e0 <xQueueGenericSendFromISR+0x44>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e000      	b.n	800a9e2 <xQueueGenericSendFromISR+0x46>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10c      	bne.n	800aa00 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ea:	b672      	cpsid	i
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	b662      	cpsie	i
 800a9fa:	623b      	str	r3, [r7, #32]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d103      	bne.n	800aa0e <xQueueGenericSendFromISR+0x72>
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d101      	bne.n	800aa12 <xQueueGenericSendFromISR+0x76>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <xQueueGenericSendFromISR+0x78>
 800aa12:	2300      	movs	r3, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10c      	bne.n	800aa32 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	b672      	cpsid	i
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	b662      	cpsie	i
 800aa2c:	61fb      	str	r3, [r7, #28]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa32:	f000 fdfd 	bl	800b630 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa36:	f3ef 8211 	mrs	r2, BASEPRI
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	b672      	cpsid	i
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	b662      	cpsie	i
 800aa4e:	61ba      	str	r2, [r7, #24]
 800aa50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d302      	bcc.n	800aa68 <xQueueGenericSendFromISR+0xcc>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d12c      	bne.n	800aac2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	68b9      	ldr	r1, [r7, #8]
 800aa76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa78:	f000 f830 	bl	800aadc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa84:	d112      	bne.n	800aaac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d016      	beq.n	800aabc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	3324      	adds	r3, #36	; 0x24
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 fae0 	bl	800b058 <xTaskRemoveFromEventList>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00e      	beq.n	800aabc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	e007      	b.n	800aabc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aaac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aab0:	3301      	adds	r3, #1
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	b25a      	sxtb	r2, r3
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aabc:	2301      	movs	r3, #1
 800aabe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aac0:	e001      	b.n	800aac6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aac2:	2300      	movs	r3, #0
 800aac4:	637b      	str	r3, [r7, #52]	; 0x34
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aad0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3738      	adds	r7, #56	; 0x38
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10d      	bne.n	800ab16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d14d      	bne.n	800ab9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fbd0 	bl	800b2ac <xTaskPriorityDisinherit>
 800ab0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	609a      	str	r2, [r3, #8]
 800ab14:	e043      	b.n	800ab9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d119      	bne.n	800ab50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6858      	ldr	r0, [r3, #4]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab24:	461a      	mov	r2, r3
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	f000 ff70 	bl	800ba0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab34:	441a      	add	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d32b      	bcc.n	800ab9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	605a      	str	r2, [r3, #4]
 800ab4e:	e026      	b.n	800ab9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	68d8      	ldr	r0, [r3, #12]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab58:	461a      	mov	r2, r3
 800ab5a:	68b9      	ldr	r1, [r7, #8]
 800ab5c:	f000 ff56 	bl	800ba0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab68:	425b      	negs	r3, r3
 800ab6a:	441a      	add	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	68da      	ldr	r2, [r3, #12]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d207      	bcs.n	800ab8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	689a      	ldr	r2, [r3, #8]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab84:	425b      	negs	r3, r3
 800ab86:	441a      	add	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d105      	bne.n	800ab9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aba6:	697b      	ldr	r3, [r7, #20]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3718      	adds	r7, #24
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abb8:	f000 fc7e 	bl	800b4b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abc4:	e011      	b.n	800abea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d012      	beq.n	800abf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3324      	adds	r3, #36	; 0x24
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 fa40 	bl	800b058 <xTaskRemoveFromEventList>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abde:	f000 fb1b 	bl	800b218 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dce9      	bgt.n	800abc6 <prvUnlockQueue+0x16>
 800abf2:	e000      	b.n	800abf6 <prvUnlockQueue+0x46>
					break;
 800abf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	22ff      	movs	r2, #255	; 0xff
 800abfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800abfe:	f000 fc8f 	bl	800b520 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac02:	f000 fc59 	bl	800b4b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac0e:	e011      	b.n	800ac34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d012      	beq.n	800ac3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3310      	adds	r3, #16
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fa1b 	bl	800b058 <xTaskRemoveFromEventList>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac28:	f000 faf6 	bl	800b218 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dce9      	bgt.n	800ac10 <prvUnlockQueue+0x60>
 800ac3c:	e000      	b.n	800ac40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	22ff      	movs	r2, #255	; 0xff
 800ac44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ac48:	f000 fc6a 	bl	800b520 <vPortExitCritical>
}
 800ac4c:	bf00      	nop
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac5c:	f000 fc2c 	bl	800b4b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d102      	bne.n	800ac72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	e001      	b.n	800ac76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac76:	f000 fc53 	bl	800b520 <vPortExitCritical>

	return xReturn;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac84:	b480      	push	{r7}
 800ac86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ac88:	4b04      	ldr	r3, [pc, #16]	; (800ac9c <vTaskSuspendAll+0x18>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	4a03      	ldr	r2, [pc, #12]	; (800ac9c <vTaskSuspendAll+0x18>)
 800ac90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ac92:	bf00      	nop
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	20001758 	.word	0x20001758

0800aca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acaa:	2300      	movs	r3, #0
 800acac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800acae:	4b42      	ldr	r3, [pc, #264]	; (800adb8 <xTaskResumeAll+0x118>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10c      	bne.n	800acd0 <xTaskResumeAll+0x30>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acba:	b672      	cpsid	i
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	b662      	cpsie	i
 800acca:	603b      	str	r3, [r7, #0]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800acd0:	f000 fbf2 	bl	800b4b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800acd4:	4b38      	ldr	r3, [pc, #224]	; (800adb8 <xTaskResumeAll+0x118>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3b01      	subs	r3, #1
 800acda:	4a37      	ldr	r2, [pc, #220]	; (800adb8 <xTaskResumeAll+0x118>)
 800acdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acde:	4b36      	ldr	r3, [pc, #216]	; (800adb8 <xTaskResumeAll+0x118>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d161      	bne.n	800adaa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ace6:	4b35      	ldr	r3, [pc, #212]	; (800adbc <xTaskResumeAll+0x11c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d05d      	beq.n	800adaa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acee:	e02e      	b.n	800ad4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf0:	4b33      	ldr	r3, [pc, #204]	; (800adc0 <xTaskResumeAll+0x120>)
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	3318      	adds	r3, #24
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff fb83 	bl	800a408 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fb7e 	bl	800a408 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad10:	2201      	movs	r2, #1
 800ad12:	409a      	lsls	r2, r3
 800ad14:	4b2b      	ldr	r3, [pc, #172]	; (800adc4 <xTaskResumeAll+0x124>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	4a2a      	ldr	r2, [pc, #168]	; (800adc4 <xTaskResumeAll+0x124>)
 800ad1c:	6013      	str	r3, [r2, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad22:	4613      	mov	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4a27      	ldr	r2, [pc, #156]	; (800adc8 <xTaskResumeAll+0x128>)
 800ad2c:	441a      	add	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3304      	adds	r3, #4
 800ad32:	4619      	mov	r1, r3
 800ad34:	4610      	mov	r0, r2
 800ad36:	f7ff fb0a 	bl	800a34e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3e:	4b23      	ldr	r3, [pc, #140]	; (800adcc <xTaskResumeAll+0x12c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d302      	bcc.n	800ad4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ad48:	4b21      	ldr	r3, [pc, #132]	; (800add0 <xTaskResumeAll+0x130>)
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad4e:	4b1c      	ldr	r3, [pc, #112]	; (800adc0 <xTaskResumeAll+0x120>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1cc      	bne.n	800acf0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad5c:	f000 fa68 	bl	800b230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ad60:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <xTaskResumeAll+0x134>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d010      	beq.n	800ad8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad6c:	f000 f836 	bl	800addc <xTaskIncrementTick>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ad76:	4b16      	ldr	r3, [pc, #88]	; (800add0 <xTaskResumeAll+0x130>)
 800ad78:	2201      	movs	r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1f1      	bne.n	800ad6c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ad88:	4b12      	ldr	r3, [pc, #72]	; (800add4 <xTaskResumeAll+0x134>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad8e:	4b10      	ldr	r3, [pc, #64]	; (800add0 <xTaskResumeAll+0x130>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad96:	2301      	movs	r3, #1
 800ad98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad9a:	4b0f      	ldr	r3, [pc, #60]	; (800add8 <xTaskResumeAll+0x138>)
 800ad9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada0:	601a      	str	r2, [r3, #0]
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800adaa:	f000 fbb9 	bl	800b520 <vPortExitCritical>

	return xAlreadyYielded;
 800adae:	68bb      	ldr	r3, [r7, #8]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20001758 	.word	0x20001758
 800adbc:	20001738 	.word	0x20001738
 800adc0:	20001710 	.word	0x20001710
 800adc4:	20001740 	.word	0x20001740
 800adc8:	2000167c 	.word	0x2000167c
 800adcc:	20001678 	.word	0x20001678
 800add0:	2000174c 	.word	0x2000174c
 800add4:	20001748 	.word	0x20001748
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade6:	4b4f      	ldr	r3, [pc, #316]	; (800af24 <xTaskIncrementTick+0x148>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 808a 	bne.w	800af04 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800adf0:	4b4d      	ldr	r3, [pc, #308]	; (800af28 <xTaskIncrementTick+0x14c>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3301      	adds	r3, #1
 800adf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800adf8:	4a4b      	ldr	r2, [pc, #300]	; (800af28 <xTaskIncrementTick+0x14c>)
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d122      	bne.n	800ae4a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae04:	4b49      	ldr	r3, [pc, #292]	; (800af2c <xTaskIncrementTick+0x150>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00c      	beq.n	800ae28 <xTaskIncrementTick+0x4c>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	b672      	cpsid	i
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	b662      	cpsie	i
 800ae22:	603b      	str	r3, [r7, #0]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <xTaskIncrementTick+0x4a>
 800ae28:	4b40      	ldr	r3, [pc, #256]	; (800af2c <xTaskIncrementTick+0x150>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	60fb      	str	r3, [r7, #12]
 800ae2e:	4b40      	ldr	r3, [pc, #256]	; (800af30 <xTaskIncrementTick+0x154>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a3e      	ldr	r2, [pc, #248]	; (800af2c <xTaskIncrementTick+0x150>)
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	4a3e      	ldr	r2, [pc, #248]	; (800af30 <xTaskIncrementTick+0x154>)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	4b3d      	ldr	r3, [pc, #244]	; (800af34 <xTaskIncrementTick+0x158>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3301      	adds	r3, #1
 800ae42:	4a3c      	ldr	r2, [pc, #240]	; (800af34 <xTaskIncrementTick+0x158>)
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	f000 f9f3 	bl	800b230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae4a:	4b3b      	ldr	r3, [pc, #236]	; (800af38 <xTaskIncrementTick+0x15c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d348      	bcc.n	800aee6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae54:	4b35      	ldr	r3, [pc, #212]	; (800af2c <xTaskIncrementTick+0x150>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d104      	bne.n	800ae68 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae5e:	4b36      	ldr	r3, [pc, #216]	; (800af38 <xTaskIncrementTick+0x15c>)
 800ae60:	f04f 32ff 	mov.w	r2, #4294967295
 800ae64:	601a      	str	r2, [r3, #0]
					break;
 800ae66:	e03e      	b.n	800aee6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae68:	4b30      	ldr	r3, [pc, #192]	; (800af2c <xTaskIncrementTick+0x150>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d203      	bcs.n	800ae88 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae80:	4a2d      	ldr	r2, [pc, #180]	; (800af38 <xTaskIncrementTick+0x15c>)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae86:	e02e      	b.n	800aee6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff fabb 	bl	800a408 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d004      	beq.n	800aea4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	3318      	adds	r3, #24
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff fab2 	bl	800a408 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	2201      	movs	r2, #1
 800aeaa:	409a      	lsls	r2, r3
 800aeac:	4b23      	ldr	r3, [pc, #140]	; (800af3c <xTaskIncrementTick+0x160>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	4a22      	ldr	r2, [pc, #136]	; (800af3c <xTaskIncrementTick+0x160>)
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	4613      	mov	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4a1f      	ldr	r2, [pc, #124]	; (800af40 <xTaskIncrementTick+0x164>)
 800aec4:	441a      	add	r2, r3
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4619      	mov	r1, r3
 800aecc:	4610      	mov	r0, r2
 800aece:	f7ff fa3e 	bl	800a34e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed6:	4b1b      	ldr	r3, [pc, #108]	; (800af44 <xTaskIncrementTick+0x168>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aedc:	429a      	cmp	r2, r3
 800aede:	d3b9      	bcc.n	800ae54 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aee4:	e7b6      	b.n	800ae54 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aee6:	4b17      	ldr	r3, [pc, #92]	; (800af44 <xTaskIncrementTick+0x168>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeec:	4914      	ldr	r1, [pc, #80]	; (800af40 <xTaskIncrementTick+0x164>)
 800aeee:	4613      	mov	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	440b      	add	r3, r1
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d907      	bls.n	800af0e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800aefe:	2301      	movs	r3, #1
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	e004      	b.n	800af0e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800af04:	4b10      	ldr	r3, [pc, #64]	; (800af48 <xTaskIncrementTick+0x16c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3301      	adds	r3, #1
 800af0a:	4a0f      	ldr	r2, [pc, #60]	; (800af48 <xTaskIncrementTick+0x16c>)
 800af0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800af0e:	4b0f      	ldr	r3, [pc, #60]	; (800af4c <xTaskIncrementTick+0x170>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800af16:	2301      	movs	r3, #1
 800af18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800af1a:	697b      	ldr	r3, [r7, #20]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20001758 	.word	0x20001758
 800af28:	2000173c 	.word	0x2000173c
 800af2c:	20001708 	.word	0x20001708
 800af30:	2000170c 	.word	0x2000170c
 800af34:	20001750 	.word	0x20001750
 800af38:	20001754 	.word	0x20001754
 800af3c:	20001740 	.word	0x20001740
 800af40:	2000167c 	.word	0x2000167c
 800af44:	20001678 	.word	0x20001678
 800af48:	20001748 	.word	0x20001748
 800af4c:	2000174c 	.word	0x2000174c

0800af50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af50:	b480      	push	{r7}
 800af52:	b087      	sub	sp, #28
 800af54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af56:	4b28      	ldr	r3, [pc, #160]	; (800aff8 <vTaskSwitchContext+0xa8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d003      	beq.n	800af66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af5e:	4b27      	ldr	r3, [pc, #156]	; (800affc <vTaskSwitchContext+0xac>)
 800af60:	2201      	movs	r2, #1
 800af62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af64:	e041      	b.n	800afea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800af66:	4b25      	ldr	r3, [pc, #148]	; (800affc <vTaskSwitchContext+0xac>)
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af6c:	4b24      	ldr	r3, [pc, #144]	; (800b000 <vTaskSwitchContext+0xb0>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	fab3 f383 	clz	r3, r3
 800af78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800af7a:	7afb      	ldrb	r3, [r7, #11]
 800af7c:	f1c3 031f 	rsb	r3, r3, #31
 800af80:	617b      	str	r3, [r7, #20]
 800af82:	4920      	ldr	r1, [pc, #128]	; (800b004 <vTaskSwitchContext+0xb4>)
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	4613      	mov	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	440b      	add	r3, r1
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10c      	bne.n	800afb0 <vTaskSwitchContext+0x60>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	b672      	cpsid	i
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	b662      	cpsie	i
 800afaa:	607b      	str	r3, [r7, #4]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <vTaskSwitchContext+0x5e>
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	4613      	mov	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4a12      	ldr	r2, [pc, #72]	; (800b004 <vTaskSwitchContext+0xb4>)
 800afbc:	4413      	add	r3, r2
 800afbe:	613b      	str	r3, [r7, #16]
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	605a      	str	r2, [r3, #4]
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3308      	adds	r3, #8
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d104      	bne.n	800afe0 <vTaskSwitchContext+0x90>
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	605a      	str	r2, [r3, #4]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	4a08      	ldr	r2, [pc, #32]	; (800b008 <vTaskSwitchContext+0xb8>)
 800afe8:	6013      	str	r3, [r2, #0]
}
 800afea:	bf00      	nop
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	20001758 	.word	0x20001758
 800affc:	2000174c 	.word	0x2000174c
 800b000:	20001740 	.word	0x20001740
 800b004:	2000167c 	.word	0x2000167c
 800b008:	20001678 	.word	0x20001678

0800b00c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10c      	bne.n	800b036 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	b672      	cpsid	i
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	b662      	cpsie	i
 800b030:	60fb      	str	r3, [r7, #12]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b036:	4b07      	ldr	r3, [pc, #28]	; (800b054 <vTaskPlaceOnEventList+0x48>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	3318      	adds	r3, #24
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff f9a9 	bl	800a396 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b044:	2101      	movs	r1, #1
 800b046:	6838      	ldr	r0, [r7, #0]
 800b048:	f000 f9ba 	bl	800b3c0 <prvAddCurrentTaskToDelayedList>
}
 800b04c:	bf00      	nop
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20001678 	.word	0x20001678

0800b058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10c      	bne.n	800b088 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	b672      	cpsid	i
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	b662      	cpsie	i
 800b082:	60fb      	str	r3, [r7, #12]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	3318      	adds	r3, #24
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7ff f9bb 	bl	800a408 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b092:	4b1d      	ldr	r3, [pc, #116]	; (800b108 <xTaskRemoveFromEventList+0xb0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d11c      	bne.n	800b0d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	3304      	adds	r3, #4
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff f9b2 	bl	800a408 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	409a      	lsls	r2, r3
 800b0ac:	4b17      	ldr	r3, [pc, #92]	; (800b10c <xTaskRemoveFromEventList+0xb4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	4a16      	ldr	r2, [pc, #88]	; (800b10c <xTaskRemoveFromEventList+0xb4>)
 800b0b4:	6013      	str	r3, [r2, #0]
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4a13      	ldr	r2, [pc, #76]	; (800b110 <xTaskRemoveFromEventList+0xb8>)
 800b0c4:	441a      	add	r2, r3
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	f7ff f93e 	bl	800a34e <vListInsertEnd>
 800b0d2:	e005      	b.n	800b0e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	3318      	adds	r3, #24
 800b0d8:	4619      	mov	r1, r3
 800b0da:	480e      	ldr	r0, [pc, #56]	; (800b114 <xTaskRemoveFromEventList+0xbc>)
 800b0dc:	f7ff f937 	bl	800a34e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	; (800b118 <xTaskRemoveFromEventList+0xc0>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d905      	bls.n	800b0fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	; (800b11c <xTaskRemoveFromEventList+0xc4>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	e001      	b.n	800b0fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b0fe:	697b      	ldr	r3, [r7, #20]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3718      	adds	r7, #24
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20001758 	.word	0x20001758
 800b10c:	20001740 	.word	0x20001740
 800b110:	2000167c 	.word	0x2000167c
 800b114:	20001710 	.word	0x20001710
 800b118:	20001678 	.word	0x20001678
 800b11c:	2000174c 	.word	0x2000174c

0800b120 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b128:	4b06      	ldr	r3, [pc, #24]	; (800b144 <vTaskInternalSetTimeOutState+0x24>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b130:	4b05      	ldr	r3, [pc, #20]	; (800b148 <vTaskInternalSetTimeOutState+0x28>)
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	605a      	str	r2, [r3, #4]
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	20001750 	.word	0x20001750
 800b148:	2000173c 	.word	0x2000173c

0800b14c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10c      	bne.n	800b176 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b160:	b672      	cpsid	i
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	b662      	cpsie	i
 800b170:	613b      	str	r3, [r7, #16]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10c      	bne.n	800b196 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b180:	b672      	cpsid	i
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	b662      	cpsie	i
 800b190:	60fb      	str	r3, [r7, #12]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b196:	f000 f98f 	bl	800b4b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b19a:	4b1d      	ldr	r3, [pc, #116]	; (800b210 <xTaskCheckForTimeOut+0xc4>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	69ba      	ldr	r2, [r7, #24]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b2:	d102      	bne.n	800b1ba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	61fb      	str	r3, [r7, #28]
 800b1b8:	e023      	b.n	800b202 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	4b15      	ldr	r3, [pc, #84]	; (800b214 <xTaskCheckForTimeOut+0xc8>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d007      	beq.n	800b1d6 <xTaskCheckForTimeOut+0x8a>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d302      	bcc.n	800b1d6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	61fb      	str	r3, [r7, #28]
 800b1d4:	e015      	b.n	800b202 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d20b      	bcs.n	800b1f8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	1ad2      	subs	r2, r2, r3
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff ff97 	bl	800b120 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	61fb      	str	r3, [r7, #28]
 800b1f6:	e004      	b.n	800b202 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b1fe:	2301      	movs	r3, #1
 800b200:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b202:	f000 f98d 	bl	800b520 <vPortExitCritical>

	return xReturn;
 800b206:	69fb      	ldr	r3, [r7, #28]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3720      	adds	r7, #32
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	2000173c 	.word	0x2000173c
 800b214:	20001750 	.word	0x20001750

0800b218 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b21c:	4b03      	ldr	r3, [pc, #12]	; (800b22c <vTaskMissedYield+0x14>)
 800b21e:	2201      	movs	r2, #1
 800b220:	601a      	str	r2, [r3, #0]
}
 800b222:	bf00      	nop
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	2000174c 	.word	0x2000174c

0800b230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b236:	4b0c      	ldr	r3, [pc, #48]	; (800b268 <prvResetNextTaskUnblockTime+0x38>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d104      	bne.n	800b24a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b240:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <prvResetNextTaskUnblockTime+0x3c>)
 800b242:	f04f 32ff 	mov.w	r2, #4294967295
 800b246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b248:	e008      	b.n	800b25c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b24a:	4b07      	ldr	r3, [pc, #28]	; (800b268 <prvResetNextTaskUnblockTime+0x38>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4a04      	ldr	r2, [pc, #16]	; (800b26c <prvResetNextTaskUnblockTime+0x3c>)
 800b25a:	6013      	str	r3, [r2, #0]
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr
 800b268:	20001708 	.word	0x20001708
 800b26c:	20001754 	.word	0x20001754

0800b270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b276:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <xTaskGetSchedulerState+0x34>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d102      	bne.n	800b284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b27e:	2301      	movs	r3, #1
 800b280:	607b      	str	r3, [r7, #4]
 800b282:	e008      	b.n	800b296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b284:	4b08      	ldr	r3, [pc, #32]	; (800b2a8 <xTaskGetSchedulerState+0x38>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b28c:	2302      	movs	r3, #2
 800b28e:	607b      	str	r3, [r7, #4]
 800b290:	e001      	b.n	800b296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b292:	2300      	movs	r3, #0
 800b294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b296:	687b      	ldr	r3, [r7, #4]
	}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	20001744 	.word	0x20001744
 800b2a8:	20001758 	.word	0x20001758

0800b2ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d072      	beq.n	800b3a8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2c2:	4b3c      	ldr	r3, [pc, #240]	; (800b3b4 <xTaskPriorityDisinherit+0x108>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d00c      	beq.n	800b2e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	b672      	cpsid	i
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	b662      	cpsie	i
 800b2e0:	60fb      	str	r3, [r7, #12]
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10c      	bne.n	800b308 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	b672      	cpsid	i
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	b662      	cpsie	i
 800b302:	60bb      	str	r3, [r7, #8]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b30c:	1e5a      	subs	r2, r3, #1
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d044      	beq.n	800b3a8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b322:	2b00      	cmp	r3, #0
 800b324:	d140      	bne.n	800b3a8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	3304      	adds	r3, #4
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff f86c 	bl	800a408 <uxListRemove>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d115      	bne.n	800b362 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33a:	491f      	ldr	r1, [pc, #124]	; (800b3b8 <xTaskPriorityDisinherit+0x10c>)
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	440b      	add	r3, r1
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10a      	bne.n	800b362 <xTaskPriorityDisinherit+0xb6>
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b350:	2201      	movs	r2, #1
 800b352:	fa02 f303 	lsl.w	r3, r2, r3
 800b356:	43da      	mvns	r2, r3
 800b358:	4b18      	ldr	r3, [pc, #96]	; (800b3bc <xTaskPriorityDisinherit+0x110>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4013      	ands	r3, r2
 800b35e:	4a17      	ldr	r2, [pc, #92]	; (800b3bc <xTaskPriorityDisinherit+0x110>)
 800b360:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36e:	f1c3 0207 	rsb	r2, r3, #7
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	2201      	movs	r2, #1
 800b37c:	409a      	lsls	r2, r3
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <xTaskPriorityDisinherit+0x110>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4313      	orrs	r3, r2
 800b384:	4a0d      	ldr	r2, [pc, #52]	; (800b3bc <xTaskPriorityDisinherit+0x110>)
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4a08      	ldr	r2, [pc, #32]	; (800b3b8 <xTaskPriorityDisinherit+0x10c>)
 800b396:	441a      	add	r2, r3
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	3304      	adds	r3, #4
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	f7fe ffd5 	bl	800a34e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3a8:	697b      	ldr	r3, [r7, #20]
	}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20001678 	.word	0x20001678
 800b3b8:	2000167c 	.word	0x2000167c
 800b3bc:	20001740 	.word	0x20001740

0800b3c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3ca:	4b29      	ldr	r3, [pc, #164]	; (800b470 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3d0:	4b28      	ldr	r3, [pc, #160]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3304      	adds	r3, #4
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff f816 	bl	800a408 <uxListRemove>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10b      	bne.n	800b3fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b3e2:	4b24      	ldr	r3, [pc, #144]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ee:	43da      	mvns	r2, r3
 800b3f0:	4b21      	ldr	r3, [pc, #132]	; (800b478 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	4a20      	ldr	r2, [pc, #128]	; (800b478 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b400:	d10a      	bne.n	800b418 <prvAddCurrentTaskToDelayedList+0x58>
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d007      	beq.n	800b418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b408:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3304      	adds	r3, #4
 800b40e:	4619      	mov	r1, r3
 800b410:	481a      	ldr	r0, [pc, #104]	; (800b47c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b412:	f7fe ff9c 	bl	800a34e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b416:	e026      	b.n	800b466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4413      	add	r3, r2
 800b41e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b420:	4b14      	ldr	r3, [pc, #80]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d209      	bcs.n	800b444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b430:	4b13      	ldr	r3, [pc, #76]	; (800b480 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	3304      	adds	r3, #4
 800b43a:	4619      	mov	r1, r3
 800b43c:	4610      	mov	r0, r2
 800b43e:	f7fe ffaa 	bl	800a396 <vListInsert>
}
 800b442:	e010      	b.n	800b466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b444:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3304      	adds	r3, #4
 800b44e:	4619      	mov	r1, r3
 800b450:	4610      	mov	r0, r2
 800b452:	f7fe ffa0 	bl	800a396 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b456:	4b0c      	ldr	r3, [pc, #48]	; (800b488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d202      	bcs.n	800b466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b460:	4a09      	ldr	r2, [pc, #36]	; (800b488 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6013      	str	r3, [r2, #0]
}
 800b466:	bf00      	nop
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	2000173c 	.word	0x2000173c
 800b474:	20001678 	.word	0x20001678
 800b478:	20001740 	.word	0x20001740
 800b47c:	20001724 	.word	0x20001724
 800b480:	2000170c 	.word	0x2000170c
 800b484:	20001708 	.word	0x20001708
 800b488:	20001754 	.word	0x20001754
 800b48c:	00000000 	.word	0x00000000

0800b490 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b490:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <pxCurrentTCBConst2>)
 800b492:	6819      	ldr	r1, [r3, #0]
 800b494:	6808      	ldr	r0, [r1, #0]
 800b496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49a:	f380 8809 	msr	PSP, r0
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f04f 0000 	mov.w	r0, #0
 800b4a6:	f380 8811 	msr	BASEPRI, r0
 800b4aa:	4770      	bx	lr
 800b4ac:	f3af 8000 	nop.w

0800b4b0 <pxCurrentTCBConst2>:
 800b4b0:	20001678 	.word	0x20001678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	b672      	cpsid	i
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	b662      	cpsie	i
 800b4d2:	607b      	str	r3, [r7, #4]
}
 800b4d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b4d6:	4b10      	ldr	r3, [pc, #64]	; (800b518 <vPortEnterCritical+0x60>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	4a0e      	ldr	r2, [pc, #56]	; (800b518 <vPortEnterCritical+0x60>)
 800b4de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4e0:	4b0d      	ldr	r3, [pc, #52]	; (800b518 <vPortEnterCritical+0x60>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d111      	bne.n	800b50c <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4e8:	4b0c      	ldr	r3, [pc, #48]	; (800b51c <vPortEnterCritical+0x64>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00c      	beq.n	800b50c <vPortEnterCritical+0x54>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	b672      	cpsid	i
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	b662      	cpsie	i
 800b506:	603b      	str	r3, [r7, #0]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <vPortEnterCritical+0x52>
	}
}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	20001488 	.word	0x20001488
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b526:	4b13      	ldr	r3, [pc, #76]	; (800b574 <vPortExitCritical+0x54>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10c      	bne.n	800b548 <vPortExitCritical+0x28>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	b672      	cpsid	i
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	b662      	cpsie	i
 800b542:	607b      	str	r3, [r7, #4]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b548:	4b0a      	ldr	r3, [pc, #40]	; (800b574 <vPortExitCritical+0x54>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	4a09      	ldr	r2, [pc, #36]	; (800b574 <vPortExitCritical+0x54>)
 800b550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b552:	4b08      	ldr	r3, [pc, #32]	; (800b574 <vPortExitCritical+0x54>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d105      	bne.n	800b566 <vPortExitCritical+0x46>
 800b55a:	2300      	movs	r3, #0
 800b55c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	f383 8811 	msr	BASEPRI, r3
}
 800b564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b566:	bf00      	nop
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	20001488 	.word	0x20001488
	...

0800b580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b580:	f3ef 8009 	mrs	r0, PSP
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	4b15      	ldr	r3, [pc, #84]	; (800b5e0 <pxCurrentTCBConst>)
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	f01e 0f10 	tst.w	lr, #16
 800b590:	bf08      	it	eq
 800b592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59a:	6010      	str	r0, [r2, #0]
 800b59c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5a4:	b672      	cpsid	i
 800b5a6:	f380 8811 	msr	BASEPRI, r0
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	b662      	cpsie	i
 800b5b4:	f7ff fccc 	bl	800af50 <vTaskSwitchContext>
 800b5b8:	f04f 0000 	mov.w	r0, #0
 800b5bc:	f380 8811 	msr	BASEPRI, r0
 800b5c0:	bc09      	pop	{r0, r3}
 800b5c2:	6819      	ldr	r1, [r3, #0]
 800b5c4:	6808      	ldr	r0, [r1, #0]
 800b5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ca:	f01e 0f10 	tst.w	lr, #16
 800b5ce:	bf08      	it	eq
 800b5d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b5d4:	f380 8809 	msr	PSP, r0
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop

0800b5e0 <pxCurrentTCBConst>:
 800b5e0:	20001678 	.word	0x20001678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5e4:	bf00      	nop
 800b5e6:	bf00      	nop

0800b5e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	b672      	cpsid	i
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	b662      	cpsie	i
 800b602:	607b      	str	r3, [r7, #4]
}
 800b604:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b606:	f7ff fbe9 	bl	800addc <xTaskIncrementTick>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d003      	beq.n	800b618 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <SysTick_Handler+0x44>)
 800b612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	2300      	movs	r3, #0
 800b61a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	f383 8811 	msr	BASEPRI, r3
}
 800b622:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	e000ed04 	.word	0xe000ed04

0800b630 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b636:	f3ef 8305 	mrs	r3, IPSR
 800b63a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2b0f      	cmp	r3, #15
 800b640:	d916      	bls.n	800b670 <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b642:	4a19      	ldr	r2, [pc, #100]	; (800b6a8 <vPortValidateInterruptPriority+0x78>)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4413      	add	r3, r2
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b64c:	4b17      	ldr	r3, [pc, #92]	; (800b6ac <vPortValidateInterruptPriority+0x7c>)
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	7afa      	ldrb	r2, [r7, #11]
 800b652:	429a      	cmp	r2, r3
 800b654:	d20c      	bcs.n	800b670 <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65a:	b672      	cpsid	i
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	b662      	cpsie	i
 800b66a:	607b      	str	r3, [r7, #4]
}
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b670:	4b0f      	ldr	r3, [pc, #60]	; (800b6b0 <vPortValidateInterruptPriority+0x80>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b678:	4b0e      	ldr	r3, [pc, #56]	; (800b6b4 <vPortValidateInterruptPriority+0x84>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d90c      	bls.n	800b69a <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b684:	b672      	cpsid	i
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	b662      	cpsie	i
 800b694:	603b      	str	r3, [r7, #0]
}
 800b696:	bf00      	nop
 800b698:	e7fe      	b.n	800b698 <vPortValidateInterruptPriority+0x68>
	}
 800b69a:	bf00      	nop
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	e000e3f0 	.word	0xe000e3f0
 800b6ac:	2000175c 	.word	0x2000175c
 800b6b0:	e000ed0c 	.word	0xe000ed0c
 800b6b4:	20001760 	.word	0x20001760

0800b6b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08a      	sub	sp, #40	; 0x28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6c4:	f7ff fade 	bl	800ac84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6c8:	4b5b      	ldr	r3, [pc, #364]	; (800b838 <pvPortMalloc+0x180>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6d0:	f000 f8bc 	bl	800b84c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6d4:	4b59      	ldr	r3, [pc, #356]	; (800b83c <pvPortMalloc+0x184>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4013      	ands	r3, r2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f040 8092 	bne.w	800b806 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d01f      	beq.n	800b728 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b6e8:	2208      	movs	r2, #8
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f003 0307 	and.w	r3, r3, #7
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d016      	beq.n	800b728 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f023 0307 	bic.w	r3, r3, #7
 800b700:	3308      	adds	r3, #8
 800b702:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f003 0307 	and.w	r3, r3, #7
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00c      	beq.n	800b728 <pvPortMalloc+0x70>
	__asm volatile
 800b70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b712:	b672      	cpsid	i
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	b662      	cpsie	i
 800b722:	617b      	str	r3, [r7, #20]
}
 800b724:	bf00      	nop
 800b726:	e7fe      	b.n	800b726 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d06b      	beq.n	800b806 <pvPortMalloc+0x14e>
 800b72e:	4b44      	ldr	r3, [pc, #272]	; (800b840 <pvPortMalloc+0x188>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	429a      	cmp	r2, r3
 800b736:	d866      	bhi.n	800b806 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b738:	4b42      	ldr	r3, [pc, #264]	; (800b844 <pvPortMalloc+0x18c>)
 800b73a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b73c:	4b41      	ldr	r3, [pc, #260]	; (800b844 <pvPortMalloc+0x18c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b742:	e004      	b.n	800b74e <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	429a      	cmp	r2, r3
 800b756:	d903      	bls.n	800b760 <pvPortMalloc+0xa8>
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1f1      	bne.n	800b744 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b760:	4b35      	ldr	r3, [pc, #212]	; (800b838 <pvPortMalloc+0x180>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b766:	429a      	cmp	r2, r3
 800b768:	d04d      	beq.n	800b806 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2208      	movs	r2, #8
 800b770:	4413      	add	r3, r2
 800b772:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	2308      	movs	r3, #8
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	429a      	cmp	r2, r3
 800b78a:	d921      	bls.n	800b7d0 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b78c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4413      	add	r3, r2
 800b792:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	f003 0307 	and.w	r3, r3, #7
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00c      	beq.n	800b7b8 <pvPortMalloc+0x100>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	b672      	cpsid	i
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	b662      	cpsie	i
 800b7b2:	613b      	str	r3, [r7, #16]
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	1ad2      	subs	r2, r2, r3
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7ca:	69b8      	ldr	r0, [r7, #24]
 800b7cc:	f000 f8a0 	bl	800b910 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7d0:	4b1b      	ldr	r3, [pc, #108]	; (800b840 <pvPortMalloc+0x188>)
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	4a19      	ldr	r2, [pc, #100]	; (800b840 <pvPortMalloc+0x188>)
 800b7dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7de:	4b18      	ldr	r3, [pc, #96]	; (800b840 <pvPortMalloc+0x188>)
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	4b19      	ldr	r3, [pc, #100]	; (800b848 <pvPortMalloc+0x190>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d203      	bcs.n	800b7f2 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7ea:	4b15      	ldr	r3, [pc, #84]	; (800b840 <pvPortMalloc+0x188>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a16      	ldr	r2, [pc, #88]	; (800b848 <pvPortMalloc+0x190>)
 800b7f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	4b11      	ldr	r3, [pc, #68]	; (800b83c <pvPortMalloc+0x184>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b806:	f7ff fa4b 	bl	800aca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	f003 0307 	and.w	r3, r3, #7
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00c      	beq.n	800b82e <pvPortMalloc+0x176>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	b672      	cpsid	i
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	b662      	cpsie	i
 800b828:	60fb      	str	r3, [r7, #12]
}
 800b82a:	bf00      	nop
 800b82c:	e7fe      	b.n	800b82c <pvPortMalloc+0x174>
	return pvReturn;
 800b82e:	69fb      	ldr	r3, [r7, #28]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3728      	adds	r7, #40	; 0x28
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	2000536c 	.word	0x2000536c
 800b83c:	20005378 	.word	0x20005378
 800b840:	20005370 	.word	0x20005370
 800b844:	20005364 	.word	0x20005364
 800b848:	20005374 	.word	0x20005374

0800b84c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b852:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b856:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b858:	4b27      	ldr	r3, [pc, #156]	; (800b8f8 <prvHeapInit+0xac>)
 800b85a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f003 0307 	and.w	r3, r3, #7
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00c      	beq.n	800b880 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3307      	adds	r3, #7
 800b86a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 0307 	bic.w	r3, r3, #7
 800b872:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	4a1f      	ldr	r2, [pc, #124]	; (800b8f8 <prvHeapInit+0xac>)
 800b87c:	4413      	add	r3, r2
 800b87e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b884:	4a1d      	ldr	r2, [pc, #116]	; (800b8fc <prvHeapInit+0xb0>)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b88a:	4b1c      	ldr	r3, [pc, #112]	; (800b8fc <prvHeapInit+0xb0>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	4413      	add	r3, r2
 800b896:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b898:	2208      	movs	r2, #8
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	1a9b      	subs	r3, r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f023 0307 	bic.w	r3, r3, #7
 800b8a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4a15      	ldr	r2, [pc, #84]	; (800b900 <prvHeapInit+0xb4>)
 800b8ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8ae:	4b14      	ldr	r3, [pc, #80]	; (800b900 <prvHeapInit+0xb4>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8b6:	4b12      	ldr	r3, [pc, #72]	; (800b900 <prvHeapInit+0xb4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	1ad2      	subs	r2, r2, r3
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8cc:	4b0c      	ldr	r3, [pc, #48]	; (800b900 <prvHeapInit+0xb4>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	4a0a      	ldr	r2, [pc, #40]	; (800b904 <prvHeapInit+0xb8>)
 800b8da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4a09      	ldr	r2, [pc, #36]	; (800b908 <prvHeapInit+0xbc>)
 800b8e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8e4:	4b09      	ldr	r3, [pc, #36]	; (800b90c <prvHeapInit+0xc0>)
 800b8e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8ea:	601a      	str	r2, [r3, #0]
}
 800b8ec:	bf00      	nop
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	20001764 	.word	0x20001764
 800b8fc:	20005364 	.word	0x20005364
 800b900:	2000536c 	.word	0x2000536c
 800b904:	20005374 	.word	0x20005374
 800b908:	20005370 	.word	0x20005370
 800b90c:	20005378 	.word	0x20005378

0800b910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b918:	4b28      	ldr	r3, [pc, #160]	; (800b9bc <prvInsertBlockIntoFreeList+0xac>)
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	e002      	b.n	800b924 <prvInsertBlockIntoFreeList+0x14>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60fb      	str	r3, [r7, #12]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d8f7      	bhi.n	800b91e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	4413      	add	r3, r2
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d108      	bne.n	800b952 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	441a      	add	r2, r3
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	68ba      	ldr	r2, [r7, #8]
 800b95c:	441a      	add	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	429a      	cmp	r2, r3
 800b964:	d118      	bne.n	800b998 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <prvInsertBlockIntoFreeList+0xb0>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d00d      	beq.n	800b98e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	441a      	add	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	e008      	b.n	800b9a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b98e:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <prvInsertBlockIntoFreeList+0xb0>)
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	e003      	b.n	800b9a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d002      	beq.n	800b9ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9ae:	bf00      	nop
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	20005364 	.word	0x20005364
 800b9c0:	2000536c 	.word	0x2000536c

0800b9c4 <__libc_init_array>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	4d0d      	ldr	r5, [pc, #52]	; (800b9fc <__libc_init_array+0x38>)
 800b9c8:	4c0d      	ldr	r4, [pc, #52]	; (800ba00 <__libc_init_array+0x3c>)
 800b9ca:	1b64      	subs	r4, r4, r5
 800b9cc:	10a4      	asrs	r4, r4, #2
 800b9ce:	2600      	movs	r6, #0
 800b9d0:	42a6      	cmp	r6, r4
 800b9d2:	d109      	bne.n	800b9e8 <__libc_init_array+0x24>
 800b9d4:	4d0b      	ldr	r5, [pc, #44]	; (800ba04 <__libc_init_array+0x40>)
 800b9d6:	4c0c      	ldr	r4, [pc, #48]	; (800ba08 <__libc_init_array+0x44>)
 800b9d8:	f000 f82e 	bl	800ba38 <_init>
 800b9dc:	1b64      	subs	r4, r4, r5
 800b9de:	10a4      	asrs	r4, r4, #2
 800b9e0:	2600      	movs	r6, #0
 800b9e2:	42a6      	cmp	r6, r4
 800b9e4:	d105      	bne.n	800b9f2 <__libc_init_array+0x2e>
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ec:	4798      	blx	r3
 800b9ee:	3601      	adds	r6, #1
 800b9f0:	e7ee      	b.n	800b9d0 <__libc_init_array+0xc>
 800b9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f6:	4798      	blx	r3
 800b9f8:	3601      	adds	r6, #1
 800b9fa:	e7f2      	b.n	800b9e2 <__libc_init_array+0x1e>
 800b9fc:	0800d9a4 	.word	0x0800d9a4
 800ba00:	0800d9a4 	.word	0x0800d9a4
 800ba04:	0800d9a4 	.word	0x0800d9a4
 800ba08:	0800d9a8 	.word	0x0800d9a8

0800ba0c <memcpy>:
 800ba0c:	440a      	add	r2, r1
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba14:	d100      	bne.n	800ba18 <memcpy+0xc>
 800ba16:	4770      	bx	lr
 800ba18:	b510      	push	{r4, lr}
 800ba1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba22:	4291      	cmp	r1, r2
 800ba24:	d1f9      	bne.n	800ba1a <memcpy+0xe>
 800ba26:	bd10      	pop	{r4, pc}

0800ba28 <memset>:
 800ba28:	4402      	add	r2, r0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d100      	bne.n	800ba32 <memset+0xa>
 800ba30:	4770      	bx	lr
 800ba32:	f803 1b01 	strb.w	r1, [r3], #1
 800ba36:	e7f9      	b.n	800ba2c <memset+0x4>

0800ba38 <_init>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	bf00      	nop
 800ba3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3e:	bc08      	pop	{r3}
 800ba40:	469e      	mov	lr, r3
 800ba42:	4770      	bx	lr

0800ba44 <_fini>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	bf00      	nop
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr
