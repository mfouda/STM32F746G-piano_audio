
rtos_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b94  08009b94  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b9c  08009b9c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ba0  08009ba0  00019ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004610  20000010  08009bb4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004620  08009bb4  00024620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000285bd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e0f  00000000  00000000  000485fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e8  00000000  00000000  0004d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  0004f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c508  00000000  00000000  000515d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002751b  00000000  00000000  0007dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001103b0  00000000  00000000  000a4ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b53ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090ac  00000000  00000000  001b5400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009aa8 	.word	0x08009aa8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08009aa8 	.word	0x08009aa8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c
 8000538:	20000080 	.word	0x20000080

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b0a6      	sub	sp, #152	; 0x98
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f001 ff72 	bl	800242a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f8bb 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 ff69 	bl	8001420 <MX_GPIO_Init>
  MX_ADC3_Init();
 800054e:	f000 f9cd 	bl	80008ec <MX_ADC3_Init>
  MX_I2C1_Init();
 8000552:	f000 fa79 	bl	8000a48 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000556:	f000 fab7 	bl	8000ac8 <MX_I2C3_Init>
  MX_LTDC_Init();
 800055a:	f000 faf5 	bl	8000b48 <MX_LTDC_Init>
  MX_RTC_Init();
 800055e:	f000 fb75 	bl	8000c4c <MX_RTC_Init>
  MX_SPI2_Init();
 8000562:	f000 fc19 	bl	8000d98 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000566:	f000 fc55 	bl	8000e14 <MX_TIM1_Init>
  MX_TIM2_Init();
 800056a:	f000 fca7 	bl	8000ebc <MX_TIM2_Init>
  MX_TIM3_Init();
 800056e:	f000 fcf3 	bl	8000f58 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000572:	f000 fd7f 	bl	8001074 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000576:	f000 fdcb 	bl	8001110 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800057a:	f000 fea3 	bl	80012c4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800057e:	f000 fed1 	bl	8001324 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000582:	f000 f961 	bl	8000848 <MX_ADC1_Init>
  MX_DAC_Init();
 8000586:	f000 fa03 	bl	8000990 <MX_DAC_Init>
  MX_UART7_Init();
 800058a:	f000 fe6b 	bl	8001264 <MX_UART7_Init>
  MX_FMC_Init();
 800058e:	f000 fef9 	bl	8001384 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000592:	f000 fa27 	bl	80009e4 <MX_DMA2D_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000596:	f000 f943 	bl	8000820 <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of affichage */
  osMutexDef(affichage);
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  affichageHandle = osMutexCreate(osMutex(affichage));
 80005a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005aa:	4618      	mov	r0, r3
 80005ac:	f007 fb0f 	bl	8007bce <osMutexCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a36      	ldr	r2, [pc, #216]	; (800068c <main+0x150>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueP2V */
  osMessageQDef(myQueueP2V, 3, uint16_t);
 80005b6:	4b36      	ldr	r3, [pc, #216]	; (8000690 <main+0x154>)
 80005b8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80005bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueP2VHandle = osMessageCreate(osMessageQ(myQueueP2V), NULL);
 80005c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f007 fb18 	bl	8007bfe <osMessageCreate>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a30      	ldr	r2, [pc, #192]	; (8000694 <main+0x158>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 2, uint8_t);
 80005d4:	4b30      	ldr	r3, [pc, #192]	; (8000698 <main+0x15c>)
 80005d6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 80005e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fb09 	bl	8007bfe <osMessageCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a2b      	ldr	r2, [pc, #172]	; (800069c <main+0x160>)
 80005f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <main+0x164>)
 80005f4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000606:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f007 fa7e 	bl	8007b0e <osThreadCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <main+0x168>)
 8000616:	6013      	str	r3, [r2, #0]

  /* definition and creation of Time */
  osThreadDef(Time, GetTime, osPriorityNormal, 0, 1024);
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <main+0x16c>)
 800061a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimeHandle = osThreadCreate(osThread(Time), NULL);
 800062c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f007 fa6b 	bl	8007b0e <osThreadCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <main+0x170>)
 800063c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Souris */
  osThreadDef(Souris, MouseTask, osPriorityAboveNormal, 0, 1024);
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <main+0x174>)
 8000640:	f107 041c 	add.w	r4, r7, #28
 8000644:	461d      	mov	r5, r3
 8000646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SourisHandle = osThreadCreate(osThread(Souris), NULL);
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f007 fa58 	bl	8007b0e <osThreadCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <main+0x178>)
 8000662:	6013      	str	r3, [r2, #0]

  /* definition and creation of Chat */
  osThreadDef(Chat, CatTask, osPriorityAboveNormal, 0, 1024);
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <main+0x17c>)
 8000666:	463c      	mov	r4, r7
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ChatHandle = osThreadCreate(osThread(Chat), NULL);
 8000676:	463b      	mov	r3, r7
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f007 fa47 	bl	8007b0e <osThreadCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <main+0x180>)
 8000684:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000686:	f007 fa3b 	bl	8007b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x14e>
 800068c:	2000432c 	.word	0x2000432c
 8000690:	08009ae4 	.word	0x08009ae4
 8000694:	20004330 	.word	0x20004330
 8000698:	08009af4 	.word	0x08009af4
 800069c:	200045cc 	.word	0x200045cc
 80006a0:	08009b04 	.word	0x08009b04
 80006a4:	20003fd4 	.word	0x20003fd4
 80006a8:	08009b20 	.word	0x08009b20
 80006ac:	20004418 	.word	0x20004418
 80006b0:	08009b3c 	.word	0x08009b3c
 80006b4:	20003fd0 	.word	0x20003fd0
 80006b8:	08009b58 	.word	0x08009b58
 80006bc:	20004400 	.word	0x20004400

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0b4      	sub	sp, #208	; 0xd0
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f009 f9e2 	bl	8009a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2284      	movs	r2, #132	; 0x84
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f009 f9d3 	bl	8009a98 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f2:	f003 fafb 	bl	8003cec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b47      	ldr	r3, [pc, #284]	; (8000814 <SystemClock_Config+0x154>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	4a46      	ldr	r2, [pc, #280]	; (8000814 <SystemClock_Config+0x154>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	; 0x40
 8000702:	4b44      	ldr	r3, [pc, #272]	; (8000814 <SystemClock_Config+0x154>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070e:	4b42      	ldr	r3, [pc, #264]	; (8000818 <SystemClock_Config+0x158>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a41      	ldr	r2, [pc, #260]	; (8000818 <SystemClock_Config+0x158>)
 8000714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <SystemClock_Config+0x158>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000726:	2309      	movs	r3, #9
 8000728:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000740:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000744:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000748:	2319      	movs	r3, #25
 800074a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800074e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000752:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800075c:	2309      	movs	r3, #9
 800075e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fb20 	bl	8003dac <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000772:	f001 f875 	bl	8001860 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000776:	f003 fac9 	bl	8003d0c <HAL_PWREx_EnableOverDrive>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000780:	f001 f86e 	bl	8001860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000796:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007aa:	2106      	movs	r1, #6
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fda1 	bl	80042f4 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80007b8:	f001 f852 	bl	8001860 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <SystemClock_Config+0x15c>)
 80007be:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007c6:	2305      	movs	r3, #5
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007ce:	2303      	movs	r3, #3
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007da:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007e2:	2300      	movs	r3, #0
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80007e6:	2300      	movs	r3, #0
 80007e8:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 ff82 	bl	8004704 <HAL_RCCEx_PeriphCLKConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000806:	f001 f82b 	bl	8001860 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	37d0      	adds	r7, #208	; 0xd0
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000
 800081c:	00015868 	.word	0x00015868

08000820 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2107      	movs	r1, #7
 8000828:	2017      	movs	r0, #23
 800082a:	f002 f96b 	bl	8002b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800082e:	2017      	movs	r0, #23
 8000830:	f002 f984 	bl	8002b3c <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2107      	movs	r1, #7
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f002 f963 	bl	8002b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f002 f97c 	bl	8002b3c <HAL_NVIC_EnableIRQ>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_ADC1_Init+0x98>)
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <MX_ADC1_Init+0x9c>)
 800085e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000862:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000866:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ADC1_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_ADC1_Init+0x98>)
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <MX_ADC1_Init+0xa0>)
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_ADC1_Init+0x98>)
 8000896:	2201      	movs	r2, #1
 8000898:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_ADC1_Init+0x98>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_ADC1_Init+0x98>)
 80008aa:	f001 fdeb 	bl	8002484 <HAL_ADC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008b4:	f000 ffd4 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008bc:	2301      	movs	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_ADC1_Init+0x98>)
 80008ca:	f001 fe1f 	bl	800250c <HAL_ADC_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d4:	f000 ffc4 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200042e4 	.word	0x200042e4
 80008e4:	40012000 	.word	0x40012000
 80008e8:	0f000001 	.word	0x0f000001

080008ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_ADC3_Init+0x98>)
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <MX_ADC3_Init+0x9c>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_ADC3_Init+0x98>)
 8000906:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800090a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_ADC3_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_ADC3_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_ADC3_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_ADC3_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_ADC3_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_ADC3_Init+0x98>)
 800092e:	4a17      	ldr	r2, [pc, #92]	; (800098c <MX_ADC3_Init+0xa0>)
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_ADC3_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_ADC3_Init+0x98>)
 800093a:	2201      	movs	r2, #1
 800093c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_ADC3_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_ADC3_Init+0x98>)
 8000948:	2201      	movs	r2, #1
 800094a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_ADC3_Init+0x98>)
 800094e:	f001 fd99 	bl	8002484 <HAL_ADC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000958:	f000 ff82 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800095c:	2306      	movs	r3, #6
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000960:	2301      	movs	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_ADC3_Init+0x98>)
 800096e:	f001 fdcd 	bl	800250c <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000978:	f000 ff72 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20004334 	.word	0x20004334
 8000988:	40012200 	.word	0x40012200
 800098c:	0f000001 	.word	0x0f000001

08000990 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_DAC_Init+0x4c>)
 80009a0:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <MX_DAC_Init+0x50>)
 80009a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_DAC_Init+0x4c>)
 80009a6:	f002 f8d7 	bl	8002b58 <HAL_DAC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009b0:	f000 ff56 	bl	8001860 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_DAC_Init+0x4c>)
 80009c4:	f002 f94e 	bl	8002c64 <HAL_DAC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009ce:	f000 ff47 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20004404 	.word	0x20004404
 80009e0:	40007400 	.word	0x40007400

080009e4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <MX_DMA2D_Init+0x60>)
 80009ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 8000a1a:	f002 fa0f 	bl	8002e3c <HAL_DMA2D_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a24:	f000 ff1c 	bl	8001860 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_DMA2D_Init+0x5c>)
 8000a2c:	f002 fa50 	bl	8002ed0 <HAL_DMA2D_ConfigLayer>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a36:	f000 ff13 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000450c 	.word	0x2000450c
 8000a44:	4002b000 	.word	0x4002b000

08000a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <MX_I2C1_Init+0x78>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a54:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <MX_I2C1_Init+0x7c>)
 8000a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a84:	f002 fca0 	bl	80033c8 <HAL_I2C_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a8e:	f000 fee7 	bl	8001860 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <MX_I2C1_Init+0x74>)
 8000a96:	f002 fd27 	bl	80034e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aa0:	f000 fede 	bl	8001860 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_I2C1_Init+0x74>)
 8000aa8:	f002 fd69 	bl	800357e <HAL_I2CEx_ConfigDigitalFilter>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ab2:	f000 fed5 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20004158 	.word	0x20004158
 8000ac0:	40005400 	.word	0x40005400
 8000ac4:	00c0eaff 	.word	0x00c0eaff

08000ac8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_I2C3_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <MX_I2C3_Init+0x7c>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000b04:	f002 fc60 	bl	80033c8 <HAL_I2C_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b0e:	f000 fea7 	bl	8001860 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000b16:	f002 fce7 	bl	80034e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b20:	f000 fe9e 	bl	8001860 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000b28:	f002 fd29 	bl	800357e <HAL_I2CEx_ConfigDigitalFilter>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f000 fe95 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20003fd8 	.word	0x20003fd8
 8000b40:	40005c00 	.word	0x40005c00
 8000b44:	00c0eaff 	.word	0x00c0eaff

08000b48 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2234      	movs	r2, #52	; 0x34
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 ff9f 	bl	8009a98 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b5a:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b5c:	4a3a      	ldr	r2, [pc, #232]	; (8000c48 <MX_LTDC_Init+0x100>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b60:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b66:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b6c:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b7a:	2228      	movs	r2, #40	; 0x28
 8000b7c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b80:	2209      	movs	r2, #9
 8000b82:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b86:	2235      	movs	r2, #53	; 0x35
 8000b88:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b8c:	220b      	movs	r2, #11
 8000b8e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b92:	f240 2215 	movw	r2, #533	; 0x215
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000b9a:	f240 121b 	movw	r2, #283	; 0x11b
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000ba2:	f240 2235 	movw	r2, #565	; 0x235
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000baa:	f240 121d 	movw	r2, #285	; 0x11d
 8000bae:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bc0:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bc8:	481e      	ldr	r0, [pc, #120]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000bca:	f002 fd25 	bl	8003618 <HAL_LTDC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000bd4:	f000 fe44 	bl	8001860 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000bdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000be0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000be6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bf0:	23ff      	movs	r3, #255	; 0xff
 8000bf2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bf8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bfc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c02:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000c08:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c0e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_LTDC_Init+0xfc>)
 8000c2e:	f002 fe85 	bl	800393c <HAL_LTDC_ConfigLayer>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000c38:	f000 fe12 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3738      	adds	r7, #56	; 0x38
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000423c 	.word	0x2000423c
 8000c48:	40016800 	.word	0x40016800

08000c4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b092      	sub	sp, #72	; 0x48
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000c68:	463b      	mov	r3, r7
 8000c6a:	222c      	movs	r2, #44	; 0x2c
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f008 ff12 	bl	8009a98 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c74:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <MX_RTC_Init+0x144>)
 8000c76:	4a47      	ldr	r2, [pc, #284]	; (8000d94 <MX_RTC_Init+0x148>)
 8000c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <MX_RTC_Init+0x144>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c80:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <MX_RTC_Init+0x144>)
 8000c82:	227f      	movs	r2, #127	; 0x7f
 8000c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c86:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <MX_RTC_Init+0x144>)
 8000c88:	22ff      	movs	r2, #255	; 0xff
 8000c8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c8c:	4b40      	ldr	r3, [pc, #256]	; (8000d90 <MX_RTC_Init+0x144>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <MX_RTC_Init+0x144>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c98:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <MX_RTC_Init+0x144>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c9e:	483c      	ldr	r0, [pc, #240]	; (8000d90 <MX_RTC_Init+0x144>)
 8000ca0:	f004 f920 	bl	8004ee4 <HAL_RTC_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000caa:	f000 fdd9 	bl	8001860 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000cae:	2311      	movs	r3, #17
 8000cb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 15;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000cc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	482f      	ldr	r0, [pc, #188]	; (8000d90 <MX_RTC_Init+0x144>)
 8000cd2:	f004 f999 	bl	8005008 <HAL_RTC_SetTime>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000cdc:	f000 fdc0 	bl	8001860 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4823      	ldr	r0, [pc, #140]	; (8000d90 <MX_RTC_Init+0x144>)
 8000d02:	f004 fa3f 	bl	8005184 <HAL_RTC_SetDate>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000d0c:	f000 fda8 	bl	8001860 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_RTC_Init+0x144>)
 8000d48:	f004 fac4 	bl	80052d4 <HAL_RTC_SetAlarm>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000d52:	f000 fd85 	bl	8001860 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	480b      	ldr	r0, [pc, #44]	; (8000d90 <MX_RTC_Init+0x144>)
 8000d64:	f004 fab6 	bl	80052d4 <HAL_RTC_SetAlarm>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d6e:	f000 fd77 	bl	8001860 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d72:	2202      	movs	r2, #2
 8000d74:	2100      	movs	r1, #0
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_RTC_Init+0x144>)
 8000d78:	f004 fc36 	bl	80055e8 <HAL_RTCEx_SetTimeStamp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000d82:	f000 fd6d 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3748      	adds	r7, #72	; 0x48
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000441c 	.word	0x2000441c
 8000d94:	40002800 	.word	0x40002800

08000d98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <MX_SPI2_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000da8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000db2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000db6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000dc6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000de6:	2207      	movs	r2, #7
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000df2:	2208      	movs	r2, #8
 8000df4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_SPI2_Init+0x74>)
 8000df8:	f004 fc80 	bl	80056fc <HAL_SPI_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f000 fd2d 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20004024 	.word	0x20004024
 8000e10:	40003800 	.word	0x40003800

08000e14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e34:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <MX_TIM1_Init+0xa4>)
 8000e36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5e:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e60:	f004 fcf7 	bl	8005852 <HAL_TIM_Base_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e6a:	f000 fcf9 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e7c:	f005 f848 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e86:	f000 fceb 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <MX_TIM1_Init+0xa0>)
 8000e9c:	f005 fd90 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ea6:	f000 fcdb 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000443c 	.word	0x2000443c
 8000eb8:	40010000 	.word	0x40010000

08000ebc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f02:	4814      	ldr	r0, [pc, #80]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000f04:	f004 fca5 	bl	8005852 <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f0e:	f000 fca7 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000f20:	f004 fff6 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f2a:	f000 fc99 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_TIM2_Init+0x98>)
 8000f3c:	f005 fd40 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f46:	f000 fc8b 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000454c 	.word	0x2000454c

08000f58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f9a:	4b34      	ldr	r3, [pc, #208]	; (800106c <MX_TIM3_Init+0x114>)
 8000f9c:	4a34      	ldr	r2, [pc, #208]	; (8001070 <MX_TIM3_Init+0x118>)
 8000f9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fa0:	4b32      	ldr	r3, [pc, #200]	; (800106c <MX_TIM3_Init+0x114>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <MX_TIM3_Init+0x114>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <MX_TIM3_Init+0x114>)
 8000fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_TIM3_Init+0x114>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <MX_TIM3_Init+0x114>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fc0:	482a      	ldr	r0, [pc, #168]	; (800106c <MX_TIM3_Init+0x114>)
 8000fc2:	f004 fc46 	bl	8005852 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fcc:	f000 fc48 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4823      	ldr	r0, [pc, #140]	; (800106c <MX_TIM3_Init+0x114>)
 8000fde:	f004 ff97 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000fe8:	f000 fc3a 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fec:	481f      	ldr	r0, [pc, #124]	; (800106c <MX_TIM3_Init+0x114>)
 8000fee:	f004 fcff 	bl	80059f0 <HAL_TIM_PWM_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000ff8:	f000 fc32 	bl	8001860 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <MX_TIM3_Init+0x114>)
 800100c:	f005 f846 	bl	800609c <HAL_TIM_SlaveConfigSynchro>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8001016:	f000 fc23 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001022:	f107 0320 	add.w	r3, r7, #32
 8001026:	4619      	mov	r1, r3
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <MX_TIM3_Init+0x114>)
 800102a:	f005 fcc9 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001034:	f000 fc14 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <MX_TIM3_Init+0x114>)
 8001050:	f004 fe4e 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800105a:	f000 fc01 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <MX_TIM3_Init+0x114>)
 8001060:	f000 ff3c 	bl	8001edc <HAL_TIM_MspPostInit>

}
 8001064:	bf00      	nop
 8001066:	3750      	adds	r7, #80	; 0x50
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200041f0 	.word	0x200041f0
 8001070:	40000400 	.word	0x40000400

08001074 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_TIM5_Init+0x94>)
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <MX_TIM5_Init+0x98>)
 8001096:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_TIM5_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_TIM5_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_TIM5_Init+0x94>)
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295
 80010aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_TIM5_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_TIM5_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <MX_TIM5_Init+0x94>)
 80010ba:	f004 fbca 	bl	8005852 <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80010c4:	f000 fbcc 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_TIM5_Init+0x94>)
 80010d6:	f004 ff1b 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80010e0:	f000 fbbe 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_TIM5_Init+0x94>)
 80010f2:	f005 fc65 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80010fc:	f000 fbb0 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200041a4 	.word	0x200041a4
 800110c:	40000c00 	.word	0x40000c00

08001110 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09a      	sub	sp, #104	; 0x68
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	222c      	movs	r2, #44	; 0x2c
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f008 fca4 	bl	8009a98 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001150:	4b42      	ldr	r3, [pc, #264]	; (800125c <MX_TIM8_Init+0x14c>)
 8001152:	4a43      	ldr	r2, [pc, #268]	; (8001260 <MX_TIM8_Init+0x150>)
 8001154:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001156:	4b41      	ldr	r3, [pc, #260]	; (800125c <MX_TIM8_Init+0x14c>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b3f      	ldr	r3, [pc, #252]	; (800125c <MX_TIM8_Init+0x14c>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001162:	4b3e      	ldr	r3, [pc, #248]	; (800125c <MX_TIM8_Init+0x14c>)
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <MX_TIM8_Init+0x14c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001170:	4b3a      	ldr	r3, [pc, #232]	; (800125c <MX_TIM8_Init+0x14c>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b39      	ldr	r3, [pc, #228]	; (800125c <MX_TIM8_Init+0x14c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800117c:	4837      	ldr	r0, [pc, #220]	; (800125c <MX_TIM8_Init+0x14c>)
 800117e:	f004 fb68 	bl	8005852 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001188:	f000 fb6a 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001192:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001196:	4619      	mov	r1, r3
 8001198:	4830      	ldr	r0, [pc, #192]	; (800125c <MX_TIM8_Init+0x14c>)
 800119a:	f004 feb9 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80011a4:	f000 fb5c 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <MX_TIM8_Init+0x14c>)
 80011aa:	f004 fc21 	bl	80059f0 <HAL_TIM_PWM_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80011b4:	f000 fb54 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4824      	ldr	r0, [pc, #144]	; (800125c <MX_TIM8_Init+0x14c>)
 80011cc:	f005 fbf8 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80011d6:	f000 fb43 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011da:	2360      	movs	r3, #96	; 0x60
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f6:	220c      	movs	r2, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	4818      	ldr	r0, [pc, #96]	; (800125c <MX_TIM8_Init+0x14c>)
 80011fc:	f004 fd78 	bl	8005cf0 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001206:	f000 fb2b 	bl	8001860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800122c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM8_Init+0x14c>)
 8001240:	f005 fc4c 	bl	8006adc <HAL_TIMEx_ConfigBreakDeadTime>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800124a:	f000 fb09 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM8_Init+0x14c>)
 8001250:	f000 fe44 	bl	8001edc <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3768      	adds	r7, #104	; 0x68
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000410c 	.word	0x2000410c
 8001260:	40010400 	.word	0x40010400

08001264 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_UART7_Init+0x58>)
 800126a:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <MX_UART7_Init+0x5c>)
 800126c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_UART7_Init+0x58>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_UART7_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_UART7_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_UART7_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_UART7_Init+0x58>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_UART7_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_UART7_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_UART7_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_UART7_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_UART7_Init+0x58>)
 80012a8:	f005 fcb4 	bl	8006c14 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80012b2:	f000 fad5 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20004088 	.word	0x20004088
 80012c0:	40007800 	.word	0x40007800

080012c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <MX_USART1_UART_Init+0x5c>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_USART1_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_USART1_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_USART1_UART_Init+0x58>)
 8001308:	f005 fc84 	bl	8006c14 <HAL_UART_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001312:	f000 faa5 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000437c 	.word	0x2000437c
 8001320:	40011000 	.word	0x40011000

08001324 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_USART6_UART_Init+0x58>)
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <MX_USART6_UART_Init+0x5c>)
 800132c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_USART6_UART_Init+0x58>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_USART6_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_USART6_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_USART6_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_USART6_UART_Init+0x58>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_USART6_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_USART6_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_USART6_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_USART6_UART_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_USART6_UART_Init+0x58>)
 8001368:	f005 fc54 	bl	8006c14 <HAL_UART_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001372:	f000 fa75 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20004488 	.word	0x20004488
 8001380:	40011400 	.word	0x40011400

08001384 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_FMC_Init+0x94>)
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <MX_FMC_Init+0x98>)
 80013a0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_FMC_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_FMC_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_FMC_Init+0x94>)
 80013b0:	2204      	movs	r2, #4
 80013b2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_FMC_Init+0x94>)
 80013b6:	2210      	movs	r2, #16
 80013b8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_FMC_Init+0x94>)
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_FMC_Init+0x94>)
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_FMC_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_FMC_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_FMC_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_FMC_Init+0x94>)
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80013de:	2310      	movs	r3, #16
 80013e0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80013e2:	2310      	movs	r3, #16
 80013e4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80013e6:	2310      	movs	r3, #16
 80013e8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80013ea:	2310      	movs	r3, #16
 80013ec:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80013ee:	2310      	movs	r3, #16
 80013f0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80013f2:	2310      	movs	r3, #16
 80013f4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80013f6:	2310      	movs	r3, #16
 80013f8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_FMC_Init+0x94>)
 8001400:	f004 f948 	bl	8005694 <HAL_SDRAM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800140a:	f000 fa29 	bl	8001860 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20004598 	.word	0x20004598
 800141c:	a0000140 	.word	0xa0000140

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	; 0x40
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	4bb0      	ldr	r3, [pc, #704]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4aaf      	ldr	r2, [pc, #700]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4bad      	ldr	r3, [pc, #692]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
 800144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4baa      	ldr	r3, [pc, #680]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4aa9      	ldr	r2, [pc, #676]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4ba7      	ldr	r3, [pc, #668]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4ba4      	ldr	r3, [pc, #656]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4aa3      	ldr	r2, [pc, #652]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4ba1      	ldr	r3, [pc, #644]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147e:	4b9e      	ldr	r3, [pc, #632]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a9d      	ldr	r2, [pc, #628]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b9b      	ldr	r3, [pc, #620]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001496:	4b98      	ldr	r3, [pc, #608]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a97      	ldr	r2, [pc, #604]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 800149c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b95      	ldr	r3, [pc, #596]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	4b92      	ldr	r3, [pc, #584]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a91      	ldr	r2, [pc, #580]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b8f      	ldr	r3, [pc, #572]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014c6:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a8b      	ldr	r2, [pc, #556]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80014de:	4b86      	ldr	r3, [pc, #536]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a85      	ldr	r2, [pc, #532]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b83      	ldr	r3, [pc, #524]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b80      	ldr	r3, [pc, #512]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a7f      	ldr	r2, [pc, #508]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b7d      	ldr	r3, [pc, #500]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150e:	4b7a      	ldr	r3, [pc, #488]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a79      	ldr	r2, [pc, #484]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001514:	f043 0320 	orr.w	r3, r3, #32
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	4b74      	ldr	r3, [pc, #464]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a73      	ldr	r2, [pc, #460]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 800152c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b71      	ldr	r3, [pc, #452]	; (80016f8 <MX_GPIO_Init+0x2d8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2160      	movs	r1, #96	; 0x60
 8001542:	486e      	ldr	r0, [pc, #440]	; (80016fc <MX_GPIO_Init+0x2dc>)
 8001544:	f001 ff02 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2120      	movs	r1, #32
 800154c:	486c      	ldr	r0, [pc, #432]	; (8001700 <MX_GPIO_Init+0x2e0>)
 800154e:	f001 fefd 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2108      	movs	r1, #8
 8001556:	486a      	ldr	r0, [pc, #424]	; (8001700 <MX_GPIO_Init+0x2e0>)
 8001558:	f001 fef8 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2108      	movs	r1, #8
 8001560:	4868      	ldr	r0, [pc, #416]	; (8001704 <MX_GPIO_Init+0x2e4>)
 8001562:	f001 fef3 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	2108      	movs	r1, #8
 800156a:	4867      	ldr	r0, [pc, #412]	; (8001708 <MX_GPIO_Init+0x2e8>)
 800156c:	f001 feee 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001576:	4863      	ldr	r0, [pc, #396]	; (8001704 <MX_GPIO_Init+0x2e4>)
 8001578:	f001 fee8 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800157c:	2200      	movs	r2, #0
 800157e:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001582:	4862      	ldr	r0, [pc, #392]	; (800170c <MX_GPIO_Init+0x2ec>)
 8001584:	f001 fee2 	bl	800334c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2108      	movs	r1, #8
 800158c:	4860      	ldr	r0, [pc, #384]	; (8001710 <MX_GPIO_Init+0x2f0>)
 800158e:	f001 fedd 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001592:	2308      	movs	r3, #8
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a2:	4619      	mov	r1, r3
 80015a4:	4855      	ldr	r0, [pc, #340]	; (80016fc <MX_GPIO_Init+0x2dc>)
 80015a6:	f001 fd25 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80015aa:	f643 0323 	movw	r3, #14371	; 0x3823
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015bc:	230a      	movs	r3, #10
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4853      	ldr	r0, [pc, #332]	; (8001714 <MX_GPIO_Init+0x2f4>)
 80015c8:	f001 fd14 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80015cc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d2:	4b51      	ldr	r3, [pc, #324]	; (8001718 <MX_GPIO_Init+0x2f8>)
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015de:	4619      	mov	r1, r3
 80015e0:	484e      	ldr	r0, [pc, #312]	; (800171c <MX_GPIO_Init+0x2fc>)
 80015e2:	f001 fd07 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80015e6:	2360      	movs	r3, #96	; 0x60
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fa:	4619      	mov	r1, r3
 80015fc:	483f      	ldr	r0, [pc, #252]	; (80016fc <MX_GPIO_Init+0x2dc>)
 80015fe:	f001 fcf9 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001614:	4619      	mov	r1, r3
 8001616:	4842      	ldr	r0, [pc, #264]	; (8001720 <MX_GPIO_Init+0x300>)
 8001618:	f001 fcec 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800161c:	2340      	movs	r3, #64	; 0x40
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001620:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MX_GPIO_Init+0x304>)
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162c:	4619      	mov	r1, r3
 800162e:	4834      	ldr	r0, [pc, #208]	; (8001700 <MX_GPIO_Init+0x2e0>)
 8001630:	f001 fce0 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001634:	2328      	movs	r3, #40	; 0x28
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001648:	4619      	mov	r1, r3
 800164a:	482d      	ldr	r0, [pc, #180]	; (8001700 <MX_GPIO_Init+0x2e0>)
 800164c:	f001 fcd2 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001650:	f241 0308 	movw	r3, #4104	; 0x1008
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001666:	4619      	mov	r1, r3
 8001668:	4826      	ldr	r0, [pc, #152]	; (8001704 <MX_GPIO_Init+0x2e4>)
 800166a:	f001 fcc3 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800166e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001680:	4619      	mov	r1, r3
 8001682:	4829      	ldr	r0, [pc, #164]	; (8001728 <MX_GPIO_Init+0x308>)
 8001684:	f001 fcb6 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001688:	2308      	movs	r3, #8
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169c:	4619      	mov	r1, r3
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <MX_GPIO_Init+0x2e8>)
 80016a0:	f001 fca8 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016a4:	2310      	movs	r3, #16
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b4:	4619      	mov	r1, r3
 80016b6:	4812      	ldr	r0, [pc, #72]	; (8001700 <MX_GPIO_Init+0x2e0>)
 80016b8:	f001 fc9c 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016bc:	f248 0304 	movw	r3, #32772	; 0x8004
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ce:	4619      	mov	r1, r3
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <MX_GPIO_Init+0x2ec>)
 80016d2:	f001 fc8f 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80016d6:	f645 6340 	movw	r3, #24128	; 0x5e40
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ec:	4619      	mov	r1, r3
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <MX_GPIO_Init+0x2ec>)
 80016f0:	f001 fc80 	bl	8002ff4 <HAL_GPIO_Init>
 80016f4:	e01a      	b.n	800172c <MX_GPIO_Init+0x30c>
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40021000 	.word	0x40021000
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40022000 	.word	0x40022000
 8001708:	40022800 	.word	0x40022800
 800170c:	40021c00 	.word	0x40021c00
 8001710:	40021800 	.word	0x40021800
 8001714:	40020400 	.word	0x40020400
 8001718:	10110000 	.word	0x10110000
 800171c:	40020000 	.word	0x40020000
 8001720:	40022400 	.word	0x40022400
 8001724:	10120000 	.word	0x10120000
 8001728:	40020800 	.word	0x40020800

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800172c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <MX_GPIO_Init+0x3c4>)
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	4829      	ldr	r0, [pc, #164]	; (80017e8 <MX_GPIO_Init+0x3c8>)
 8001742:	f001 fc57 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001746:	2310      	movs	r3, #16
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001756:	230a      	movs	r3, #10
 8001758:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	4822      	ldr	r0, [pc, #136]	; (80017ec <MX_GPIO_Init+0x3cc>)
 8001762:	f001 fc47 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001766:	2384      	movs	r3, #132	; 0x84
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	481d      	ldr	r0, [pc, #116]	; (80017f0 <MX_GPIO_Init+0x3d0>)
 800177a:	f001 fc3b 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800177e:	2305      	movs	r3, #5
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800178e:	230a      	movs	r3, #10
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	4816      	ldr	r0, [pc, #88]	; (80017f4 <MX_GPIO_Init+0x3d4>)
 800179a:	f001 fc2b 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800179e:	2308      	movs	r3, #8
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b2:	4619      	mov	r1, r3
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <MX_GPIO_Init+0x3d0>)
 80017b6:	f001 fc1d 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80017ba:	2328      	movs	r3, #40	; 0x28
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017ca:	230a      	movs	r3, #10
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	4619      	mov	r1, r3
 80017d4:	4808      	ldr	r0, [pc, #32]	; (80017f8 <MX_GPIO_Init+0x3d8>)
 80017d6:	f001 fc0d 	bl	8002ff4 <HAL_GPIO_Init>

}
 80017da:	bf00      	nop
 80017dc:	3740      	adds	r7, #64	; 0x40
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	10120000 	.word	0x10120000
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40021c00 	.word	0x40021c00
 80017f0:	40021800 	.word	0x40021800
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020000 	.word	0x40020000

080017fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f006 f9ce 	bl	8007ba6 <osDelay>
 800180a:	e7fb      	b.n	8001804 <StartDefaultTask+0x8>

0800180c <GetTime>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetTime */
void GetTime(void const * argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetTime */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001814:	2001      	movs	r0, #1
 8001816:	f006 f9c6 	bl	8007ba6 <osDelay>
 800181a:	e7fb      	b.n	8001814 <GetTime+0x8>

0800181c <MouseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MouseTask */
void MouseTask(void const * argument)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MouseTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001824:	2001      	movs	r0, #1
 8001826:	f006 f9be 	bl	8007ba6 <osDelay>
 800182a:	e7fb      	b.n	8001824 <MouseTask+0x8>

0800182c <CatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CatTask */
void CatTask(void const * argument)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CatTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f006 f9b6 	bl	8007ba6 <osDelay>
 800183a:	e7fb      	b.n	8001834 <CatTask+0x8>

0800183c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800184e:	f000 fdf9 	bl	8002444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40001000 	.word	0x40001000

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_MspInit+0x4c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_MspInit+0x4c>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_MspInit+0x4c>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	210f      	movs	r1, #15
 80018a6:	f06f 0001 	mvn.w	r0, #1
 80018aa:	f001 f92b 	bl	8002b04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <HAL_ADC_MspInit+0xc8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d124      	bne.n	8001928 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a29      	ldr	r2, [pc, #164]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b21      	ldr	r3, [pc, #132]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800190e:	2301      	movs	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	481a      	ldr	r0, [pc, #104]	; (800198c <HAL_ADC_MspInit+0xd0>)
 8001922:	f001 fb67 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001926:	e029      	b.n	800197c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_ADC_MspInit+0xd4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d124      	bne.n	800197c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a14      	ldr	r2, [pc, #80]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 8001938:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 8001950:	f043 0320 	orr.w	r3, r3, #32
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_ADC_MspInit+0xcc>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8001962:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001968:	2303      	movs	r3, #3
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4807      	ldr	r0, [pc, #28]	; (8001994 <HAL_ADC_MspInit+0xd8>)
 8001978:	f001 fb3c 	bl	8002ff4 <HAL_GPIO_Init>
}
 800197c:	bf00      	nop
 800197e:	3730      	adds	r7, #48	; 0x30
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40012000 	.word	0x40012000
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40012200 	.word	0x40012200
 8001994:	40021400 	.word	0x40021400

08001998 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_DAC_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d12b      	bne.n	8001a12 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_DAC_MspInit+0x88>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_DAC_MspInit+0x88>)
 80019c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_DAC_MspInit+0x88>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_DAC_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_DAC_MspInit+0x88>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_DAC_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ea:	2310      	movs	r3, #16
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ee:	2303      	movs	r3, #3
 80019f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4809      	ldr	r0, [pc, #36]	; (8001a24 <HAL_DAC_MspInit+0x8c>)
 80019fe:	f001 faf9 	bl	8002ff4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2036      	movs	r0, #54	; 0x36
 8001a08:	f001 f87c 	bl	8002b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a0c:	2036      	movs	r0, #54	; 0x36
 8001a0e:	f001 f895 	bl	8002b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40007400 	.word	0x40007400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_DMA2D_MspInit+0x38>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10b      	bne.n	8001a52 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_DMA2D_MspInit+0x3c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_DMA2D_MspInit+0x3c>)
 8001a40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <HAL_DMA2D_MspInit+0x3c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	4002b000 	.word	0x4002b000
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2f      	ldr	r2, [pc, #188]	; (8001b44 <HAL_I2C_MspInit+0xdc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d129      	bne.n	8001ade <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a2e      	ldr	r2, [pc, #184]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa8:	2312      	movs	r3, #18
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	4823      	ldr	r0, [pc, #140]	; (8001b4c <HAL_I2C_MspInit+0xe4>)
 8001ac0:	f001 fa98 	bl	8002ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001aca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001adc:	e02d      	b.n	8001b3a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_I2C_MspInit+0xe8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d128      	bne.n	8001b3a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af2:	6313      	str	r3, [r2, #48]	; 0x30
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001b00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b06:	2312      	movs	r3, #18
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b12:	2304      	movs	r3, #4
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <HAL_I2C_MspInit+0xec>)
 8001b1e:	f001 fa69 	bl	8002ff4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001b28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_I2C_MspInit+0xe0>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
}
 8001b3a:	bf00      	nop
 8001b3c:	3730      	adds	r7, #48	; 0x30
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40005400 	.word	0x40005400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40005c00 	.word	0x40005c00
 8001b54:	40021c00 	.word	0x40021c00

08001b58 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08e      	sub	sp, #56	; 0x38
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <HAL_LTDC_MspInit+0x174>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	f040 80a3 	bne.w	8001cc2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b7c:	4b54      	ldr	r3, [pc, #336]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	4a53      	ldr	r2, [pc, #332]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001b82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b86:	6453      	str	r3, [r2, #68]	; 0x44
 8001b88:	4b51      	ldr	r3, [pc, #324]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b94:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a4d      	ldr	r2, [pc, #308]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bac:	4b48      	ldr	r3, [pc, #288]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001bc4:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a41      	ldr	r2, [pc, #260]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bdc:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a3b      	ldr	r2, [pc, #236]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be6:	6313      	str	r3, [r2, #48]	; 0x30
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bf4:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a35      	ldr	r2, [pc, #212]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <HAL_LTDC_MspInit+0x178>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c1c:	230e      	movs	r3, #14
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	482b      	ldr	r0, [pc, #172]	; (8001cd4 <HAL_LTDC_MspInit+0x17c>)
 8001c28:	f001 f9e4 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001c2c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c3e:	230e      	movs	r3, #14
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	4619      	mov	r1, r3
 8001c48:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <HAL_LTDC_MspInit+0x180>)
 8001c4a:	f001 f9d3 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001c4e:	23f7      	movs	r3, #247	; 0xf7
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c5e:	230e      	movs	r3, #14
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	481c      	ldr	r0, [pc, #112]	; (8001cdc <HAL_LTDC_MspInit+0x184>)
 8001c6a:	f001 f9c3 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c80:	2309      	movs	r3, #9
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <HAL_LTDC_MspInit+0x188>)
 8001c8c:	f001 f9b2 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001c90:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ca2:	230e      	movs	r3, #14
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <HAL_LTDC_MspInit+0x18c>)
 8001cae:	f001 f9a1 	bl	8002ff4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	2058      	movs	r0, #88	; 0x58
 8001cb8:	f000 ff24 	bl	8002b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001cbc:	2058      	movs	r0, #88	; 0x58
 8001cbe:	f000 ff3d 	bl	8002b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3738      	adds	r7, #56	; 0x38
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40016800 	.word	0x40016800
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40022400 	.word	0x40022400
 8001cdc:	40022800 	.word	0x40022800
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_RTC_MspInit+0x2c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d105      	bne.n	8001d06 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_RTC_MspInit+0x30>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_RTC_MspInit+0x30>)
 8001d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40002800 	.word	0x40002800
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2d      	ldr	r2, [pc, #180]	; (8001df0 <HAL_SPI_MspInit+0xd4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d154      	bne.n	8001de8 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d56:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_SPI_MspInit+0xd8>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001d86:	2302      	movs	r3, #2
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d96:	2305      	movs	r3, #5
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4815      	ldr	r0, [pc, #84]	; (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001da2:	f001 f927 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001da6:	2301      	movs	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001db6:	2305      	movs	r3, #5
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480d      	ldr	r0, [pc, #52]	; (8001df8 <HAL_SPI_MspInit+0xdc>)
 8001dc2:	f001 f917 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001dc6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dd8:	2305      	movs	r3, #5
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <HAL_SPI_MspInit+0xe0>)
 8001de4:	f001 f906 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40003800 	.word	0x40003800
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	40020400 	.word	0x40020400

08001e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a2e      	ldr	r2, [pc, #184]	; (8001ec8 <HAL_TIM_Base_MspInit+0xc8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10c      	bne.n	8001e2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e2a:	e046      	b.n	8001eba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e34:	d10c      	bne.n	8001e50 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
}
 8001e4e:	e034      	b.n	8001eba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <HAL_TIM_Base_MspInit+0xd0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d10c      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697b      	ldr	r3, [r7, #20]
}
 8001e72:	e022      	b.n	8001eba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_TIM_Base_MspInit+0xd4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10c      	bne.n	8001e98 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
}
 8001e96:	e010      	b.n	8001eba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_TIM_Base_MspInit+0xd8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10b      	bne.n	8001eba <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	bf00      	nop
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40000c00 	.word	0x40000c00
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <HAL_TIM_MspPostInit+0xa8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d11c      	bne.n	8001f38 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efe:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <HAL_TIM_MspPostInit+0xac>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <HAL_TIM_MspPostInit+0xac>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <HAL_TIM_MspPostInit+0xac>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f16:	2310      	movs	r3, #16
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f26:	2302      	movs	r3, #2
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4816      	ldr	r0, [pc, #88]	; (8001f8c <HAL_TIM_MspPostInit+0xb0>)
 8001f32:	f001 f85f 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f36:	e020      	b.n	8001f7a <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_TIM_MspPostInit+0xb4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d11b      	bne.n	8001f7a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_TIM_MspPostInit+0xac>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_TIM_MspPostInit+0xac>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_TIM_MspPostInit+0xac>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	4807      	ldr	r0, [pc, #28]	; (8001f94 <HAL_TIM_MspPostInit+0xb8>)
 8001f76:	f001 f83d 	bl	8002ff4 <HAL_GPIO_Init>
}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	; 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40010400 	.word	0x40010400
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a57      	ldr	r2, [pc, #348]	; (8002114 <HAL_UART_MspInit+0x17c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d128      	bne.n	800200c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001fba:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_UART_MspInit+0x180>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a56      	ldr	r2, [pc, #344]	; (8002118 <HAL_UART_MspInit+0x180>)
 8001fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b54      	ldr	r3, [pc, #336]	; (8002118 <HAL_UART_MspInit+0x180>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd2:	4b51      	ldr	r3, [pc, #324]	; (8002118 <HAL_UART_MspInit+0x180>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a50      	ldr	r2, [pc, #320]	; (8002118 <HAL_UART_MspInit+0x180>)
 8001fd8:	f043 0320 	orr.w	r3, r3, #32
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <HAL_UART_MspInit+0x180>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	4845      	ldr	r0, [pc, #276]	; (800211c <HAL_UART_MspInit+0x184>)
 8002006:	f000 fff5 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800200a:	e07f      	b.n	800210c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a43      	ldr	r2, [pc, #268]	; (8002120 <HAL_UART_MspInit+0x188>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d14d      	bne.n	80020b2 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002016:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_UART_MspInit+0x180>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a3f      	ldr	r2, [pc, #252]	; (8002118 <HAL_UART_MspInit+0x180>)
 800201c:	f043 0310 	orr.w	r3, r3, #16
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <HAL_UART_MspInit+0x180>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_UART_MspInit+0x180>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a39      	ldr	r2, [pc, #228]	; (8002118 <HAL_UART_MspInit+0x180>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <HAL_UART_MspInit+0x180>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_UART_MspInit+0x180>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a33      	ldr	r2, [pc, #204]	; (8002118 <HAL_UART_MspInit+0x180>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_UART_MspInit+0x180>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800206e:	2307      	movs	r3, #7
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	4619      	mov	r1, r3
 8002078:	482a      	ldr	r0, [pc, #168]	; (8002124 <HAL_UART_MspInit+0x18c>)
 800207a:	f000 ffbb 	bl	8002ff4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800207e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002090:	2307      	movs	r3, #7
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	4823      	ldr	r0, [pc, #140]	; (8002128 <HAL_UART_MspInit+0x190>)
 800209c:	f000 ffaa 	bl	8002ff4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2107      	movs	r1, #7
 80020a4:	2025      	movs	r0, #37	; 0x25
 80020a6:	f000 fd2d 	bl	8002b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020aa:	2025      	movs	r0, #37	; 0x25
 80020ac:	f000 fd46 	bl	8002b3c <HAL_NVIC_EnableIRQ>
}
 80020b0:	e02c      	b.n	800210c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_UART_MspInit+0x194>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d127      	bne.n	800210c <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020bc:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_UART_MspInit+0x180>)
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	4a15      	ldr	r2, [pc, #84]	; (8002118 <HAL_UART_MspInit+0x180>)
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	6453      	str	r3, [r2, #68]	; 0x44
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_UART_MspInit+0x180>)
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_UART_MspInit+0x180>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_UART_MspInit+0x180>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6313      	str	r3, [r2, #48]	; 0x30
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_UART_MspInit+0x180>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80020ec:	23c0      	movs	r3, #192	; 0xc0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020fc:	2308      	movs	r3, #8
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	480a      	ldr	r0, [pc, #40]	; (8002130 <HAL_UART_MspInit+0x198>)
 8002108:	f000 ff74 	bl	8002ff4 <HAL_GPIO_Init>
}
 800210c:	bf00      	nop
 800210e:	3738      	adds	r7, #56	; 0x38
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40007800 	.word	0x40007800
 8002118:	40023800 	.word	0x40023800
 800211c:	40021400 	.word	0x40021400
 8002120:	40011000 	.word	0x40011000
 8002124:	40020400 	.word	0x40020400
 8002128:	40020000 	.word	0x40020000
 800212c:	40011400 	.word	0x40011400
 8002130:	40020800 	.word	0x40020800

08002134 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002148:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_FMC_MspInit+0x100>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d16d      	bne.n	800222c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002150:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_FMC_MspInit+0x100>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_FMC_MspInit+0x104>)
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	4a37      	ldr	r2, [pc, #220]	; (8002238 <HAL_FMC_MspInit+0x104>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6393      	str	r3, [r2, #56]	; 0x38
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <HAL_FMC_MspInit+0x104>)
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800216e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002172:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002180:	230c      	movs	r3, #12
 8002182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	4619      	mov	r1, r3
 8002188:	482c      	ldr	r0, [pc, #176]	; (800223c <HAL_FMC_MspInit+0x108>)
 800218a:	f000 ff33 	bl	8002ff4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800218e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002192:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021a0:	230c      	movs	r3, #12
 80021a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4825      	ldr	r0, [pc, #148]	; (8002240 <HAL_FMC_MspInit+0x10c>)
 80021aa:	f000 ff23 	bl	8002ff4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80021ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021c0:	230c      	movs	r3, #12
 80021c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	481e      	ldr	r0, [pc, #120]	; (8002244 <HAL_FMC_MspInit+0x110>)
 80021ca:	f000 ff13 	bl	8002ff4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80021ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e0:	230c      	movs	r3, #12
 80021e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4817      	ldr	r0, [pc, #92]	; (8002248 <HAL_FMC_MspInit+0x114>)
 80021ea:	f000 ff03 	bl	8002ff4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80021ee:	2328      	movs	r3, #40	; 0x28
 80021f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021fe:	230c      	movs	r3, #12
 8002200:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4811      	ldr	r0, [pc, #68]	; (800224c <HAL_FMC_MspInit+0x118>)
 8002208:	f000 fef4 	bl	8002ff4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800220c:	2308      	movs	r3, #8
 800220e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800221c:	230c      	movs	r3, #12
 800221e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	4619      	mov	r1, r3
 8002224:	480a      	ldr	r0, [pc, #40]	; (8002250 <HAL_FMC_MspInit+0x11c>)
 8002226:	f000 fee5 	bl	8002ff4 <HAL_GPIO_Init>
 800222a:	e000      	b.n	800222e <HAL_FMC_MspInit+0xfa>
    return;
 800222c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000280 	.word	0x20000280
 8002238:	40023800 	.word	0x40023800
 800223c:	40021000 	.word	0x40021000
 8002240:	40021800 	.word	0x40021800
 8002244:	40020c00 	.word	0x40020c00
 8002248:	40021400 	.word	0x40021400
 800224c:	40021c00 	.word	0x40021c00
 8002250:	40020800 	.word	0x40020800

08002254 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800225c:	f7ff ff6a 	bl	8002134 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	2036      	movs	r0, #54	; 0x36
 800227e:	f000 fc41 	bl	8002b04 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002282:	2036      	movs	r0, #54	; 0x36
 8002284:	f000 fc5a 	bl	8002b3c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_InitTick+0xa0>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_InitTick+0xa0>)
 800228e:	f043 0310 	orr.w	r3, r3, #16
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_InitTick+0xa0>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022a0:	f107 0210 	add.w	r2, r7, #16
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 f9f8 	bl	80046a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022b0:	f002 f9ce 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 80022b4:	4603      	mov	r3, r0
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <HAL_InitTick+0xa4>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0c9b      	lsrs	r3, r3, #18
 80022c4:	3b01      	subs	r3, #1
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_InitTick+0xa8>)
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_InitTick+0xac>)
 80022cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_InitTick+0xa8>)
 80022d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_InitTick+0xa8>)
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_InitTick+0xa8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_InitTick+0xa8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <HAL_InitTick+0xa8>)
 80022ea:	f003 fab2 	bl	8005852 <HAL_TIM_Base_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80022f4:	4806      	ldr	r0, [pc, #24]	; (8002310 <HAL_InitTick+0xa8>)
 80022f6:	f003 fb03 	bl	8005900 <HAL_TIM_Base_Start_IT>
 80022fa:	4603      	mov	r3, r0
 80022fc:	e000      	b.n	8002300 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
}
 8002300:	4618      	mov	r0, r3
 8002302:	3730      	adds	r7, #48	; 0x30
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	431bde83 	.word	0x431bde83
 8002310:	200045d0 	.word	0x200045d0
 8002314:	40001000 	.word	0x40001000

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800231c:	e7fe      	b.n	800231c <NMI_Handler+0x4>

0800231e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <UsageFault_Handler+0x4>

08002336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002348:	f44f 7080 	mov.w	r0, #256	; 0x100
 800234c:	f001 f818 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}

08002354 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <USART1_IRQHandler+0x10>)
 800235a:	f004 fca9 	bl	8006cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	2000437c 	.word	0x2000437c

08002368 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800236c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002370:	f001 f806 	bl	8003380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <TIM6_DAC_IRQHandler+0x20>)
 800237e:	791b      	ldrb	r3, [r3, #4]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002386:	4804      	ldr	r0, [pc, #16]	; (8002398 <TIM6_DAC_IRQHandler+0x20>)
 8002388:	f000 fc08 	bl	8002b9c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <TIM6_DAC_IRQHandler+0x24>)
 800238e:	f003 fb90 	bl	8005ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20004404 	.word	0x20004404
 800239c:	200045d0 	.word	0x200045d0

080023a0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <LTDC_IRQHandler+0x10>)
 80023a6:	f001 fa07 	bl	80037b8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000423c 	.word	0x2000423c

080023b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <SystemInit+0x20>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <SystemInit+0x20>)
 80023c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002410 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023de:	e003      	b.n	80023e8 <LoopCopyDataInit>

080023e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023e6:	3104      	adds	r1, #4

080023e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023e8:	480b      	ldr	r0, [pc, #44]	; (8002418 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023f0:	d3f6      	bcc.n	80023e0 <CopyDataInit>
  ldr  r2, =_sbss
 80023f2:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023f4:	e002      	b.n	80023fc <LoopFillZerobss>

080023f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023f8:	f842 3b04 	str.w	r3, [r2], #4

080023fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002400:	d3f9      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002402:	f7ff ffd7 	bl	80023b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002406:	f007 fb15 	bl	8009a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240a:	f7fe f897 	bl	800053c <main>
  bx  lr    
 800240e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002410:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002414:	08009ba4 	.word	0x08009ba4
  ldr  r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800241c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002420:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002424:	20004620 	.word	0x20004620

08002428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <ADC_IRQHandler>

0800242a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242e:	2003      	movs	r0, #3
 8002430:	f000 fb5d 	bl	8002aee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002434:	2000      	movs	r0, #0
 8002436:	f7ff ff17 	bl	8002268 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800243a:	f7ff fa17 	bl	800186c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000008 	.word	0x20000008
 8002468:	2000461c 	.word	0x2000461c

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2000461c 	.word	0x2000461c

08002484 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e031      	b.n	80024fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fa0a 	bl	80018bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <HAL_ADC_Init+0x84>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	f043 0202 	orr.w	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f964 	bl	80027a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f023 0303 	bic.w	r3, r3, #3
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
 80024ee:	e001      	b.n	80024f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	ffffeefd 	.word	0xffffeefd

0800250c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1c>
 8002524:	2302      	movs	r3, #2
 8002526:	e12a      	b.n	800277e <HAL_ADC_ConfigChannel+0x272>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b09      	cmp	r3, #9
 8002536:	d93a      	bls.n	80025ae <HAL_ADC_ConfigChannel+0xa2>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002540:	d035      	beq.n	80025ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68d9      	ldr	r1, [r3, #12]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	3b1e      	subs	r3, #30
 8002558:	2207      	movs	r2, #7
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a87      	ldr	r2, [pc, #540]	; (800278c <HAL_ADC_ConfigChannel+0x280>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10a      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68d9      	ldr	r1, [r3, #12]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	061a      	lsls	r2, r3, #24
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002586:	e035      	b.n	80025f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68d9      	ldr	r1, [r3, #12]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	4603      	mov	r3, r0
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4403      	add	r3, r0
 80025a0:	3b1e      	subs	r3, #30
 80025a2:	409a      	lsls	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ac:	e022      	b.n	80025f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6919      	ldr	r1, [r3, #16]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	2207      	movs	r2, #7
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43da      	mvns	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	400a      	ands	r2, r1
 80025d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6919      	ldr	r1, [r3, #16]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	4603      	mov	r3, r0
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4403      	add	r3, r0
 80025ea:	409a      	lsls	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d824      	bhi.n	8002646 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b05      	subs	r3, #5
 800260e:	221f      	movs	r2, #31
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43da      	mvns	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	400a      	ands	r2, r1
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3b05      	subs	r3, #5
 8002638:	fa00 f203 	lsl.w	r2, r0, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	635a      	str	r2, [r3, #52]	; 0x34
 8002644:	e04c      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d824      	bhi.n	8002698 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b23      	subs	r3, #35	; 0x23
 8002660:	221f      	movs	r2, #31
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b23      	subs	r3, #35	; 0x23
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
 8002696:	e023      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b41      	subs	r3, #65	; 0x41
 80026aa:	221f      	movs	r2, #31
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43da      	mvns	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	400a      	ands	r2, r1
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b41      	subs	r3, #65	; 0x41
 80026d4:	fa00 f203 	lsl.w	r2, r0, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <HAL_ADC_ConfigChannel+0x284>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10a      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x1f4>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026f2:	d105      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_ADC_ConfigChannel+0x288>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <HAL_ADC_ConfigChannel+0x288>)
 80026fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a22      	ldr	r2, [pc, #136]	; (8002790 <HAL_ADC_ConfigChannel+0x284>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d109      	bne.n	800271e <HAL_ADC_ConfigChannel+0x212>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b12      	cmp	r3, #18
 8002710:	d105      	bne.n	800271e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_ADC_ConfigChannel+0x288>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <HAL_ADC_ConfigChannel+0x288>)
 8002718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800271c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_ADC_ConfigChannel+0x284>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d125      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x268>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_ADC_ConfigChannel+0x280>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d003      	beq.n	800273a <HAL_ADC_ConfigChannel+0x22e>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b11      	cmp	r3, #17
 8002738:	d11c      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_ADC_ConfigChannel+0x288>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <HAL_ADC_ConfigChannel+0x288>)
 8002740:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002744:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_ADC_ConfigChannel+0x280>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d111      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_ADC_ConfigChannel+0x28c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_ADC_ConfigChannel+0x290>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9a      	lsrs	r2, r3, #18
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002766:	e002      	b.n	800276e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3b01      	subs	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f9      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	10000012 	.word	0x10000012
 8002790:	40012000 	.word	0x40012000
 8002794:	40012300 	.word	0x40012300
 8002798:	20000000 	.word	0x20000000
 800279c:	431bde83 	.word	0x431bde83

080027a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027a8:	4b78      	ldr	r3, [pc, #480]	; (800298c <ADC_Init+0x1ec>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a77      	ldr	r2, [pc, #476]	; (800298c <ADC_Init+0x1ec>)
 80027ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027b4:	4b75      	ldr	r3, [pc, #468]	; (800298c <ADC_Init+0x1ec>)
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4973      	ldr	r1, [pc, #460]	; (800298c <ADC_Init+0x1ec>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	021a      	lsls	r2, r3, #8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6899      	ldr	r1, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	4a58      	ldr	r2, [pc, #352]	; (8002990 <ADC_Init+0x1f0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d022      	beq.n	800287a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002842:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	e00f      	b.n	800289a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002898:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0202 	bic.w	r2, r2, #2
 80028a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	005a      	lsls	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01b      	beq.n	8002900 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	3b01      	subs	r3, #1
 80028f4:	035a      	lsls	r2, r3, #13
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	e007      	b.n	8002910 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	3b01      	subs	r3, #1
 800292c:	051a      	lsls	r2, r3, #20
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6899      	ldr	r1, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002952:	025a      	lsls	r2, r3, #9
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	029a      	lsls	r2, r3, #10
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40012300 	.word	0x40012300
 8002990:	0f000001 	.word	0x0f000001

08002994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <__NVIC_SetPriorityGrouping+0x40>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c2:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <__NVIC_SetPriorityGrouping+0x40>)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	60d3      	str	r3, [r2, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000ed00 	.word	0xe000ed00
 80029d8:	05fa0000 	.word	0x05fa0000

080029dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db0b      	blt.n	8002a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	4907      	ldr	r1, [pc, #28]	; (8002a30 <__NVIC_EnableIRQ+0x38>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	db0a      	blt.n	8002a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <__NVIC_SetPriority+0x4c>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	440b      	add	r3, r1
 8002a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a5c:	e00a      	b.n	8002a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <__NVIC_SetPriority+0x50>)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3b04      	subs	r3, #4
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	440b      	add	r3, r1
 8002a72:	761a      	strb	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f1c3 0307 	rsb	r3, r3, #7
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	bf28      	it	cs
 8002aa6:	2304      	movcs	r3, #4
 8002aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d902      	bls.n	8002ab8 <NVIC_EncodePriority+0x30>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3b03      	subs	r3, #3
 8002ab6:	e000      	b.n	8002aba <NVIC_EncodePriority+0x32>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	4313      	orrs	r3, r2
         );
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff4c 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b16:	f7ff ff61 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002b1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	6978      	ldr	r0, [r7, #20]
 8002b22:	f7ff ffb1 	bl	8002a88 <NVIC_EncodePriority>
 8002b26:	4602      	mov	r2, r0
 8002b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff ff80 	bl	8002a34 <__NVIC_SetPriority>
}
 8002b34:	bf00      	nop
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff54 	bl	80029f8 <__NVIC_EnableIRQ>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e014      	b.n	8002b94 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	791b      	ldrb	r3, [r3, #4]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe ff0c 	bl	8001998 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb2:	d120      	bne.n	8002bf6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc2:	d118      	bne.n	8002bf6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f043 0201 	orr.w	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f82d 	bl	8002c50 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c04:	d120      	bne.n	8002c48 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c14:	d118      	bne.n	8002c48 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f043 0202 	orr.w	r2, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002c40:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f85d 	bl	8002d02 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	795b      	ldrb	r3, [r3, #5]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_DAC_ConfigChannel+0x18>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e03c      	b.n	8002cf6 <HAL_DAC_ConfigChannel+0x92>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2202      	movs	r2, #2
 8002c86:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6819      	ldr	r1, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	22c0      	movs	r2, #192	; 0xc0
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff fba2 	bl	800246c <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d008      	beq.n	8002d48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e052      	b.n	8002dee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0216 	bic.w	r2, r2, #22
 8002d56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d103      	bne.n	8002d78 <HAL_DMA_Abort+0x62>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0208 	bic.w	r2, r2, #8
 8002d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d98:	e013      	b.n	8002dc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d9a:	f7ff fb67 	bl	800246c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d90c      	bls.n	8002dc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e015      	b.n	8002dee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e4      	bne.n	8002d9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	223f      	movs	r2, #63	; 0x3f
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e00c      	b.n	8002e2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2205      	movs	r2, #5
 8002e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e039      	b.n	8002ec2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe fde0 	bl	8001a28 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8c:	f023 0107 	bic.w	r1, r3, #7
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_DMA2D_Init+0x90>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68d1      	ldr	r1, [r2, #12]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	ffffc000 	.word	0xffffc000

08002ed0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_DMA2D_ConfigLayer+0x20>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e079      	b.n	8002fe4 <HAL_DMA2D_ConfigLayer+0x114>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	3318      	adds	r3, #24
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_DMA2D_ConfigLayer+0x120>)
 8002f1c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b0a      	cmp	r3, #10
 8002f24:	d003      	beq.n	8002f2e <HAL_DMA2D_ConfigLayer+0x5e>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b09      	cmp	r3, #9
 8002f2c:	d107      	bne.n	8002f3e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e005      	b.n	8002f4a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d120      	bne.n	8002f92 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	ea02 0103 	and.w	r1, r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b0a      	cmp	r3, #10
 8002f78:	d003      	beq.n	8002f82 <HAL_DMA2D_ConfigLayer+0xb2>
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d127      	bne.n	8002fd2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f90:	e01f      	b.n	8002fd2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	ea02 0103 	and.w	r1, r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b0a      	cmp	r3, #10
 8002fba:	d003      	beq.n	8002fc4 <HAL_DMA2D_ConfigLayer+0xf4>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b09      	cmp	r3, #9
 8002fc2:	d106      	bne.n	8002fd2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002fd0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	ff03000f 	.word	0xff03000f

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e175      	b.n	8003300 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003014:	2201      	movs	r2, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	f040 8164 	bne.w	80032fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d00b      	beq.n	8003052 <HAL_GPIO_Init+0x5e>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d007      	beq.n	8003052 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003046:	2b11      	cmp	r3, #17
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b12      	cmp	r3, #18
 8003050:	d130      	bne.n	80030b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0201 	and.w	r2, r3, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x100>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b12      	cmp	r3, #18
 80030f2:	d123      	bne.n	800313c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	08da      	lsrs	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3208      	adds	r2, #8
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0203 	and.w	r2, r3, #3
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80be 	beq.w	80032fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	4b66      	ldr	r3, [pc, #408]	; (8003318 <HAL_GPIO_Init+0x324>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a65      	ldr	r2, [pc, #404]	; (8003318 <HAL_GPIO_Init+0x324>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_GPIO_Init+0x324>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003196:	4a61      	ldr	r2, [pc, #388]	; (800331c <HAL_GPIO_Init+0x328>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_GPIO_Init+0x32c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d037      	beq.n	8003232 <HAL_GPIO_Init+0x23e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_GPIO_Init+0x330>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d031      	beq.n	800322e <HAL_GPIO_Init+0x23a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a56      	ldr	r2, [pc, #344]	; (8003328 <HAL_GPIO_Init+0x334>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02b      	beq.n	800322a <HAL_GPIO_Init+0x236>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a55      	ldr	r2, [pc, #340]	; (800332c <HAL_GPIO_Init+0x338>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d025      	beq.n	8003226 <HAL_GPIO_Init+0x232>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a54      	ldr	r2, [pc, #336]	; (8003330 <HAL_GPIO_Init+0x33c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <HAL_GPIO_Init+0x22e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a53      	ldr	r2, [pc, #332]	; (8003334 <HAL_GPIO_Init+0x340>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d019      	beq.n	800321e <HAL_GPIO_Init+0x22a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_GPIO_Init+0x344>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0x226>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_GPIO_Init+0x348>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00d      	beq.n	8003216 <HAL_GPIO_Init+0x222>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_GPIO_Init+0x34c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_Init+0x21e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4f      	ldr	r2, [pc, #316]	; (8003344 <HAL_GPIO_Init+0x350>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_GPIO_Init+0x21a>
 800320a:	2309      	movs	r3, #9
 800320c:	e012      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800320e:	230a      	movs	r3, #10
 8003210:	e010      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003212:	2308      	movs	r3, #8
 8003214:	e00e      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003216:	2307      	movs	r3, #7
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800321a:	2306      	movs	r3, #6
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003232:	2300      	movs	r3, #0
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	; (800331c <HAL_GPIO_Init+0x328>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_GPIO_Init+0x354>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003276:	4a34      	ldr	r2, [pc, #208]	; (8003348 <HAL_GPIO_Init+0x354>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <HAL_GPIO_Init+0x354>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a0:	4a29      	ldr	r2, [pc, #164]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f ae86 	bls.w	8003014 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	40020800 	.word	0x40020800
 800332c:	40020c00 	.word	0x40020c00
 8003330:	40021000 	.word	0x40021000
 8003334:	40021400 	.word	0x40021400
 8003338:	40021800 	.word	0x40021800
 800333c:	40021c00 	.word	0x40021c00
 8003340:	40022000 	.word	0x40022000
 8003344:	40022400 	.word	0x40022400
 8003348:	40013c00 	.word	0x40013c00

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003368:	e003      	b.n	8003372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	041a      	lsls	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	619a      	str	r2, [r3, #24]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800338a:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f806 	bl	80033b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40013c00 	.word	0x40013c00

080033b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e07f      	b.n	80034da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fb3a 	bl	8001a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e006      	b.n	8003450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800344e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d104      	bne.n	8003462 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003460:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_I2C_Init+0x11c>)
 800346e:	430b      	orrs	r3, r1
 8003470:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003480:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	ea42 0103 	orr.w	r1, r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	021a      	lsls	r2, r3, #8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69d9      	ldr	r1, [r3, #28]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	02008000 	.word	0x02008000

080034e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d138      	bne.n	8003570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003508:	2302      	movs	r3, #2
 800350a:	e032      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800353a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	d139      	bne.n	8003608 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800359e:	2302      	movs	r3, #2
 80035a0:	e033      	b.n	800360a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	; 0x24
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0bf      	b.n	80037aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fa8a 	bl	8001b58 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800365a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6999      	ldr	r1, [r3, #24]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003670:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_LTDC_Init+0x19c>)
 800368c:	400b      	ands	r3, r1
 800368e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68d9      	ldr	r1, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <HAL_LTDC_Init+0x19c>)
 80036ba:	400b      	ands	r3, r1
 80036bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68d9      	ldr	r1, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1a      	ldr	r2, [r3, #32]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6919      	ldr	r1, [r3, #16]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <HAL_LTDC_Init+0x19c>)
 80036e8:	400b      	ands	r3, r1
 80036ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6919      	ldr	r1, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6959      	ldr	r1, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <HAL_LTDC_Init+0x19c>)
 8003716:	400b      	ands	r3, r1
 8003718:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6959      	ldr	r1, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0206 	orr.w	r2, r2, #6
 8003786:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	f000f800 	.word	0xf000f800

080037b8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d023      	beq.n	8003822 <HAL_LTDC_IRQHandler+0x6a>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01e      	beq.n	8003822 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2204      	movs	r2, #4
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003802:	f043 0201 	orr.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f86f 	bl	8003900 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d023      	beq.n	8003874 <HAL_LTDC_IRQHandler+0xbc>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01e      	beq.n	8003874 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0202 	bic.w	r2, r2, #2
 8003844:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2202      	movs	r2, #2
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003854:	f043 0202 	orr.w	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2204      	movs	r2, #4
 8003862:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f846 	bl	8003900 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01b      	beq.n	80038b6 <HAL_LTDC_IRQHandler+0xfe>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d016      	beq.n	80038b6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f82f 	bl	8003914 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01b      	beq.n	80038f8 <HAL_LTDC_IRQHandler+0x140>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0208 	bic.w	r2, r2, #8
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2208      	movs	r2, #8
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f818 	bl	8003928 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800393c:	b5b0      	push	{r4, r5, r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_LTDC_ConfigLayer+0x1a>
 8003952:	2302      	movs	r3, #2
 8003954:	e02c      	b.n	80039b0 <HAL_LTDC_ConfigLayer+0x74>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2134      	movs	r1, #52	; 0x34
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800397e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f811 	bl	80039b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2201      	movs	r2, #1
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bdb0      	pop	{r4, r5, r7, pc}

080039b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	; 0x24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	4413      	add	r3, r2
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	01db      	lsls	r3, r3, #7
 80039e4:	4413      	add	r3, r2
 80039e6:	3384      	adds	r3, #132	; 0x84
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	4611      	mov	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	01d2      	lsls	r2, r2, #7
 80039f4:	440a      	add	r2, r1
 80039f6:	3284      	adds	r2, #132	; 0x84
 80039f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80039fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0e:	4413      	add	r3, r2
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4619      	mov	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	01db      	lsls	r3, r3, #7
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3384      	adds	r3, #132	; 0x84
 8003a20:	4619      	mov	r1, r3
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a36:	4413      	add	r3, r2
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	01db      	lsls	r3, r3, #7
 8003a46:	4413      	add	r3, r2
 8003a48:	3384      	adds	r3, #132	; 0x84
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4611      	mov	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	01d2      	lsls	r2, r2, #7
 8003a56:	440a      	add	r2, r1
 8003a58:	3284      	adds	r2, #132	; 0x84
 8003a5a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a6e:	4413      	add	r3, r2
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4619      	mov	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3384      	adds	r3, #132	; 0x84
 8003a80:	4619      	mov	r1, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	01db      	lsls	r3, r3, #7
 8003a92:	4413      	add	r3, r2
 8003a94:	3384      	adds	r3, #132	; 0x84
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	01d2      	lsls	r2, r2, #7
 8003aa2:	440a      	add	r2, r1
 8003aa4:	3284      	adds	r2, #132	; 0x84
 8003aa6:	f023 0307 	bic.w	r3, r3, #7
 8003aaa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	01db      	lsls	r3, r3, #7
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3384      	adds	r3, #132	; 0x84
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	061b      	lsls	r3, r3, #24
 8003adc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	01db      	lsls	r3, r3, #7
 8003ae8:	4413      	add	r3, r2
 8003aea:	3384      	adds	r3, #132	; 0x84
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	01db      	lsls	r3, r3, #7
 8003af8:	4413      	add	r3, r2
 8003afa:	3384      	adds	r3, #132	; 0x84
 8003afc:	461a      	mov	r2, r3
 8003afe:	2300      	movs	r3, #0
 8003b00:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b08:	461a      	mov	r2, r3
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	01db      	lsls	r3, r3, #7
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3384      	adds	r3, #132	; 0x84
 8003b20:	4619      	mov	r1, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	01db      	lsls	r3, r3, #7
 8003b32:	4413      	add	r3, r2
 8003b34:	3384      	adds	r3, #132	; 0x84
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	01d2      	lsls	r2, r2, #7
 8003b42:	440a      	add	r2, r1
 8003b44:	3284      	adds	r2, #132	; 0x84
 8003b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	01db      	lsls	r3, r3, #7
 8003b56:	4413      	add	r3, r2
 8003b58:	3384      	adds	r3, #132	; 0x84
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	01db      	lsls	r3, r3, #7
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3384      	adds	r3, #132	; 0x84
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	01db      	lsls	r3, r3, #7
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3384      	adds	r3, #132	; 0x84
 8003b80:	4619      	mov	r1, r3
 8003b82:	4b58      	ldr	r3, [pc, #352]	; (8003ce4 <LTDC_SetConfig+0x32c>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	68f9      	ldr	r1, [r7, #12]
 8003b92:	6809      	ldr	r1, [r1, #0]
 8003b94:	4608      	mov	r0, r1
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	01c9      	lsls	r1, r1, #7
 8003b9a:	4401      	add	r1, r0
 8003b9c:	3184      	adds	r1, #132	; 0x84
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	01db      	lsls	r3, r3, #7
 8003bac:	4413      	add	r3, r2
 8003bae:	3384      	adds	r3, #132	; 0x84
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	01db      	lsls	r3, r3, #7
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3384      	adds	r3, #132	; 0x84
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	01db      	lsls	r3, r3, #7
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3384      	adds	r3, #132	; 0x84
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003be4:	2304      	movs	r3, #4
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e01b      	b.n	8003c22 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	e014      	b.n	8003c22 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d00b      	beq.n	8003c18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d007      	beq.n	8003c18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d003      	beq.n	8003c18 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d102      	bne.n	8003c1e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	e001      	b.n	8003c22 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	01db      	lsls	r3, r3, #7
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3384      	adds	r3, #132	; 0x84
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	4611      	mov	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	01d2      	lsls	r2, r2, #7
 8003c3c:	440a      	add	r2, r1
 8003c3e:	3284      	adds	r2, #132	; 0x84
 8003c40:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003c44:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	041a      	lsls	r2, r3, #16
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	1acb      	subs	r3, r1, r3
 8003c5c:	69f9      	ldr	r1, [r7, #28]
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	3303      	adds	r3, #3
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	6809      	ldr	r1, [r1, #0]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	01c9      	lsls	r1, r1, #7
 8003c6e:	4401      	add	r1, r0
 8003c70:	3184      	adds	r1, #132	; 0x84
 8003c72:	4313      	orrs	r3, r2
 8003c74:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	01db      	lsls	r3, r3, #7
 8003c80:	4413      	add	r3, r2
 8003c82:	3384      	adds	r3, #132	; 0x84
 8003c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	01db      	lsls	r3, r3, #7
 8003c90:	440b      	add	r3, r1
 8003c92:	3384      	adds	r3, #132	; 0x84
 8003c94:	4619      	mov	r1, r3
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <LTDC_SetConfig+0x330>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	01db      	lsls	r3, r3, #7
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3384      	adds	r3, #132	; 0x84
 8003caa:	461a      	mov	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	01db      	lsls	r3, r3, #7
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3384      	adds	r3, #132	; 0x84
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	01d2      	lsls	r2, r2, #7
 8003ccc:	440a      	add	r2, r1
 8003cce:	3284      	adds	r2, #132	; 0x84
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6013      	str	r3, [r2, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3724      	adds	r7, #36	; 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	fffff8f8 	.word	0xfffff8f8
 8003ce8:	fffff800 	.word	0xfffff800

08003cec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40007000 	.word	0x40007000

08003d0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d16:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	; 0x40
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d3a:	f7fe fb97 	bl	800246c <HAL_GetTick>
 8003d3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d40:	e009      	b.n	8003d56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d42:	f7fe fb93 	bl	800246c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d50:	d901      	bls.n	8003d56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e022      	b.n	8003d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d62:	d1ee      	bne.n	8003d42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d64:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0f      	ldr	r2, [pc, #60]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d70:	f7fe fb7c 	bl	800246c <HAL_GetTick>
 8003d74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d76:	e009      	b.n	8003d8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d78:	f7fe fb78 	bl	800246c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d86:	d901      	bls.n	8003d8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e007      	b.n	8003d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d98:	d1ee      	bne.n	8003d78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40007000 	.word	0x40007000

08003dac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e291      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8087 	beq.w	8003ede <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd0:	4b96      	ldr	r3, [pc, #600]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d00c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ddc:	4b93      	ldr	r3, [pc, #588]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d112      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62>
 8003de8:	4b90      	ldr	r3, [pc, #576]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df4:	d10b      	bne.n	8003e0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df6:	4b8d      	ldr	r3, [pc, #564]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d06c      	beq.n	8003edc <HAL_RCC_OscConfig+0x130>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d168      	bne.n	8003edc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e26b      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_OscConfig+0x7a>
 8003e18:	4b84      	ldr	r3, [pc, #528]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a83      	ldr	r2, [pc, #524]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e02e      	b.n	8003e84 <HAL_RCC_OscConfig+0xd8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x9c>
 8003e2e:	4b7f      	ldr	r3, [pc, #508]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7e      	ldr	r2, [pc, #504]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b7c      	ldr	r3, [pc, #496]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a7b      	ldr	r2, [pc, #492]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e01d      	b.n	8003e84 <HAL_RCC_OscConfig+0xd8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0xc0>
 8003e52:	4b76      	ldr	r3, [pc, #472]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a75      	ldr	r2, [pc, #468]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b73      	ldr	r3, [pc, #460]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a72      	ldr	r2, [pc, #456]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0xd8>
 8003e6c:	4b6f      	ldr	r3, [pc, #444]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6e      	ldr	r2, [pc, #440]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b6c      	ldr	r3, [pc, #432]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a6b      	ldr	r2, [pc, #428]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe faee 	bl	800246c <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe faea 	bl	800246c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e21f      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	4b61      	ldr	r3, [pc, #388]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0xe8>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fada 	bl	800246c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fad6 	bl	800246c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e20b      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	4b57      	ldr	r3, [pc, #348]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x110>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d069      	beq.n	8003fbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eea:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef6:	4b4d      	ldr	r3, [pc, #308]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d11c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x190>
 8003f02:	4b4a      	ldr	r3, [pc, #296]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d116      	bne.n	8003f3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_RCC_OscConfig+0x17a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e1df      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	493d      	ldr	r1, [pc, #244]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3a:	e040      	b.n	8003fbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d023      	beq.n	8003f8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a38      	ldr	r2, [pc, #224]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe fa8c 	bl	800246c <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f58:	f7fe fa88 	bl	800246c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e1bd      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4929      	ldr	r1, [pc, #164]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
 8003f8a:	e018      	b.n	8003fbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fe fa68 	bl	800246c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa0:	f7fe fa64 	bl	800246c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e199      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d038      	beq.n	800403c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d019      	beq.n	8004006 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	4a15      	ldr	r2, [pc, #84]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fe fa45 	bl	800246c <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe6:	f7fe fa41 	bl	800246c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e176      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x23a>
 8004004:	e01a      	b.n	800403c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_OscConfig+0x280>)
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	4a08      	ldr	r2, [pc, #32]	; (800402c <HAL_RCC_OscConfig+0x280>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004012:	f7fe fa2b 	bl	800246c <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004018:	e00a      	b.n	8004030 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401a:	f7fe fa27 	bl	800246c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d903      	bls.n	8004030 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e15c      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
 800402c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	4b91      	ldr	r3, [pc, #580]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ee      	bne.n	800401a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80a4 	beq.w	8004192 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10d      	bne.n	8004072 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a87      	ldr	r2, [pc, #540]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b85      	ldr	r3, [pc, #532]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004072:	4b82      	ldr	r3, [pc, #520]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d118      	bne.n	80040b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800407e:	4b7f      	ldr	r3, [pc, #508]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7e      	ldr	r2, [pc, #504]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7fe f9ef 	bl	800246c <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fe f9eb 	bl	800246c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b64      	cmp	r3, #100	; 0x64
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e120      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a4:	4b75      	ldr	r3, [pc, #468]	; (800427c <HAL_RCC_OscConfig+0x4d0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x31a>
 80040b8:	4b6f      	ldr	r3, [pc, #444]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a6e      	ldr	r2, [pc, #440]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	e02d      	b.n	8004122 <HAL_RCC_OscConfig+0x376>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x33c>
 80040ce:	4b6a      	ldr	r3, [pc, #424]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a69      	ldr	r2, [pc, #420]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	4b67      	ldr	r3, [pc, #412]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a66      	ldr	r2, [pc, #408]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e01c      	b.n	8004122 <HAL_RCC_OscConfig+0x376>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_OscConfig+0x35e>
 80040f0:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a60      	ldr	r2, [pc, #384]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040f6:	f043 0304 	orr.w	r3, r3, #4
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a5d      	ldr	r2, [pc, #372]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	e00b      	b.n	8004122 <HAL_RCC_OscConfig+0x376>
 800410a:	4b5b      	ldr	r3, [pc, #364]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a5a      	ldr	r2, [pc, #360]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	4b58      	ldr	r3, [pc, #352]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a57      	ldr	r2, [pc, #348]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d015      	beq.n	8004156 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fe f99f 	bl	800246c <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fe f99b 	bl	800246c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0ce      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004148:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ee      	beq.n	8004132 <HAL_RCC_OscConfig+0x386>
 8004154:	e014      	b.n	8004180 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fe f989 	bl	800246c <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fe f985 	bl	800246c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0b8      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ee      	bne.n	800415e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004186:	4b3c      	ldr	r3, [pc, #240]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a3b      	ldr	r2, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 80a4 	beq.w	80042e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419c:	4b36      	ldr	r3, [pc, #216]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d06b      	beq.n	8004280 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d149      	bne.n	8004244 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b0:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a30      	ldr	r2, [pc, #192]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80041b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe f956 	bl	800246c <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fe f952 	bl	800246c <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e087      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	4b28      	ldr	r3, [pc, #160]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	019b      	lsls	r3, r3, #6
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	4313      	orrs	r3, r2
 8004208:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800420a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800420e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004210:	4b19      	ldr	r3, [pc, #100]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fe f926 	bl	800246c <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004224:	f7fe f922 	bl	800246c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e057      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x478>
 8004242:	e04f      	b.n	80042e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0b      	ldr	r2, [pc, #44]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800424a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fe f90c 	bl	800246c <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fe f908 	bl	800246c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e03d      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	4b03      	ldr	r3, [pc, #12]	; (8004278 <HAL_RCC_OscConfig+0x4cc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x4ac>
 8004276:	e035      	b.n	80042e4 <HAL_RCC_OscConfig+0x538>
 8004278:	40023800 	.word	0x40023800
 800427c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCC_OscConfig+0x544>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d028      	beq.n	80042e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d121      	bne.n	80042e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d11a      	bne.n	80042e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042b0:	4013      	ands	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d111      	bne.n	80042e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	3b01      	subs	r3, #1
 80042ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800

080042f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0d0      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d910      	bls.n	800433c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 020f 	bic.w	r2, r3, #15
 8004322:	4965      	ldr	r1, [pc, #404]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b63      	ldr	r3, [pc, #396]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0b8      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004354:	4b59      	ldr	r3, [pc, #356]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a58      	ldr	r2, [pc, #352]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 800435a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800436c:	4b53      	ldr	r3, [pc, #332]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a52      	ldr	r2, [pc, #328]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004376:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004378:	4b50      	ldr	r3, [pc, #320]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	494d      	ldr	r1, [pc, #308]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d040      	beq.n	8004418 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d115      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e07f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e073      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06b      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b39      	ldr	r3, [pc, #228]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4936      	ldr	r1, [pc, #216]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fe f840 	bl	800246c <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fe f83c 	bl	800246c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e053      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d210      	bcs.n	8004448 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 020f 	bic.w	r2, r3, #15
 800442e:	4922      	ldr	r1, [pc, #136]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e032      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4916      	ldr	r1, [pc, #88]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	490e      	ldr	r1, [pc, #56]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004486:	f000 f821 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 800448a:	4602      	mov	r2, r0
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	490a      	ldr	r1, [pc, #40]	; (80044c0 <HAL_RCC_ClockConfig+0x1cc>)
 8004498:	5ccb      	ldrb	r3, [r1, r3]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1d0>)
 80044a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_RCC_ClockConfig+0x1d4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd fede 	bl	8002268 <HAL_InitTick>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023c00 	.word	0x40023c00
 80044bc:	40023800 	.word	0x40023800
 80044c0:	08009b7c 	.word	0x08009b7c
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000004 	.word	0x20000004

080044cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	b5b0      	push	{r4, r5, r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044d2:	2100      	movs	r1, #0
 80044d4:	6079      	str	r1, [r7, #4]
 80044d6:	2100      	movs	r1, #0
 80044d8:	60f9      	str	r1, [r7, #12]
 80044da:	2100      	movs	r1, #0
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80044de:	2100      	movs	r1, #0
 80044e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e2:	4952      	ldr	r1, [pc, #328]	; (800462c <HAL_RCC_GetSysClockFreq+0x160>)
 80044e4:	6889      	ldr	r1, [r1, #8]
 80044e6:	f001 010c 	and.w	r1, r1, #12
 80044ea:	2908      	cmp	r1, #8
 80044ec:	d00d      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0x3e>
 80044ee:	2908      	cmp	r1, #8
 80044f0:	f200 8094 	bhi.w	800461c <HAL_RCC_GetSysClockFreq+0x150>
 80044f4:	2900      	cmp	r1, #0
 80044f6:	d002      	beq.n	80044fe <HAL_RCC_GetSysClockFreq+0x32>
 80044f8:	2904      	cmp	r1, #4
 80044fa:	d003      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x38>
 80044fc:	e08e      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044fe:	4b4c      	ldr	r3, [pc, #304]	; (8004630 <HAL_RCC_GetSysClockFreq+0x164>)
 8004500:	60bb      	str	r3, [r7, #8]
      break;
 8004502:	e08e      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004504:	4b4b      	ldr	r3, [pc, #300]	; (8004634 <HAL_RCC_GetSysClockFreq+0x168>)
 8004506:	60bb      	str	r3, [r7, #8]
      break;
 8004508:	e08b      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800450a:	4948      	ldr	r1, [pc, #288]	; (800462c <HAL_RCC_GetSysClockFreq+0x160>)
 800450c:	6849      	ldr	r1, [r1, #4]
 800450e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004512:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004514:	4945      	ldr	r1, [pc, #276]	; (800462c <HAL_RCC_GetSysClockFreq+0x160>)
 8004516:	6849      	ldr	r1, [r1, #4]
 8004518:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800451c:	2900      	cmp	r1, #0
 800451e:	d024      	beq.n	800456a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004520:	4942      	ldr	r1, [pc, #264]	; (800462c <HAL_RCC_GetSysClockFreq+0x160>)
 8004522:	6849      	ldr	r1, [r1, #4]
 8004524:	0989      	lsrs	r1, r1, #6
 8004526:	4608      	mov	r0, r1
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004530:	f04f 0500 	mov.w	r5, #0
 8004534:	ea00 0204 	and.w	r2, r0, r4
 8004538:	ea01 0305 	and.w	r3, r1, r5
 800453c:	493d      	ldr	r1, [pc, #244]	; (8004634 <HAL_RCC_GetSysClockFreq+0x168>)
 800453e:	fb01 f003 	mul.w	r0, r1, r3
 8004542:	2100      	movs	r1, #0
 8004544:	fb01 f102 	mul.w	r1, r1, r2
 8004548:	1844      	adds	r4, r0, r1
 800454a:	493a      	ldr	r1, [pc, #232]	; (8004634 <HAL_RCC_GetSysClockFreq+0x168>)
 800454c:	fba2 0101 	umull	r0, r1, r2, r1
 8004550:	1863      	adds	r3, r4, r1
 8004552:	4619      	mov	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	461a      	mov	r2, r3
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	f7fb fe58 	bl	8000210 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e04a      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456a:	4b30      	ldr	r3, [pc, #192]	; (800462c <HAL_RCC_GetSysClockFreq+0x160>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	099b      	lsrs	r3, r3, #6
 8004570:	461a      	mov	r2, r3
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	f240 10ff 	movw	r0, #511	; 0x1ff
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	ea02 0400 	and.w	r4, r2, r0
 8004582:	ea03 0501 	and.w	r5, r3, r1
 8004586:	4620      	mov	r0, r4
 8004588:	4629      	mov	r1, r5
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	014b      	lsls	r3, r1, #5
 8004594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004598:	0142      	lsls	r2, r0, #5
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	1b00      	subs	r0, r0, r4
 80045a0:	eb61 0105 	sbc.w	r1, r1, r5
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	018b      	lsls	r3, r1, #6
 80045ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045b2:	0182      	lsls	r2, r0, #6
 80045b4:	1a12      	subs	r2, r2, r0
 80045b6:	eb63 0301 	sbc.w	r3, r3, r1
 80045ba:	f04f 0000 	mov.w	r0, #0
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	00d9      	lsls	r1, r3, #3
 80045c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045c8:	00d0      	lsls	r0, r2, #3
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	1912      	adds	r2, r2, r4
 80045d0:	eb45 0303 	adc.w	r3, r5, r3
 80045d4:	f04f 0000 	mov.w	r0, #0
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	0299      	lsls	r1, r3, #10
 80045de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045e2:	0290      	lsls	r0, r2, #10
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	f7fb fe0c 	bl	8000210 <__aeabi_uldivmod>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4613      	mov	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <HAL_RCC_GetSysClockFreq+0x160>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	3301      	adds	r3, #1
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	60bb      	str	r3, [r7, #8]
      break;
 800461a:	e002      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_RCC_GetSysClockFreq+0x164>)
 800461e:	60bb      	str	r3, [r7, #8]
      break;
 8004620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004622:	68bb      	ldr	r3, [r7, #8]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bdb0      	pop	{r4, r5, r7, pc}
 800462c:	40023800 	.word	0x40023800
 8004630:	00f42400 	.word	0x00f42400
 8004634:	017d7840 	.word	0x017d7840

08004638 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <HAL_RCC_GetHCLKFreq+0x14>)
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000000 	.word	0x20000000

08004650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004654:	f7ff fff0 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0a9b      	lsrs	r3, r3, #10
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4903      	ldr	r1, [pc, #12]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	08009b8c 	.word	0x08009b8c

08004678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800467c:	f7ff ffdc 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0b5b      	lsrs	r3, r3, #13
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	; (800469c <HAL_RCC_GetPCLK2Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08009b8c 	.word	0x08009b8c

080046a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	220f      	movs	r2, #15
 80046ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_RCC_GetClockConfig+0x5c>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0203 	and.w	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046bc:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <HAL_RCC_GetClockConfig+0x5c>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <HAL_RCC_GetClockConfig+0x5c>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_GetClockConfig+0x5c>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	08db      	lsrs	r3, r3, #3
 80046da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046e2:	4b07      	ldr	r3, [pc, #28]	; (8004700 <HAL_RCC_GetClockConfig+0x60>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 020f 	and.w	r2, r3, #15
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	601a      	str	r2, [r3, #0]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	40023c00 	.word	0x40023c00

08004704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d012      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800472c:	4b69      	ldr	r3, [pc, #420]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a68      	ldr	r2, [pc, #416]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004732:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004736:	6093      	str	r3, [r2, #8]
 8004738:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	4964      	ldr	r1, [pc, #400]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800474e:	2301      	movs	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800475e:	4b5d      	ldr	r3, [pc, #372]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	4959      	ldr	r1, [pc, #356]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477c:	d101      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d017      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800479a:	4b4e      	ldr	r3, [pc, #312]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	494a      	ldr	r1, [pc, #296]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b8:	d101      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 808b 	beq.w	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047e8:	4b3a      	ldr	r3, [pc, #232]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	4a39      	ldr	r2, [pc, #228]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f2:	6413      	str	r3, [r2, #64]	; 0x40
 80047f4:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004800:	4b35      	ldr	r3, [pc, #212]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a34      	ldr	r2, [pc, #208]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480c:	f7fd fe2e 	bl	800246c <HAL_GetTick>
 8004810:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004814:	f7fd fe2a 	bl	800246c <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e357      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004826:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004832:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d035      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	429a      	cmp	r2, r3
 800484e:	d02e      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004850:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004858:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800485a:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004870:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004872:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004878:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d114      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fd fdf2 	bl	800246c <HAL_GetTick>
 8004888:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488a:	e00a      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488c:	f7fd fdee 	bl	800246c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	; 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e319      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ee      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ba:	d111      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048c8:	4b04      	ldr	r3, [pc, #16]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048ca:	400b      	ands	r3, r1
 80048cc:	4901      	ldr	r1, [pc, #4]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
 80048d2:	e00b      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
 80048dc:	0ffffcff 	.word	0x0ffffcff
 80048e0:	4bb1      	ldr	r3, [pc, #708]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4ab0      	ldr	r2, [pc, #704]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048ea:	6093      	str	r3, [r2, #8]
 80048ec:	4bae      	ldr	r3, [pc, #696]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f8:	49ab      	ldr	r1, [pc, #684]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800490a:	4ba7      	ldr	r3, [pc, #668]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800490c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004910:	4aa5      	ldr	r2, [pc, #660]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004916:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800491a:	4ba3      	ldr	r3, [pc, #652]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800491c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	49a0      	ldr	r1, [pc, #640]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004938:	4b9b      	ldr	r3, [pc, #620]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004946:	4998      	ldr	r1, [pc, #608]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800495a:	4b93      	ldr	r3, [pc, #588]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004968:	498f      	ldr	r1, [pc, #572]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800497c:	4b8a      	ldr	r3, [pc, #552]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498a:	4987      	ldr	r1, [pc, #540]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800499e:	4b82      	ldr	r3, [pc, #520]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	497e      	ldr	r1, [pc, #504]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c0:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	4976      	ldr	r1, [pc, #472]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e2:	4b71      	ldr	r3, [pc, #452]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	f023 020c 	bic.w	r2, r3, #12
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f0:	496d      	ldr	r1, [pc, #436]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a04:	4b68      	ldr	r3, [pc, #416]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a12:	4965      	ldr	r1, [pc, #404]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a26:	4b60      	ldr	r3, [pc, #384]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a34:	495c      	ldr	r1, [pc, #368]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a48:	4b57      	ldr	r3, [pc, #348]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	4954      	ldr	r1, [pc, #336]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a6a:	4b4f      	ldr	r3, [pc, #316]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a78:	494b      	ldr	r1, [pc, #300]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a8c:	4b46      	ldr	r3, [pc, #280]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	4943      	ldr	r1, [pc, #268]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004aae:	4b3e      	ldr	r3, [pc, #248]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abc:	493a      	ldr	r1, [pc, #232]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ad0:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ade:	4932      	ldr	r1, [pc, #200]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d011      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b00:	4929      	ldr	r1, [pc, #164]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b10:	d101      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b12:	2301      	movs	r3, #1
 8004b14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b22:	2301      	movs	r3, #1
 8004b24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b32:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	4919      	ldr	r1, [pc, #100]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b64:	4910      	ldr	r1, [pc, #64]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d006      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 80d9 	beq.w	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8c:	f7fd fc6e 	bl	800246c <HAL_GetTick>
 8004b90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b92:	e00b      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b94:	f7fd fc6a 	bl	800246c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d904      	bls.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e197      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bac:	4b6c      	ldr	r3, [pc, #432]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ed      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d021      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11d      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bcc:	4b64      	ldr	r3, [pc, #400]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bda:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be0:	0e1b      	lsrs	r3, r3, #24
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	019a      	lsls	r2, r3, #6
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	071b      	lsls	r3, r3, #28
 8004c00:	4957      	ldr	r1, [pc, #348]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02e      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c32:	d129      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c34:	4b4a      	ldr	r3, [pc, #296]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3a:	0c1b      	lsrs	r3, r3, #16
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c42:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c48:	0f1b      	lsrs	r3, r3, #28
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	019a      	lsls	r2, r3, #6
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	071b      	lsls	r3, r3, #28
 8004c68:	493d      	ldr	r1, [pc, #244]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c70:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c76:	f023 021f 	bic.w	r2, r3, #31
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	4937      	ldr	r1, [pc, #220]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c94:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9a:	0e1b      	lsrs	r3, r3, #24
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ca2:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca8:	0f1b      	lsrs	r3, r3, #28
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	019a      	lsls	r2, r3, #6
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	071b      	lsls	r3, r3, #28
 8004cc8:	4925      	ldr	r1, [pc, #148]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d011      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	019a      	lsls	r2, r3, #6
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	041b      	lsls	r3, r3, #16
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	061b      	lsls	r3, r3, #24
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	071b      	lsls	r3, r3, #28
 8004cf8:	4919      	ldr	r1, [pc, #100]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0c:	f7fd fbae 	bl	800246c <HAL_GetTick>
 8004d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d14:	f7fd fbaa 	bl	800246c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e0d7      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d26:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	f040 80cd 	bne.w	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d3a:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d46:	f7fd fb91 	bl	800246c <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d4e:	f7fd fb8d 	bl	800246c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b64      	cmp	r3, #100	; 0x64
 8004d5a:	d903      	bls.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e0ba      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d64:	4b5e      	ldr	r3, [pc, #376]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d70:	d0ed      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02e      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d12a      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d9a:	4b51      	ldr	r3, [pc, #324]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004da8:	4b4d      	ldr	r3, [pc, #308]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	0f1b      	lsrs	r3, r3, #28
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	019a      	lsls	r2, r3, #6
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	061b      	lsls	r3, r3, #24
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	071b      	lsls	r3, r3, #28
 8004dce:	4944      	ldr	r1, [pc, #272]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dd6:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ddc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	3b01      	subs	r3, #1
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	493d      	ldr	r1, [pc, #244]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d022      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e04:	d11d      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e06:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	0e1b      	lsrs	r3, r3, #24
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e14:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	0f1b      	lsrs	r3, r3, #28
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	019a      	lsls	r2, r3, #6
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	061b      	lsls	r3, r3, #24
 8004e34:	431a      	orrs	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	071b      	lsls	r3, r3, #28
 8004e3a:	4929      	ldr	r1, [pc, #164]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d028      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e4e:	4b24      	ldr	r3, [pc, #144]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	0e1b      	lsrs	r3, r3, #24
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e5c:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	0c1b      	lsrs	r3, r3, #16
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	019a      	lsls	r2, r3, #6
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	431a      	orrs	r2, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	4917      	ldr	r1, [pc, #92]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	4911      	ldr	r1, [pc, #68]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0e      	ldr	r2, [pc, #56]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eac:	f7fd fade 	bl	800246c <HAL_GetTick>
 8004eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eb4:	f7fd fada 	bl	800246c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	; 0x64
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e007      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ec6:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed2:	d1ef      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800

08004ee4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e081      	b.n	8004ffa <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7f5b      	ldrb	r3, [r3, #29]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d105      	bne.n	8004f0c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fc feee 	bl	8001ce8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	22ca      	movs	r2, #202	; 0xca
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2253      	movs	r2, #83	; 0x53
 8004f20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fb16 	bl	8005554 <RTC_EnterInitMode>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	22ff      	movs	r2, #255	; 0xff
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e05c      	b.n	8004ffa <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b2e      	ldr	r3, [pc, #184]	; (8005004 <HAL_RTC_Init+0x120>)
 8004f4c:	400b      	ands	r3, r1
 8004f4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68d2      	ldr	r2, [r2, #12]
 8004f76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6919      	ldr	r1, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	041a      	lsls	r2, r3, #16
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f9a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10e      	bne.n	8004fc8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 faaa 	bl	8005504 <HAL_RTC_WaitForSynchro>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	22ff      	movs	r2, #255	; 0xff
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e018      	b.n	8004ffa <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0208 	bic.w	r2, r2, #8
 8004fd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	22ff      	movs	r2, #255	; 0xff
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	ff8fffbf 	.word	0xff8fffbf

08005008 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	7f1b      	ldrb	r3, [r3, #28]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_RTC_SetTime+0x1c>
 8005020:	2302      	movs	r3, #2
 8005022:	e0a8      	b.n	8005176 <HAL_RTC_SetTime+0x16e>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2202      	movs	r2, #2
 800502e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d126      	bne.n	8005084 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2200      	movs	r2, #0
 8005048:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 faac 	bl	80055ac <RTC_ByteToBcd2>
 8005054:	4603      	mov	r3, r0
 8005056:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 faa5 	bl	80055ac <RTC_ByteToBcd2>
 8005062:	4603      	mov	r3, r0
 8005064:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005066:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	789b      	ldrb	r3, [r3, #2]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fa9d 	bl	80055ac <RTC_ByteToBcd2>
 8005072:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005074:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	7b1b      	ldrb	r3, [r3, #12]
 800507c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e018      	b.n	80050b6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80050a4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80050aa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	7b1b      	ldrb	r3, [r3, #12]
 80050b0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	22ca      	movs	r2, #202	; 0xca
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2253      	movs	r2, #83	; 0x53
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fa44 	bl	8005554 <RTC_EnterInitMode>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00b      	beq.n	80050ea <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	22ff      	movs	r2, #255	; 0xff
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2204      	movs	r2, #4
 80050de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e045      	b.n	8005176 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	6979      	ldr	r1, [r7, #20]
 80050f0:	4b23      	ldr	r3, [pc, #140]	; (8005180 <HAL_RTC_SetTime+0x178>)
 80050f2:	400b      	ands	r3, r1
 80050f4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005104:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	431a      	orrs	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800512c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d111      	bne.n	8005160 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f9e1 	bl	8005504 <HAL_RTC_WaitForSynchro>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	22ff      	movs	r2, #255	; 0xff
 800514e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2204      	movs	r2, #4
 8005154:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e00a      	b.n	8005176 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005174:	2300      	movs	r3, #0
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	bd90      	pop	{r4, r7, pc}
 800517e:	bf00      	nop
 8005180:	007f7f7f 	.word	0x007f7f7f

08005184 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	7f1b      	ldrb	r3, [r3, #28]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_RTC_SetDate+0x1c>
 800519c:	2302      	movs	r3, #2
 800519e:	e092      	b.n	80052c6 <HAL_RTC_SetDate+0x142>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2202      	movs	r2, #2
 80051aa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10e      	bne.n	80051d0 <HAL_RTC_SetDate+0x4c>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	f023 0310 	bic.w	r3, r3, #16
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	330a      	adds	r3, #10
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d11c      	bne.n	8005210 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	78db      	ldrb	r3, [r3, #3]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f9e6 	bl	80055ac <RTC_ByteToBcd2>
 80051e0:	4603      	mov	r3, r0
 80051e2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 f9df 	bl	80055ac <RTC_ByteToBcd2>
 80051ee:	4603      	mov	r3, r0
 80051f0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80051f2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	789b      	ldrb	r3, [r3, #2]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 f9d7 	bl	80055ac <RTC_ByteToBcd2>
 80051fe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005200:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e00e      	b.n	800522e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	78db      	ldrb	r3, [r3, #3]
 8005214:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800521c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005222:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	22ca      	movs	r2, #202	; 0xca
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2253      	movs	r2, #83	; 0x53
 800523c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f988 	bl	8005554 <RTC_EnterInitMode>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	22ff      	movs	r2, #255	; 0xff
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2204      	movs	r2, #4
 8005256:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e031      	b.n	80052c6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	6979      	ldr	r1, [r7, #20]
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RTC_SetDate+0x14c>)
 800526a:	400b      	ands	r3, r1
 800526c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800527c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d111      	bne.n	80052b0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f939 	bl	8005504 <HAL_RTC_WaitForSynchro>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	22ff      	movs	r2, #255	; 0xff
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2204      	movs	r2, #4
 80052a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e00a      	b.n	80052c6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	22ff      	movs	r2, #255	; 0xff
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80052c4:	2300      	movs	r3, #0
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd90      	pop	{r4, r7, pc}
 80052ce:	bf00      	nop
 80052d0:	00ffff3f 	.word	0x00ffff3f

080052d4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	7f1b      	ldrb	r3, [r3, #28]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_RTC_SetAlarm+0x24>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e101      	b.n	80054fc <HAL_RTC_SetAlarm+0x228>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2202      	movs	r2, #2
 8005302:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d137      	bne.n	800537a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f942 	bl	80055ac <RTC_ByteToBcd2>
 8005328:	4603      	mov	r3, r0
 800532a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 f93b 	bl	80055ac <RTC_ByteToBcd2>
 8005336:	4603      	mov	r3, r0
 8005338:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800533a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	789b      	ldrb	r3, [r3, #2]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 f933 	bl	80055ac <RTC_ByteToBcd2>
 8005346:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005348:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	7b1b      	ldrb	r3, [r3, #12]
 8005350:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005352:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f925 	bl	80055ac <RTC_ByteToBcd2>
 8005362:	4603      	mov	r3, r0
 8005364:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005366:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800536e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005374:	4313      	orrs	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	e023      	b.n	80053c2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800539a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80053a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	7b1b      	ldrb	r3, [r3, #12]
 80053a6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80053a8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80053b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80053b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80053be:	4313      	orrs	r3, r2
 80053c0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	22ca      	movs	r2, #202	; 0xca
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2253      	movs	r2, #83	; 0x53
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e6:	d13f      	bne.n	8005468 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053f6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005406:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005408:	f7fd f830 	bl	800246c <HAL_GetTick>
 800540c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800540e:	e013      	b.n	8005438 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005410:	f7fd f82c 	bl	800246c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800541e:	d90b      	bls.n	8005438 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	22ff      	movs	r2, #255	; 0xff
 8005426:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2203      	movs	r2, #3
 800542c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e061      	b.n	80054fc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0e4      	beq.n	8005410 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005464:	609a      	str	r2, [r3, #8]
 8005466:	e03e      	b.n	80054e6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005476:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005486:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005488:	f7fc fff0 	bl	800246c <HAL_GetTick>
 800548c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800548e:	e013      	b.n	80054b8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005490:	f7fc ffec 	bl	800246c <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549e:	d90b      	bls.n	80054b8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	22ff      	movs	r2, #255	; 0xff
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2203      	movs	r2, #3
 80054ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e021      	b.n	80054fc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0e4      	beq.n	8005490 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	22ff      	movs	r2, #255	; 0xff
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3724      	adds	r7, #36	; 0x24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd90      	pop	{r4, r7, pc}

08005504 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800551e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005520:	f7fc ffa4 	bl	800246c <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005526:	e009      	b.n	800553c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005528:	f7fc ffa0 	bl	800246c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005536:	d901      	bls.n	800553c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e007      	b.n	800554c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0ee      	beq.n	8005528 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d119      	bne.n	80055a2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f04f 32ff 	mov.w	r2, #4294967295
 8005576:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005578:	f7fc ff78 	bl	800246c <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800557e:	e009      	b.n	8005594 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005580:	f7fc ff74 	bl	800246c <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800558e:	d901      	bls.n	8005594 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e007      	b.n	80055a4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0ee      	beq.n	8005580 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80055ba:	e005      	b.n	80055c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	3b0a      	subs	r3, #10
 80055c6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	2b09      	cmp	r3, #9
 80055cc:	d8f6      	bhi.n	80055bc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	4313      	orrs	r3, r2
 80055da:	b2db      	uxtb	r3, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	7f1b      	ldrb	r3, [r3, #28]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_RTCEx_SetTimeStamp+0x1c>
 8005600:	2302      	movs	r3, #2
 8005602:	e03e      	b.n	8005682 <HAL_RTCEx_SetTimeStamp+0x9a>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2202      	movs	r2, #2
 800560e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8005618:	4013      	ands	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	22ca      	movs	r2, #202	; 0xca
 800562a:	625a      	str	r2, [r3, #36]	; 0x24
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2253      	movs	r2, #83	; 0x53
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0206 	bic.w	r2, r2, #6
 8005642:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	430a      	orrs	r2, r1
 8005652:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	22ff      	movs	r2, #255	; 0xff
 8005672:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	fffff7f7 	.word	0xfffff7f7

08005694 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e025      	b.n	80056f4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fc fdc9 	bl	8002254 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f002 f909 	bl	80078ec <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	f002 f973 	bl	80079d0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e09d      	b.n	800584a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	d108      	bne.n	8005728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571e:	d009      	beq.n	8005734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	61da      	str	r2, [r3, #28]
 8005726:	e005      	b.n	8005734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fc fae4 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005774:	d902      	bls.n	800577c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e002      	b.n	8005782 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800577c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005780:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800578a:	d007      	beq.n	800579c <HAL_SPI_Init+0xa0>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005794:	d002      	beq.n	800579c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	ea42 0103 	orr.w	r1, r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	0c1b      	lsrs	r3, r3, #16
 80057f8:	f003 0204 	and.w	r2, r3, #4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005818:	ea42 0103 	orr.w	r1, r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69da      	ldr	r2, [r3, #28]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005838:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e049      	b.n	80058f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7fc fac1 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3304      	adds	r3, #4
 800588e:	4619      	mov	r1, r3
 8005890:	4610      	mov	r0, r2
 8005892:	f000 fc6d 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d001      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e054      	b.n	80059c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d022      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d01d      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a22      	ldr	r2, [pc, #136]	; (80059d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d018      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1f      	ldr	r2, [pc, #124]	; (80059dc <HAL_TIM_Base_Start_IT+0xdc>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1e      	ldr	r2, [pc, #120]	; (80059e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1c      	ldr	r2, [pc, #112]	; (80059e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0x80>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d115      	bne.n	80059ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	4b19      	ldr	r3, [pc, #100]	; (80059ec <HAL_TIM_Base_Start_IT+0xec>)
 8005988:	4013      	ands	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b06      	cmp	r3, #6
 8005990:	d015      	beq.n	80059be <HAL_TIM_Base_Start_IT+0xbe>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005998:	d011      	beq.n	80059be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059aa:	e008      	b.n	80059be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e000      	b.n	80059c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800
 80059ec:	00010007 	.word	0x00010007

080059f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e049      	b.n	8005a96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f841 	bl	8005a9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f000 fb9e 	bl	8006170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d122      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d11b      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f06f 0202 	mvn.w	r2, #2
 8005ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fb1d 	bl	8006134 <HAL_TIM_IC_CaptureCallback>
 8005afa:	e005      	b.n	8005b08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb0f 	bl	8006120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fb20 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d122      	bne.n	8005b62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d11b      	bne.n	8005b62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0204 	mvn.w	r2, #4
 8005b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 faf3 	bl	8006134 <HAL_TIM_IC_CaptureCallback>
 8005b4e:	e005      	b.n	8005b5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fae5 	bl	8006120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 faf6 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d122      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f06f 0208 	mvn.w	r2, #8
 8005b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fac9 	bl	8006134 <HAL_TIM_IC_CaptureCallback>
 8005ba2:	e005      	b.n	8005bb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fabb 	bl	8006120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 facc 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d122      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d11b      	bne.n	8005c0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f06f 0210 	mvn.w	r2, #16
 8005bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2208      	movs	r2, #8
 8005be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fa9f 	bl	8006134 <HAL_TIM_IC_CaptureCallback>
 8005bf6:	e005      	b.n	8005c04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fa91 	bl	8006120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 faa2 	bl	8006148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10e      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d107      	bne.n	8005c36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f06f 0201 	mvn.w	r2, #1
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7fb fe03 	bl	800183c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c40:	2b80      	cmp	r3, #128	; 0x80
 8005c42:	d10e      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4e:	2b80      	cmp	r3, #128	; 0x80
 8005c50:	d107      	bne.n	8005c62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 ffc5 	bl	8006bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c70:	d10e      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d107      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 ffb8 	bl	8006c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d10e      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d107      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa50 	bl	800615c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d107      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0220 	mvn.w	r2, #32
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 ff78 	bl	8006bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e0fd      	b.n	8005f06 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b14      	cmp	r3, #20
 8005d16:	f200 80f0 	bhi.w	8005efa <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005efb 	.word	0x08005efb
 8005d28:	08005efb 	.word	0x08005efb
 8005d2c:	08005efb 	.word	0x08005efb
 8005d30:	08005db5 	.word	0x08005db5
 8005d34:	08005efb 	.word	0x08005efb
 8005d38:	08005efb 	.word	0x08005efb
 8005d3c:	08005efb 	.word	0x08005efb
 8005d40:	08005df7 	.word	0x08005df7
 8005d44:	08005efb 	.word	0x08005efb
 8005d48:	08005efb 	.word	0x08005efb
 8005d4c:	08005efb 	.word	0x08005efb
 8005d50:	08005e37 	.word	0x08005e37
 8005d54:	08005efb 	.word	0x08005efb
 8005d58:	08005efb 	.word	0x08005efb
 8005d5c:	08005efb 	.word	0x08005efb
 8005d60:	08005e79 	.word	0x08005e79
 8005d64:	08005efb 	.word	0x08005efb
 8005d68:	08005efb 	.word	0x08005efb
 8005d6c:	08005efb 	.word	0x08005efb
 8005d70:	08005eb9 	.word	0x08005eb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fa98 	bl	80062b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0208 	orr.w	r2, r2, #8
 8005d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6999      	ldr	r1, [r3, #24]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	619a      	str	r2, [r3, #24]
      break;
 8005db2:	e0a3      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 faea 	bl	8006394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6999      	ldr	r1, [r3, #24]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	021a      	lsls	r2, r3, #8
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	619a      	str	r2, [r3, #24]
      break;
 8005df4:	e082      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fb41 	bl	8006484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0208 	orr.w	r2, r2, #8
 8005e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0204 	bic.w	r2, r2, #4
 8005e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69d9      	ldr	r1, [r3, #28]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	61da      	str	r2, [r3, #28]
      break;
 8005e34:	e062      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fb97 	bl	8006570 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	021a      	lsls	r2, r3, #8
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	61da      	str	r2, [r3, #28]
      break;
 8005e76:	e041      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fbce 	bl	8006620 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0208 	orr.w	r2, r2, #8
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0204 	bic.w	r2, r2, #4
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eb6:	e021      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fc00 	bl	80066c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ef8:	e000      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005efa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop

08005f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIM_ConfigClockSource+0x18>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e0b3      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x180>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4b55      	ldr	r3, [pc, #340]	; (8006098 <HAL_TIM_ConfigClockSource+0x188>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f60:	d03e      	beq.n	8005fe0 <HAL_TIM_ConfigClockSource+0xd0>
 8005f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f66:	f200 8087 	bhi.w	8006078 <HAL_TIM_ConfigClockSource+0x168>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	f000 8085 	beq.w	800607c <HAL_TIM_ConfigClockSource+0x16c>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d87f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x168>
 8005f78:	2b70      	cmp	r3, #112	; 0x70
 8005f7a:	d01a      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0xa2>
 8005f7c:	2b70      	cmp	r3, #112	; 0x70
 8005f7e:	d87b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x168>
 8005f80:	2b60      	cmp	r3, #96	; 0x60
 8005f82:	d050      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x116>
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d877      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x168>
 8005f88:	2b50      	cmp	r3, #80	; 0x50
 8005f8a:	d03c      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0xf6>
 8005f8c:	2b50      	cmp	r3, #80	; 0x50
 8005f8e:	d873      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x168>
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d058      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x136>
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d86f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x168>
 8005f98:	2b30      	cmp	r3, #48	; 0x30
 8005f9a:	d064      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x156>
 8005f9c:	2b30      	cmp	r3, #48	; 0x30
 8005f9e:	d86b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x168>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d060      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x156>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d867      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x168>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05c      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x156>
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d05a      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005fb0:	e062      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f000 fcdd 	bl	8006980 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	609a      	str	r2, [r3, #8]
      break;
 8005fde:	e04e      	b.n	800607e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f000 fcc6 	bl	8006980 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006002:	609a      	str	r2, [r3, #8]
      break;
 8006004:	e03b      	b.n	800607e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6859      	ldr	r1, [r3, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	461a      	mov	r2, r3
 8006014:	f000 fc3a 	bl	800688c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2150      	movs	r1, #80	; 0x50
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fc93 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8006024:	e02b      	b.n	800607e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6859      	ldr	r1, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	461a      	mov	r2, r3
 8006034:	f000 fc59 	bl	80068ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2160      	movs	r1, #96	; 0x60
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fc83 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8006044:	e01b      	b.n	800607e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6859      	ldr	r1, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	461a      	mov	r2, r3
 8006054:	f000 fc1a 	bl	800688c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2140      	movs	r1, #64	; 0x40
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fc73 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8006064:	e00b      	b.n	800607e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f000 fc6a 	bl	800694a <TIM_ITRx_SetConfig>
        break;
 8006076:	e002      	b.n	800607e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006078:	bf00      	nop
 800607a:	e000      	b.n	800607e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800607c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	fffeff88 	.word	0xfffeff88

0800609c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e031      	b.n	8006118 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fb50 	bl	800676c <TIM_SlaveTimer_SetConfig>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e018      	b.n	8006118 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006104:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a40      	ldr	r2, [pc, #256]	; (8006284 <TIM_Base_SetConfig+0x114>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618e:	d00f      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a3d      	ldr	r2, [pc, #244]	; (8006288 <TIM_Base_SetConfig+0x118>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3c      	ldr	r2, [pc, #240]	; (800628c <TIM_Base_SetConfig+0x11c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a3b      	ldr	r2, [pc, #236]	; (8006290 <TIM_Base_SetConfig+0x120>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a3a      	ldr	r2, [pc, #232]	; (8006294 <TIM_Base_SetConfig+0x124>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2f      	ldr	r2, [pc, #188]	; (8006284 <TIM_Base_SetConfig+0x114>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d02b      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d0:	d027      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2c      	ldr	r2, [pc, #176]	; (8006288 <TIM_Base_SetConfig+0x118>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d023      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	; (800628c <TIM_Base_SetConfig+0x11c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d01f      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <TIM_Base_SetConfig+0x120>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01b      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a29      	ldr	r2, [pc, #164]	; (8006294 <TIM_Base_SetConfig+0x124>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d017      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a28      	ldr	r2, [pc, #160]	; (8006298 <TIM_Base_SetConfig+0x128>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a27      	ldr	r2, [pc, #156]	; (800629c <TIM_Base_SetConfig+0x12c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00f      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a26      	ldr	r2, [pc, #152]	; (80062a0 <TIM_Base_SetConfig+0x130>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a25      	ldr	r2, [pc, #148]	; (80062a4 <TIM_Base_SetConfig+0x134>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a24      	ldr	r2, [pc, #144]	; (80062a8 <TIM_Base_SetConfig+0x138>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a23      	ldr	r2, [pc, #140]	; (80062ac <TIM_Base_SetConfig+0x13c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d108      	bne.n	8006234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a0a      	ldr	r2, [pc, #40]	; (8006284 <TIM_Base_SetConfig+0x114>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0xf8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a0c      	ldr	r2, [pc, #48]	; (8006294 <TIM_Base_SetConfig+0x124>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	615a      	str	r2, [r3, #20]
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40010000 	.word	0x40010000
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00
 8006294:	40010400 	.word	0x40010400
 8006298:	40014000 	.word	0x40014000
 800629c:	40014400 	.word	0x40014400
 80062a0:	40014800 	.word	0x40014800
 80062a4:	40001800 	.word	0x40001800
 80062a8:	40001c00 	.word	0x40001c00
 80062ac:	40002000 	.word	0x40002000

080062b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f023 0201 	bic.w	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <TIM_OC1_SetConfig+0xd8>)
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f023 0302 	bic.w	r3, r3, #2
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a21      	ldr	r2, [pc, #132]	; (800638c <TIM_OC1_SetConfig+0xdc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_OC1_SetConfig+0x64>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a20      	ldr	r2, [pc, #128]	; (8006390 <TIM_OC1_SetConfig+0xe0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10c      	bne.n	800632e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0308 	bic.w	r3, r3, #8
 800631a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f023 0304 	bic.w	r3, r3, #4
 800632c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a16      	ldr	r2, [pc, #88]	; (800638c <TIM_OC1_SetConfig+0xdc>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC1_SetConfig+0x8e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a15      	ldr	r2, [pc, #84]	; (8006390 <TIM_OC1_SetConfig+0xe0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d111      	bne.n	8006362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	621a      	str	r2, [r3, #32]
}
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	fffeff8f 	.word	0xfffeff8f
 800638c:	40010000 	.word	0x40010000
 8006390:	40010400 	.word	0x40010400

08006394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0210 	bic.w	r2, r3, #16
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4b2e      	ldr	r3, [pc, #184]	; (8006478 <TIM_OC2_SetConfig+0xe4>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0320 	bic.w	r3, r3, #32
 80063de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a23      	ldr	r2, [pc, #140]	; (800647c <TIM_OC2_SetConfig+0xe8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC2_SetConfig+0x68>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a22      	ldr	r2, [pc, #136]	; (8006480 <TIM_OC2_SetConfig+0xec>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d10d      	bne.n	8006418 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a18      	ldr	r2, [pc, #96]	; (800647c <TIM_OC2_SetConfig+0xe8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC2_SetConfig+0x94>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a17      	ldr	r2, [pc, #92]	; (8006480 <TIM_OC2_SetConfig+0xec>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d113      	bne.n	8006450 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800642e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	feff8fff 	.word	0xfeff8fff
 800647c:	40010000 	.word	0x40010000
 8006480:	40010400 	.word	0x40010400

08006484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4b2d      	ldr	r3, [pc, #180]	; (8006564 <TIM_OC3_SetConfig+0xe0>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a22      	ldr	r2, [pc, #136]	; (8006568 <TIM_OC3_SetConfig+0xe4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d003      	beq.n	80064ea <TIM_OC3_SetConfig+0x66>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a21      	ldr	r2, [pc, #132]	; (800656c <TIM_OC3_SetConfig+0xe8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10d      	bne.n	8006506 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a17      	ldr	r2, [pc, #92]	; (8006568 <TIM_OC3_SetConfig+0xe4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_OC3_SetConfig+0x92>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a16      	ldr	r2, [pc, #88]	; (800656c <TIM_OC3_SetConfig+0xe8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d113      	bne.n	800653e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800651c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	621a      	str	r2, [r3, #32]
}
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	fffeff8f 	.word	0xfffeff8f
 8006568:	40010000 	.word	0x40010000
 800656c:	40010400 	.word	0x40010400

08006570 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4b1e      	ldr	r3, [pc, #120]	; (8006614 <TIM_OC4_SetConfig+0xa4>)
 800659c:	4013      	ands	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	031b      	lsls	r3, r3, #12
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a13      	ldr	r2, [pc, #76]	; (8006618 <TIM_OC4_SetConfig+0xa8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC4_SetConfig+0x68>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a12      	ldr	r2, [pc, #72]	; (800661c <TIM_OC4_SetConfig+0xac>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d109      	bne.n	80065ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	019b      	lsls	r3, r3, #6
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	feff8fff 	.word	0xfeff8fff
 8006618:	40010000 	.word	0x40010000
 800661c:	40010400 	.word	0x40010400

08006620 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <TIM_OC5_SetConfig+0x98>)
 800664c:	4013      	ands	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006660:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a12      	ldr	r2, [pc, #72]	; (80066bc <TIM_OC5_SetConfig+0x9c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_OC5_SetConfig+0x5e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a11      	ldr	r2, [pc, #68]	; (80066c0 <TIM_OC5_SetConfig+0xa0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d109      	bne.n	8006692 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	621a      	str	r2, [r3, #32]
}
 80066ac:	bf00      	nop
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	fffeff8f 	.word	0xfffeff8f
 80066bc:	40010000 	.word	0x40010000
 80066c0:	40010400 	.word	0x40010400

080066c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4b1c      	ldr	r3, [pc, #112]	; (8006760 <TIM_OC6_SetConfig+0x9c>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	051b      	lsls	r3, r3, #20
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a13      	ldr	r2, [pc, #76]	; (8006764 <TIM_OC6_SetConfig+0xa0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC6_SetConfig+0x60>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a12      	ldr	r2, [pc, #72]	; (8006768 <TIM_OC6_SetConfig+0xa4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d109      	bne.n	8006738 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800672a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	029b      	lsls	r3, r3, #10
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	feff8fff 	.word	0xfeff8fff
 8006764:	40010000 	.word	0x40010000
 8006768:	40010400 	.word	0x40010400

0800676c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006784:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4b3d      	ldr	r3, [pc, #244]	; (8006888 <TIM_SlaveTimer_SetConfig+0x11c>)
 8006794:	4013      	ands	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b70      	cmp	r3, #112	; 0x70
 80067b0:	d01a      	beq.n	80067e8 <TIM_SlaveTimer_SetConfig+0x7c>
 80067b2:	2b70      	cmp	r3, #112	; 0x70
 80067b4:	d860      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x10c>
 80067b6:	2b60      	cmp	r3, #96	; 0x60
 80067b8:	d054      	beq.n	8006864 <TIM_SlaveTimer_SetConfig+0xf8>
 80067ba:	2b60      	cmp	r3, #96	; 0x60
 80067bc:	d85c      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x10c>
 80067be:	2b50      	cmp	r3, #80	; 0x50
 80067c0:	d046      	beq.n	8006850 <TIM_SlaveTimer_SetConfig+0xe4>
 80067c2:	2b50      	cmp	r3, #80	; 0x50
 80067c4:	d858      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x10c>
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d019      	beq.n	80067fe <TIM_SlaveTimer_SetConfig+0x92>
 80067ca:	2b40      	cmp	r3, #64	; 0x40
 80067cc:	d854      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x10c>
 80067ce:	2b30      	cmp	r3, #48	; 0x30
 80067d0:	d054      	beq.n	800687c <TIM_SlaveTimer_SetConfig+0x110>
 80067d2:	2b30      	cmp	r3, #48	; 0x30
 80067d4:	d850      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x10c>
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d050      	beq.n	800687c <TIM_SlaveTimer_SetConfig+0x110>
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d84c      	bhi.n	8006878 <TIM_SlaveTimer_SetConfig+0x10c>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d04c      	beq.n	800687c <TIM_SlaveTimer_SetConfig+0x110>
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d04a      	beq.n	800687c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80067e6:	e047      	b.n	8006878 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68d9      	ldr	r1, [r3, #12]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f000 f8c2 	bl	8006980 <TIM_ETR_SetConfig>
      break;
 80067fc:	e03f      	b.n	800687e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b05      	cmp	r3, #5
 8006804:	d101      	bne.n	800680a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e03a      	b.n	8006880 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6a1a      	ldr	r2, [r3, #32]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0201 	bic.w	r2, r2, #1
 8006820:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006830:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	621a      	str	r2, [r3, #32]
      break;
 800684e:	e016      	b.n	800687e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	6899      	ldr	r1, [r3, #8]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	461a      	mov	r2, r3
 800685e:	f000 f815 	bl	800688c <TIM_TI1_ConfigInputStage>
      break;
 8006862:	e00c      	b.n	800687e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	6899      	ldr	r1, [r3, #8]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	461a      	mov	r2, r3
 8006872:	f000 f83a 	bl	80068ea <TIM_TI2_ConfigInputStage>
      break;
 8006876:	e002      	b.n	800687e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006878:	bf00      	nop
 800687a:	e000      	b.n	800687e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800687c:	bf00      	nop
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	fffefff8 	.word	0xfffefff8

0800688c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f023 0201 	bic.w	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f023 030a 	bic.w	r3, r3, #10
 80068c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0210 	bic.w	r2, r3, #16
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	011b      	lsls	r3, r3, #4
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	f043 0307 	orr.w	r3, r3, #7
 800696c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e06d      	b.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a30      	ldr	r2, [pc, #192]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a2f      	ldr	r2, [pc, #188]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d108      	bne.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d022      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4a:	d01d      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d018      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d013      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1a      	ldr	r2, [pc, #104]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d10c      	bne.n	8006aa2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40000800 	.word	0x40000800
 8006ad0:	40000c00 	.word	0x40000c00
 8006ad4:	40014000 	.word	0x40014000
 8006ad8:	40001800 	.word	0x40001800

08006adc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e065      	b.n	8006bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a16      	ldr	r2, [pc, #88]	; (8006bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a14      	ldr	r2, [pc, #80]	; (8006bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d115      	bne.n	8006bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	051b      	lsls	r3, r3, #20
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40010400 	.word	0x40010400

08006bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e040      	b.n	8006ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fb f9ae 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2224      	movs	r2, #36	; 0x24
 8006c40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa38 	bl	80070c8 <UART_SetConfig>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e022      	b.n	8006ca8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fc8e 	bl	800758c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fd15 	bl	80076d0 <UART_CheckIdleState>
 8006ca6:	4603      	mov	r3, r0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d113      	bne.n	8006d08 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00e      	beq.n	8006d08 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d009      	beq.n	8006d08 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 81b9 	beq.w	8007070 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
      }
      return;
 8006d06:	e1b3      	b.n	8007070 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80e3 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d105      	bne.n	8006d26 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	4ba5      	ldr	r3, [pc, #660]	; (8006fb4 <HAL_UART_IRQHandler+0x304>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80d8 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <HAL_UART_IRQHandler+0xa2>
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00b      	beq.n	8006d52 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d48:	f043 0201 	orr.w	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d010      	beq.n	8006d7e <HAL_UART_IRQHandler+0xce>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	f043 0204 	orr.w	r2, r3, #4
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d010      	beq.n	8006daa <HAL_UART_IRQHandler+0xfa>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2204      	movs	r2, #4
 8006d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da0:	f043 0202 	orr.w	r2, r3, #2
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d015      	beq.n	8006de0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d104      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2208      	movs	r2, #8
 8006dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd6:	f043 0208 	orr.w	r2, r3, #8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d011      	beq.n	8006e0e <HAL_UART_IRQHandler+0x15e>
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00c      	beq.n	8006e0e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 812d 	beq.w	8007074 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00c      	beq.n	8006e3e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d007      	beq.n	8006e3e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e44:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	d004      	beq.n	8006e5e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d031      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fce5 	bl	800782e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d123      	bne.n	8006eba <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e80:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d013      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	4a4a      	ldr	r2, [pc, #296]	; (8006fb8 <HAL_UART_IRQHandler+0x308>)
 8006e90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fb ffad 	bl	8002df6 <HAL_DMA_Abort_IT>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d017      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb0:	e00f      	b.n	8006ed2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f8f2 	bl	800709c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	e00b      	b.n	8006ed2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f8ee 	bl	800709c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec0:	e007      	b.n	8006ed2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f8ea 	bl	800709c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006ed0:	e0d0      	b.n	8007074 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed2:	bf00      	nop
    return;
 8006ed4:	e0ce      	b.n	8007074 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	f040 80a7 	bne.w	800702e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f003 0310 	and.w	r3, r3, #16
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80a1 	beq.w	800702e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 809b 	beq.w	800702e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2210      	movs	r2, #16
 8006efe:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b40      	cmp	r3, #64	; 0x40
 8006f0c:	d156      	bne.n	8006fbc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006f18:	893b      	ldrh	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80ac 	beq.w	8007078 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f26:	893a      	ldrh	r2, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	f080 80a5 	bcs.w	8007078 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	893a      	ldrh	r2, [r7, #8]
 8006f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f40:	d02a      	beq.n	8006f98 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0201 	bic.w	r2, r2, #1
 8006f60:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f70:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0210 	bic.w	r2, r2, #16
 8006f8c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fb febf 	bl	8002d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f87f 	bl	80070b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fb2:	e061      	b.n	8007078 <HAL_UART_IRQHandler+0x3c8>
 8006fb4:	04000120 	.word	0x04000120
 8006fb8:	0800788d 	.word	0x0800788d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d050      	beq.n	800707c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8006fda:	897b      	ldrh	r3, [r7, #10]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d04d      	beq.n	800707c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0210 	bic.w	r2, r2, #16
 8007020:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007022:	897b      	ldrh	r3, [r7, #10]
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f842 	bl	80070b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800702c:	e026      	b.n	800707c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00d      	beq.n	8007054 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d008      	beq.n	8007054 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01a      	beq.n	8007080 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
    }
    return;
 8007052:	e015      	b.n	8007080 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d011      	beq.n	8007082 <HAL_UART_IRQHandler+0x3d2>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00c      	beq.n	8007082 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fc25 	bl	80078b8 <UART_EndTransmit_IT>
    return;
 800706e:	e008      	b.n	8007082 <HAL_UART_IRQHandler+0x3d2>
      return;
 8007070:	bf00      	nop
 8007072:	e006      	b.n	8007082 <HAL_UART_IRQHandler+0x3d2>
    return;
 8007074:	bf00      	nop
 8007076:	e004      	b.n	8007082 <HAL_UART_IRQHandler+0x3d2>
      return;
 8007078:	bf00      	nop
 800707a:	e002      	b.n	8007082 <HAL_UART_IRQHandler+0x3d2>
      return;
 800707c:	bf00      	nop
 800707e:	e000      	b.n	8007082 <HAL_UART_IRQHandler+0x3d2>
    return;
 8007080:	bf00      	nop
  }

}
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4ba7      	ldr	r3, [pc, #668]	; (8007390 <UART_SetConfig+0x2c8>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6812      	ldr	r2, [r2, #0]
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	430b      	orrs	r3, r1
 80070fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	430a      	orrs	r2, r1
 8007138:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a95      	ldr	r2, [pc, #596]	; (8007394 <UART_SetConfig+0x2cc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d120      	bne.n	8007186 <UART_SetConfig+0xbe>
 8007144:	4b94      	ldr	r3, [pc, #592]	; (8007398 <UART_SetConfig+0x2d0>)
 8007146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	2b03      	cmp	r3, #3
 8007150:	d816      	bhi.n	8007180 <UART_SetConfig+0xb8>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x90>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	08007169 	.word	0x08007169
 800715c:	08007175 	.word	0x08007175
 8007160:	0800716f 	.word	0x0800716f
 8007164:	0800717b 	.word	0x0800717b
 8007168:	2301      	movs	r3, #1
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e14f      	b.n	800740e <UART_SetConfig+0x346>
 800716e:	2302      	movs	r3, #2
 8007170:	77fb      	strb	r3, [r7, #31]
 8007172:	e14c      	b.n	800740e <UART_SetConfig+0x346>
 8007174:	2304      	movs	r3, #4
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e149      	b.n	800740e <UART_SetConfig+0x346>
 800717a:	2308      	movs	r3, #8
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e146      	b.n	800740e <UART_SetConfig+0x346>
 8007180:	2310      	movs	r3, #16
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e143      	b.n	800740e <UART_SetConfig+0x346>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a84      	ldr	r2, [pc, #528]	; (800739c <UART_SetConfig+0x2d4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d132      	bne.n	80071f6 <UART_SetConfig+0x12e>
 8007190:	4b81      	ldr	r3, [pc, #516]	; (8007398 <UART_SetConfig+0x2d0>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	f003 030c 	and.w	r3, r3, #12
 800719a:	2b0c      	cmp	r3, #12
 800719c:	d828      	bhi.n	80071f0 <UART_SetConfig+0x128>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <UART_SetConfig+0xdc>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071d9 	.word	0x080071d9
 80071a8:	080071f1 	.word	0x080071f1
 80071ac:	080071f1 	.word	0x080071f1
 80071b0:	080071f1 	.word	0x080071f1
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	080071f1 	.word	0x080071f1
 80071bc:	080071f1 	.word	0x080071f1
 80071c0:	080071f1 	.word	0x080071f1
 80071c4:	080071df 	.word	0x080071df
 80071c8:	080071f1 	.word	0x080071f1
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	080071f1 	.word	0x080071f1
 80071d4:	080071eb 	.word	0x080071eb
 80071d8:	2300      	movs	r3, #0
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e117      	b.n	800740e <UART_SetConfig+0x346>
 80071de:	2302      	movs	r3, #2
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e114      	b.n	800740e <UART_SetConfig+0x346>
 80071e4:	2304      	movs	r3, #4
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e111      	b.n	800740e <UART_SetConfig+0x346>
 80071ea:	2308      	movs	r3, #8
 80071ec:	77fb      	strb	r3, [r7, #31]
 80071ee:	e10e      	b.n	800740e <UART_SetConfig+0x346>
 80071f0:	2310      	movs	r3, #16
 80071f2:	77fb      	strb	r3, [r7, #31]
 80071f4:	e10b      	b.n	800740e <UART_SetConfig+0x346>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a69      	ldr	r2, [pc, #420]	; (80073a0 <UART_SetConfig+0x2d8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d120      	bne.n	8007242 <UART_SetConfig+0x17a>
 8007200:	4b65      	ldr	r3, [pc, #404]	; (8007398 <UART_SetConfig+0x2d0>)
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800720a:	2b30      	cmp	r3, #48	; 0x30
 800720c:	d013      	beq.n	8007236 <UART_SetConfig+0x16e>
 800720e:	2b30      	cmp	r3, #48	; 0x30
 8007210:	d814      	bhi.n	800723c <UART_SetConfig+0x174>
 8007212:	2b20      	cmp	r3, #32
 8007214:	d009      	beq.n	800722a <UART_SetConfig+0x162>
 8007216:	2b20      	cmp	r3, #32
 8007218:	d810      	bhi.n	800723c <UART_SetConfig+0x174>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <UART_SetConfig+0x15c>
 800721e:	2b10      	cmp	r3, #16
 8007220:	d006      	beq.n	8007230 <UART_SetConfig+0x168>
 8007222:	e00b      	b.n	800723c <UART_SetConfig+0x174>
 8007224:	2300      	movs	r3, #0
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e0f1      	b.n	800740e <UART_SetConfig+0x346>
 800722a:	2302      	movs	r3, #2
 800722c:	77fb      	strb	r3, [r7, #31]
 800722e:	e0ee      	b.n	800740e <UART_SetConfig+0x346>
 8007230:	2304      	movs	r3, #4
 8007232:	77fb      	strb	r3, [r7, #31]
 8007234:	e0eb      	b.n	800740e <UART_SetConfig+0x346>
 8007236:	2308      	movs	r3, #8
 8007238:	77fb      	strb	r3, [r7, #31]
 800723a:	e0e8      	b.n	800740e <UART_SetConfig+0x346>
 800723c:	2310      	movs	r3, #16
 800723e:	77fb      	strb	r3, [r7, #31]
 8007240:	e0e5      	b.n	800740e <UART_SetConfig+0x346>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a57      	ldr	r2, [pc, #348]	; (80073a4 <UART_SetConfig+0x2dc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d120      	bne.n	800728e <UART_SetConfig+0x1c6>
 800724c:	4b52      	ldr	r3, [pc, #328]	; (8007398 <UART_SetConfig+0x2d0>)
 800724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007252:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007256:	2bc0      	cmp	r3, #192	; 0xc0
 8007258:	d013      	beq.n	8007282 <UART_SetConfig+0x1ba>
 800725a:	2bc0      	cmp	r3, #192	; 0xc0
 800725c:	d814      	bhi.n	8007288 <UART_SetConfig+0x1c0>
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d009      	beq.n	8007276 <UART_SetConfig+0x1ae>
 8007262:	2b80      	cmp	r3, #128	; 0x80
 8007264:	d810      	bhi.n	8007288 <UART_SetConfig+0x1c0>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <UART_SetConfig+0x1a8>
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d006      	beq.n	800727c <UART_SetConfig+0x1b4>
 800726e:	e00b      	b.n	8007288 <UART_SetConfig+0x1c0>
 8007270:	2300      	movs	r3, #0
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e0cb      	b.n	800740e <UART_SetConfig+0x346>
 8007276:	2302      	movs	r3, #2
 8007278:	77fb      	strb	r3, [r7, #31]
 800727a:	e0c8      	b.n	800740e <UART_SetConfig+0x346>
 800727c:	2304      	movs	r3, #4
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	e0c5      	b.n	800740e <UART_SetConfig+0x346>
 8007282:	2308      	movs	r3, #8
 8007284:	77fb      	strb	r3, [r7, #31]
 8007286:	e0c2      	b.n	800740e <UART_SetConfig+0x346>
 8007288:	2310      	movs	r3, #16
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e0bf      	b.n	800740e <UART_SetConfig+0x346>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a45      	ldr	r2, [pc, #276]	; (80073a8 <UART_SetConfig+0x2e0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d125      	bne.n	80072e4 <UART_SetConfig+0x21c>
 8007298:	4b3f      	ldr	r3, [pc, #252]	; (8007398 <UART_SetConfig+0x2d0>)
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a6:	d017      	beq.n	80072d8 <UART_SetConfig+0x210>
 80072a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ac:	d817      	bhi.n	80072de <UART_SetConfig+0x216>
 80072ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b2:	d00b      	beq.n	80072cc <UART_SetConfig+0x204>
 80072b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b8:	d811      	bhi.n	80072de <UART_SetConfig+0x216>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <UART_SetConfig+0x1fe>
 80072be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c2:	d006      	beq.n	80072d2 <UART_SetConfig+0x20a>
 80072c4:	e00b      	b.n	80072de <UART_SetConfig+0x216>
 80072c6:	2300      	movs	r3, #0
 80072c8:	77fb      	strb	r3, [r7, #31]
 80072ca:	e0a0      	b.n	800740e <UART_SetConfig+0x346>
 80072cc:	2302      	movs	r3, #2
 80072ce:	77fb      	strb	r3, [r7, #31]
 80072d0:	e09d      	b.n	800740e <UART_SetConfig+0x346>
 80072d2:	2304      	movs	r3, #4
 80072d4:	77fb      	strb	r3, [r7, #31]
 80072d6:	e09a      	b.n	800740e <UART_SetConfig+0x346>
 80072d8:	2308      	movs	r3, #8
 80072da:	77fb      	strb	r3, [r7, #31]
 80072dc:	e097      	b.n	800740e <UART_SetConfig+0x346>
 80072de:	2310      	movs	r3, #16
 80072e0:	77fb      	strb	r3, [r7, #31]
 80072e2:	e094      	b.n	800740e <UART_SetConfig+0x346>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a30      	ldr	r2, [pc, #192]	; (80073ac <UART_SetConfig+0x2e4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d125      	bne.n	800733a <UART_SetConfig+0x272>
 80072ee:	4b2a      	ldr	r3, [pc, #168]	; (8007398 <UART_SetConfig+0x2d0>)
 80072f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072fc:	d017      	beq.n	800732e <UART_SetConfig+0x266>
 80072fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007302:	d817      	bhi.n	8007334 <UART_SetConfig+0x26c>
 8007304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007308:	d00b      	beq.n	8007322 <UART_SetConfig+0x25a>
 800730a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730e:	d811      	bhi.n	8007334 <UART_SetConfig+0x26c>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <UART_SetConfig+0x254>
 8007314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007318:	d006      	beq.n	8007328 <UART_SetConfig+0x260>
 800731a:	e00b      	b.n	8007334 <UART_SetConfig+0x26c>
 800731c:	2301      	movs	r3, #1
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e075      	b.n	800740e <UART_SetConfig+0x346>
 8007322:	2302      	movs	r3, #2
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e072      	b.n	800740e <UART_SetConfig+0x346>
 8007328:	2304      	movs	r3, #4
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e06f      	b.n	800740e <UART_SetConfig+0x346>
 800732e:	2308      	movs	r3, #8
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e06c      	b.n	800740e <UART_SetConfig+0x346>
 8007334:	2310      	movs	r3, #16
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e069      	b.n	800740e <UART_SetConfig+0x346>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a1c      	ldr	r2, [pc, #112]	; (80073b0 <UART_SetConfig+0x2e8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d137      	bne.n	80073b4 <UART_SetConfig+0x2ec>
 8007344:	4b14      	ldr	r3, [pc, #80]	; (8007398 <UART_SetConfig+0x2d0>)
 8007346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800734e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007352:	d017      	beq.n	8007384 <UART_SetConfig+0x2bc>
 8007354:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007358:	d817      	bhi.n	800738a <UART_SetConfig+0x2c2>
 800735a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735e:	d00b      	beq.n	8007378 <UART_SetConfig+0x2b0>
 8007360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007364:	d811      	bhi.n	800738a <UART_SetConfig+0x2c2>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <UART_SetConfig+0x2aa>
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d006      	beq.n	800737e <UART_SetConfig+0x2b6>
 8007370:	e00b      	b.n	800738a <UART_SetConfig+0x2c2>
 8007372:	2300      	movs	r3, #0
 8007374:	77fb      	strb	r3, [r7, #31]
 8007376:	e04a      	b.n	800740e <UART_SetConfig+0x346>
 8007378:	2302      	movs	r3, #2
 800737a:	77fb      	strb	r3, [r7, #31]
 800737c:	e047      	b.n	800740e <UART_SetConfig+0x346>
 800737e:	2304      	movs	r3, #4
 8007380:	77fb      	strb	r3, [r7, #31]
 8007382:	e044      	b.n	800740e <UART_SetConfig+0x346>
 8007384:	2308      	movs	r3, #8
 8007386:	77fb      	strb	r3, [r7, #31]
 8007388:	e041      	b.n	800740e <UART_SetConfig+0x346>
 800738a:	2310      	movs	r3, #16
 800738c:	77fb      	strb	r3, [r7, #31]
 800738e:	e03e      	b.n	800740e <UART_SetConfig+0x346>
 8007390:	efff69f3 	.word	0xefff69f3
 8007394:	40011000 	.word	0x40011000
 8007398:	40023800 	.word	0x40023800
 800739c:	40004400 	.word	0x40004400
 80073a0:	40004800 	.word	0x40004800
 80073a4:	40004c00 	.word	0x40004c00
 80073a8:	40005000 	.word	0x40005000
 80073ac:	40011400 	.word	0x40011400
 80073b0:	40007800 	.word	0x40007800
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a71      	ldr	r2, [pc, #452]	; (8007580 <UART_SetConfig+0x4b8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d125      	bne.n	800740a <UART_SetConfig+0x342>
 80073be:	4b71      	ldr	r3, [pc, #452]	; (8007584 <UART_SetConfig+0x4bc>)
 80073c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073cc:	d017      	beq.n	80073fe <UART_SetConfig+0x336>
 80073ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073d2:	d817      	bhi.n	8007404 <UART_SetConfig+0x33c>
 80073d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d8:	d00b      	beq.n	80073f2 <UART_SetConfig+0x32a>
 80073da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073de:	d811      	bhi.n	8007404 <UART_SetConfig+0x33c>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <UART_SetConfig+0x324>
 80073e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e8:	d006      	beq.n	80073f8 <UART_SetConfig+0x330>
 80073ea:	e00b      	b.n	8007404 <UART_SetConfig+0x33c>
 80073ec:	2300      	movs	r3, #0
 80073ee:	77fb      	strb	r3, [r7, #31]
 80073f0:	e00d      	b.n	800740e <UART_SetConfig+0x346>
 80073f2:	2302      	movs	r3, #2
 80073f4:	77fb      	strb	r3, [r7, #31]
 80073f6:	e00a      	b.n	800740e <UART_SetConfig+0x346>
 80073f8:	2304      	movs	r3, #4
 80073fa:	77fb      	strb	r3, [r7, #31]
 80073fc:	e007      	b.n	800740e <UART_SetConfig+0x346>
 80073fe:	2308      	movs	r3, #8
 8007400:	77fb      	strb	r3, [r7, #31]
 8007402:	e004      	b.n	800740e <UART_SetConfig+0x346>
 8007404:	2310      	movs	r3, #16
 8007406:	77fb      	strb	r3, [r7, #31]
 8007408:	e001      	b.n	800740e <UART_SetConfig+0x346>
 800740a:	2310      	movs	r3, #16
 800740c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007416:	d15b      	bne.n	80074d0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007418:	7ffb      	ldrb	r3, [r7, #31]
 800741a:	2b08      	cmp	r3, #8
 800741c:	d827      	bhi.n	800746e <UART_SetConfig+0x3a6>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x35c>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007449 	.word	0x08007449
 8007428:	08007451 	.word	0x08007451
 800742c:	08007459 	.word	0x08007459
 8007430:	0800746f 	.word	0x0800746f
 8007434:	0800745f 	.word	0x0800745f
 8007438:	0800746f 	.word	0x0800746f
 800743c:	0800746f 	.word	0x0800746f
 8007440:	0800746f 	.word	0x0800746f
 8007444:	08007467 	.word	0x08007467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fd f902 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 800744c:	61b8      	str	r0, [r7, #24]
        break;
 800744e:	e013      	b.n	8007478 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007450:	f7fd f912 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8007454:	61b8      	str	r0, [r7, #24]
        break;
 8007456:	e00f      	b.n	8007478 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007458:	4b4b      	ldr	r3, [pc, #300]	; (8007588 <UART_SetConfig+0x4c0>)
 800745a:	61bb      	str	r3, [r7, #24]
        break;
 800745c:	e00c      	b.n	8007478 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745e:	f7fd f835 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8007462:	61b8      	str	r0, [r7, #24]
        break;
 8007464:	e008      	b.n	8007478 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800746a:	61bb      	str	r3, [r7, #24]
        break;
 800746c:	e004      	b.n	8007478 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	77bb      	strb	r3, [r7, #30]
        break;
 8007476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d074      	beq.n	8007568 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	005a      	lsls	r2, r3, #1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	085b      	lsrs	r3, r3, #1
 8007488:	441a      	add	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	b29b      	uxth	r3, r3
 8007494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b0f      	cmp	r3, #15
 800749a:	d916      	bls.n	80074ca <UART_SetConfig+0x402>
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a2:	d212      	bcs.n	80074ca <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f023 030f 	bic.w	r3, r3, #15
 80074ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	89fb      	ldrh	r3, [r7, #14]
 80074bc:	4313      	orrs	r3, r2
 80074be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	89fa      	ldrh	r2, [r7, #14]
 80074c6:	60da      	str	r2, [r3, #12]
 80074c8:	e04e      	b.n	8007568 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	77bb      	strb	r3, [r7, #30]
 80074ce:	e04b      	b.n	8007568 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074d0:	7ffb      	ldrb	r3, [r7, #31]
 80074d2:	2b08      	cmp	r3, #8
 80074d4:	d827      	bhi.n	8007526 <UART_SetConfig+0x45e>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <UART_SetConfig+0x414>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007509 	.word	0x08007509
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007527 	.word	0x08007527
 80074ec:	08007517 	.word	0x08007517
 80074f0:	08007527 	.word	0x08007527
 80074f4:	08007527 	.word	0x08007527
 80074f8:	08007527 	.word	0x08007527
 80074fc:	0800751f 	.word	0x0800751f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007500:	f7fd f8a6 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 8007504:	61b8      	str	r0, [r7, #24]
        break;
 8007506:	e013      	b.n	8007530 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007508:	f7fd f8b6 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 800750c:	61b8      	str	r0, [r7, #24]
        break;
 800750e:	e00f      	b.n	8007530 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007510:	4b1d      	ldr	r3, [pc, #116]	; (8007588 <UART_SetConfig+0x4c0>)
 8007512:	61bb      	str	r3, [r7, #24]
        break;
 8007514:	e00c      	b.n	8007530 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007516:	f7fc ffd9 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 800751a:	61b8      	str	r0, [r7, #24]
        break;
 800751c:	e008      	b.n	8007530 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007522:	61bb      	str	r3, [r7, #24]
        break;
 8007524:	e004      	b.n	8007530 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	77bb      	strb	r3, [r7, #30]
        break;
 800752e:	bf00      	nop
    }

    if (pclk != 0U)
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d018      	beq.n	8007568 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	085a      	lsrs	r2, r3, #1
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	441a      	add	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	b29b      	uxth	r3, r3
 800754a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b0f      	cmp	r3, #15
 8007550:	d908      	bls.n	8007564 <UART_SetConfig+0x49c>
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007558:	d204      	bcs.n	8007564 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	e001      	b.n	8007568 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007574:	7fbb      	ldrb	r3, [r7, #30]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40007c00 	.word	0x40007c00
 8007584:	40023800 	.word	0x40023800
 8007588:	00f42400 	.word	0x00f42400

0800758c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	f003 0308 	and.w	r3, r3, #8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01a      	beq.n	80076a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768a:	d10a      	bne.n	80076a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	605a      	str	r2, [r3, #4]
  }
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076e0:	f7fa fec4 	bl	800246c <HAL_GetTick>
 80076e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d10e      	bne.n	8007712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f817 	bl	8007736 <UART_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e00d      	b.n	800772e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2220      	movs	r2, #32
 800771c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	4613      	mov	r3, r2
 8007744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007746:	e05e      	b.n	8007806 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774e:	d05a      	beq.n	8007806 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007750:	f7fa fe8c 	bl	800246c <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	429a      	cmp	r2, r3
 800775e:	d302      	bcc.n	8007766 <UART_WaitOnFlagUntilTimeout+0x30>
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d11b      	bne.n	800779e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007774:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2220      	movs	r2, #32
 8007790:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e043      	b.n	8007826 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d02c      	beq.n	8007806 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ba:	d124      	bne.n	8007806 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689a      	ldr	r2, [r3, #8]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0201 	bic.w	r2, r2, #1
 80077e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2220      	movs	r2, #32
 80077ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2220      	movs	r2, #32
 80077f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e00f      	b.n	8007826 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4013      	ands	r3, r2
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	429a      	cmp	r2, r3
 8007814:	bf0c      	ite	eq
 8007816:	2301      	moveq	r3, #1
 8007818:	2300      	movne	r3, #0
 800781a:	b2db      	uxtb	r3, r3
 800781c:	461a      	mov	r2, r3
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	429a      	cmp	r2, r3
 8007822:	d091      	beq.n	8007748 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007844:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0201 	bic.w	r2, r2, #1
 8007854:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785a:	2b01      	cmp	r3, #1
 800785c:	d107      	bne.n	800786e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0210 	bic.w	r2, r2, #16
 800786c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007898:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff fbf6 	bl	800709c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff fbd3 	bl	8007088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d027      	beq.n	8007956 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4b2f      	ldr	r3, [pc, #188]	; (80079cc <FMC_SDRAM_Init+0xe0>)
 8007910:	4013      	ands	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800791c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007922:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007928:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800792e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007934:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800793a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007940:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007946:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e032      	b.n	80079bc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007962:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800796c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007972:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	4b12      	ldr	r3, [pc, #72]	; (80079cc <FMC_SDRAM_Init+0xe0>)
 8007984:	4013      	ands	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007990:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007996:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800799c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80079a2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80079a8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	ffff8000 	.word	0xffff8000

080079d0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d02e      	beq.n	8007a48 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80079f6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a06:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007a10:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007a1a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007a24:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007a2e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	609a      	str	r2, [r3, #8]
 8007a46:	e039      	b.n	8007abc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4b1e      	ldr	r3, [pc, #120]	; (8007acc <FMC_SDRAM_Timing_Init+0xfc>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007a66:	4313      	orrs	r3, r2
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a7a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007a8a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007a94:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007a9e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	ff0f0fff 	.word	0xff0f0fff

08007ad0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ae2:	2b84      	cmp	r3, #132	; 0x84
 8007ae4:	d005      	beq.n	8007af2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ae6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	3303      	adds	r3, #3
 8007af0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007af2:	68fb      	ldr	r3, [r7, #12]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b04:	f000 fe9e 	bl	8008844 <vTaskStartScheduler>
  
  return osOK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b10:	b089      	sub	sp, #36	; 0x24
 8007b12:	af04      	add	r7, sp, #16
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d020      	beq.n	8007b62 <osThreadCreate+0x54>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01c      	beq.n	8007b62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685c      	ldr	r4, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681d      	ldr	r5, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691e      	ldr	r6, [r3, #16]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff ffc8 	bl	8007ad0 <makeFreeRtosPriority>
 8007b40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b4a:	9202      	str	r2, [sp, #8]
 8007b4c:	9301      	str	r3, [sp, #4]
 8007b4e:	9100      	str	r1, [sp, #0]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	4632      	mov	r2, r6
 8007b54:	4629      	mov	r1, r5
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fca2 	bl	80084a0 <xTaskCreateStatic>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e01c      	b.n	8007b9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685c      	ldr	r4, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b6e:	b29e      	uxth	r6, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff ffaa 	bl	8007ad0 <makeFreeRtosPriority>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	f107 030c 	add.w	r3, r7, #12
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	9200      	str	r2, [sp, #0]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 fcea 	bl	8008566 <xTaskCreate>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d001      	beq.n	8007b9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e000      	b.n	8007b9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ba6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <osDelay+0x16>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	e000      	b.n	8007bbe <osDelay+0x18>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fe0a 	bl	80087d8 <vTaskDelay>
  
  return osOK;
 8007bc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4619      	mov	r1, r3
 8007be4:	2001      	movs	r0, #1
 8007be6:	f000 fa66 	bl	80080b6 <xQueueCreateMutexStatic>
 8007bea:	4603      	mov	r3, r0
 8007bec:	e003      	b.n	8007bf6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007bee:	2001      	movs	r0, #1
 8007bf0:	f000 fa49 	bl	8008086 <xQueueCreateMutex>
 8007bf4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007bfe:	b590      	push	{r4, r7, lr}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af02      	add	r7, sp, #8
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d011      	beq.n	8007c34 <osMessageCreate+0x36>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00d      	beq.n	8007c34 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6859      	ldr	r1, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2400      	movs	r4, #0
 8007c2a:	9400      	str	r4, [sp, #0]
 8007c2c:	f000 f92e 	bl	8007e8c <xQueueGenericCreateStatic>
 8007c30:	4603      	mov	r3, r0
 8007c32:	e008      	b.n	8007c46 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4619      	mov	r1, r3
 8007c40:	f000 f9a6 	bl	8007f90 <xQueueGenericCreate>
 8007c44:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd90      	pop	{r4, r7, pc}

08007c4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f103 0208 	add.w	r2, r3, #8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295
 8007c66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f103 0208 	add.w	r2, r3, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f103 0208 	add.w	r2, r3, #8
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	601a      	str	r2, [r3, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d103      	bne.n	8007d10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e00c      	b.n	8007d2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3308      	adds	r3, #8
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e002      	b.n	8007d1e <vListInsert+0x2e>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d2f6      	bcs.n	8007d18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
}
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6892      	ldr	r2, [r2, #8]
 8007d78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6852      	ldr	r2, [r2, #4]
 8007d82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d103      	bne.n	8007d96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	1e5a      	subs	r2, r3, #1
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
	...

08007db8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10c      	bne.n	8007de6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	b672      	cpsid	i
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	b662      	cpsie	i
 8007de0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007de6:	f001 fb59 	bl	800949c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007df6:	fb01 f303 	mul.w	r3, r1, r3
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e16:	3b01      	subs	r3, #1
 8007e18:	68f9      	ldr	r1, [r7, #12]
 8007e1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	441a      	add	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	22ff      	movs	r2, #255	; 0xff
 8007e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	22ff      	movs	r2, #255	; 0xff
 8007e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d114      	bne.n	8007e66 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01a      	beq.n	8007e7a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3310      	adds	r3, #16
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 ff49 	bl	8008ce0 <xTaskRemoveFromEventList>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d012      	beq.n	8007e7a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <xQueueGenericReset+0xd0>)
 8007e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	e009      	b.n	8007e7a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3310      	adds	r3, #16
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff feef 	bl	8007c4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3324      	adds	r3, #36	; 0x24
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff feea 	bl	8007c4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e7a:	f001 fb43 	bl	8009504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e7e:	2301      	movs	r3, #1
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08e      	sub	sp, #56	; 0x38
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10c      	bne.n	8007eba <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	b672      	cpsid	i
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	b662      	cpsie	i
 8007eb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10c      	bne.n	8007eda <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec4:	b672      	cpsid	i
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	b662      	cpsie	i
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <xQueueGenericCreateStatic+0x5a>
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <xQueueGenericCreateStatic+0x5e>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <xQueueGenericCreateStatic+0x60>
 8007eea:	2300      	movs	r3, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10c      	bne.n	8007f0a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	b672      	cpsid	i
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	b662      	cpsie	i
 8007f04:	623b      	str	r3, [r7, #32]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <xQueueGenericCreateStatic+0x8a>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <xQueueGenericCreateStatic+0x8e>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xQueueGenericCreateStatic+0x90>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10c      	bne.n	8007f3a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	b672      	cpsid	i
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	b662      	cpsie	i
 8007f34:	61fb      	str	r3, [r7, #28]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f3a:	2348      	movs	r3, #72	; 0x48
 8007f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b48      	cmp	r3, #72	; 0x48
 8007f42:	d00c      	beq.n	8007f5e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	b672      	cpsid	i
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	b662      	cpsie	i
 8007f58:	61bb      	str	r3, [r7, #24]
}
 8007f5a:	bf00      	nop
 8007f5c:	e7fe      	b.n	8007f5c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00d      	beq.n	8007f86 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 f847 	bl	8008014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3730      	adds	r7, #48	; 0x30
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08a      	sub	sp, #40	; 0x28
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10c      	bne.n	8007fbe <xQueueGenericCreate+0x2e>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	b672      	cpsid	i
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	b662      	cpsie	i
 8007fb8:	613b      	str	r3, [r7, #16]
}
 8007fba:	bf00      	nop
 8007fbc:	e7fe      	b.n	8007fbc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	e004      	b.n	8007fd4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	fb02 f303 	mul.w	r3, r2, r3
 8007fd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	3348      	adds	r3, #72	; 0x48
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fb47 	bl	800966c <pvPortMalloc>
 8007fde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d011      	beq.n	800800a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	3348      	adds	r3, #72	; 0x48
 8007fee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ff8:	79fa      	ldrb	r2, [r7, #7]
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4613      	mov	r3, r2
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f805 	bl	8008014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800800a:	69bb      	ldr	r3, [r7, #24]
	}
 800800c:	4618      	mov	r0, r3
 800800e:	3720      	adds	r7, #32
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d103      	bne.n	8008030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e002      	b.n	8008036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008042:	2101      	movs	r1, #1
 8008044:	69b8      	ldr	r0, [r7, #24]
 8008046:	f7ff feb7 	bl	8007db8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00e      	beq.n	800807e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008072:	2300      	movs	r3, #0
 8008074:	2200      	movs	r2, #0
 8008076:	2100      	movs	r1, #0
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f837 	bl	80080ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	4603      	mov	r3, r0
 800808e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008090:	2301      	movs	r3, #1
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	2300      	movs	r3, #0
 8008096:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	461a      	mov	r2, r3
 800809c:	6939      	ldr	r1, [r7, #16]
 800809e:	6978      	ldr	r0, [r7, #20]
 80080a0:	f7ff ff76 	bl	8007f90 <xQueueGenericCreate>
 80080a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f7ff ffd3 	bl	8008052 <prvInitialiseMutex>

		return xNewQueue;
 80080ac:	68fb      	ldr	r3, [r7, #12]
	}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b088      	sub	sp, #32
 80080ba:	af02      	add	r7, sp, #8
 80080bc:	4603      	mov	r3, r0
 80080be:	6039      	str	r1, [r7, #0]
 80080c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080c2:	2301      	movs	r3, #1
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	2300      	movs	r3, #0
 80080c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2200      	movs	r2, #0
 80080d2:	6939      	ldr	r1, [r7, #16]
 80080d4:	6978      	ldr	r0, [r7, #20]
 80080d6:	f7ff fed9 	bl	8007e8c <xQueueGenericCreateStatic>
 80080da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f7ff ffb8 	bl	8008052 <prvInitialiseMutex>

		return xNewQueue;
 80080e2:	68fb      	ldr	r3, [r7, #12]
	}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08e      	sub	sp, #56	; 0x38
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080fa:	2300      	movs	r3, #0
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10c      	bne.n	8008122 <xQueueGenericSend+0x36>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <xQueueGenericSend+0x44>
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <xQueueGenericSend+0x48>
 8008130:	2301      	movs	r3, #1
 8008132:	e000      	b.n	8008136 <xQueueGenericSend+0x4a>
 8008134:	2300      	movs	r3, #0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10c      	bne.n	8008154 <xQueueGenericSend+0x68>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	b672      	cpsid	i
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	b662      	cpsie	i
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d103      	bne.n	8008162 <xQueueGenericSend+0x76>
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <xQueueGenericSend+0x7a>
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <xQueueGenericSend+0x7c>
 8008166:	2300      	movs	r3, #0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10c      	bne.n	8008186 <xQueueGenericSend+0x9a>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	b672      	cpsid	i
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	b662      	cpsie	i
 8008180:	623b      	str	r3, [r7, #32]
}
 8008182:	bf00      	nop
 8008184:	e7fe      	b.n	8008184 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008186:	f000 ff6f 	bl	8009068 <xTaskGetSchedulerState>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <xQueueGenericSend+0xaa>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <xQueueGenericSend+0xae>
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <xQueueGenericSend+0xb0>
 800819a:	2300      	movs	r3, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10c      	bne.n	80081ba <xQueueGenericSend+0xce>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	b672      	cpsid	i
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	b662      	cpsie	i
 80081b4:	61fb      	str	r3, [r7, #28]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081ba:	f001 f96f 	bl	800949c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d302      	bcc.n	80081d0 <xQueueGenericSend+0xe4>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d129      	bne.n	8008224 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081d6:	f000 f88f 	bl	80082f8 <prvCopyDataToQueue>
 80081da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d010      	beq.n	8008206 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	3324      	adds	r3, #36	; 0x24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fd79 	bl	8008ce0 <xTaskRemoveFromEventList>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d013      	beq.n	800821c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081f4:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <xQueueGenericSend+0x208>)
 80081f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	e00a      	b.n	800821c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800820c:	4b39      	ldr	r3, [pc, #228]	; (80082f4 <xQueueGenericSend+0x208>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800821c:	f001 f972 	bl	8009504 <vPortExitCritical>
				return pdPASS;
 8008220:	2301      	movs	r3, #1
 8008222:	e063      	b.n	80082ec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d103      	bne.n	8008232 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800822a:	f001 f96b 	bl	8009504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800822e:	2300      	movs	r3, #0
 8008230:	e05c      	b.n	80082ec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008234:	2b00      	cmp	r3, #0
 8008236:	d106      	bne.n	8008246 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008238:	f107 0314 	add.w	r3, r7, #20
 800823c:	4618      	mov	r0, r3
 800823e:	f000 fdb3 	bl	8008da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008242:	2301      	movs	r3, #1
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008246:	f001 f95d 	bl	8009504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800824a:	f000 fb5f 	bl	800890c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800824e:	f001 f925 	bl	800949c <vPortEnterCritical>
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008258:	b25b      	sxtb	r3, r3
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825e:	d103      	bne.n	8008268 <xQueueGenericSend+0x17c>
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800826e:	b25b      	sxtb	r3, r3
 8008270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008274:	d103      	bne.n	800827e <xQueueGenericSend+0x192>
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800827e:	f001 f941 	bl	8009504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008282:	1d3a      	adds	r2, r7, #4
 8008284:	f107 0314 	add.w	r3, r7, #20
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fda2 	bl	8008dd4 <xTaskCheckForTimeOut>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d124      	bne.n	80082e0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008298:	f000 f8ea 	bl	8008470 <prvIsQueueFull>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d018      	beq.n	80082d4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	3310      	adds	r3, #16
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fcf2 	bl	8008c94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082b2:	f000 f88b 	bl	80083cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082b6:	f000 fb37 	bl	8008928 <xTaskResumeAll>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f47f af7c 	bne.w	80081ba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80082c2:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <xQueueGenericSend+0x208>)
 80082c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	e772      	b.n	80081ba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082d6:	f000 f879 	bl	80083cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082da:	f000 fb25 	bl	8008928 <xTaskResumeAll>
 80082de:	e76c      	b.n	80081ba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082e2:	f000 f873 	bl	80083cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082e6:	f000 fb1f 	bl	8008928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3738      	adds	r7, #56	; 0x38
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10d      	bne.n	8008332 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d14d      	bne.n	80083ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 febe 	bl	80090a4 <xTaskPriorityDisinherit>
 8008328:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	609a      	str	r2, [r3, #8]
 8008330:	e043      	b.n	80083ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d119      	bne.n	800836c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6858      	ldr	r0, [r3, #4]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008340:	461a      	mov	r2, r3
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	f001 fb9a 	bl	8009a7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	441a      	add	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	429a      	cmp	r2, r3
 8008360:	d32b      	bcc.n	80083ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	e026      	b.n	80083ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	68d8      	ldr	r0, [r3, #12]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	461a      	mov	r2, r3
 8008376:	68b9      	ldr	r1, [r7, #8]
 8008378:	f001 fb80 	bl	8009a7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	425b      	negs	r3, r3
 8008386:	441a      	add	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	68da      	ldr	r2, [r3, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d207      	bcs.n	80083a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a0:	425b      	negs	r3, r3
 80083a2:	441a      	add	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d105      	bne.n	80083ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083c2:	697b      	ldr	r3, [r7, #20]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083d4:	f001 f862 	bl	800949c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083e0:	e011      	b.n	8008406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d012      	beq.n	8008410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3324      	adds	r3, #36	; 0x24
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 fc76 	bl	8008ce0 <xTaskRemoveFromEventList>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083fa:	f000 fd51 	bl	8008ea0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	3b01      	subs	r3, #1
 8008402:	b2db      	uxtb	r3, r3
 8008404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800840a:	2b00      	cmp	r3, #0
 800840c:	dce9      	bgt.n	80083e2 <prvUnlockQueue+0x16>
 800840e:	e000      	b.n	8008412 <prvUnlockQueue+0x46>
					break;
 8008410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	22ff      	movs	r2, #255	; 0xff
 8008416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800841a:	f001 f873 	bl	8009504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800841e:	f001 f83d 	bl	800949c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800842a:	e011      	b.n	8008450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d012      	beq.n	800845a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3310      	adds	r3, #16
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fc51 	bl	8008ce0 <xTaskRemoveFromEventList>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008444:	f000 fd2c 	bl	8008ea0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	3b01      	subs	r3, #1
 800844c:	b2db      	uxtb	r3, r3
 800844e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008454:	2b00      	cmp	r3, #0
 8008456:	dce9      	bgt.n	800842c <prvUnlockQueue+0x60>
 8008458:	e000      	b.n	800845c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800845a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	22ff      	movs	r2, #255	; 0xff
 8008460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008464:	f001 f84e 	bl	8009504 <vPortExitCritical>
}
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008478:	f001 f810 	bl	800949c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008484:	429a      	cmp	r2, r3
 8008486:	d102      	bne.n	800848e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	e001      	b.n	8008492 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008492:	f001 f837 	bl	8009504 <vPortExitCritical>

	return xReturn;
 8008496:	68fb      	ldr	r3, [r7, #12]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08e      	sub	sp, #56	; 0x38
 80084a4:	af04      	add	r7, sp, #16
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10c      	bne.n	80084ce <xTaskCreateStatic+0x2e>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	b672      	cpsid	i
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	b662      	cpsie	i
 80084c8:	623b      	str	r3, [r7, #32]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10c      	bne.n	80084ee <xTaskCreateStatic+0x4e>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	b672      	cpsid	i
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	b662      	cpsie	i
 80084e8:	61fb      	str	r3, [r7, #28]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084ee:	2354      	movs	r3, #84	; 0x54
 80084f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b54      	cmp	r3, #84	; 0x54
 80084f6:	d00c      	beq.n	8008512 <xTaskCreateStatic+0x72>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	b672      	cpsid	i
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	b662      	cpsie	i
 800850c:	61bb      	str	r3, [r7, #24]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008512:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	2b00      	cmp	r3, #0
 8008518:	d01e      	beq.n	8008558 <xTaskCreateStatic+0xb8>
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01b      	beq.n	8008558 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008528:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	2202      	movs	r2, #2
 800852e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008532:	2300      	movs	r3, #0
 8008534:	9303      	str	r3, [sp, #12]
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	9302      	str	r3, [sp, #8]
 800853a:	f107 0314 	add.w	r3, r7, #20
 800853e:	9301      	str	r3, [sp, #4]
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 f850 	bl	80085f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008552:	f000 f8d7 	bl	8008704 <prvAddNewTaskToReadyList>
 8008556:	e001      	b.n	800855c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008558:	2300      	movs	r3, #0
 800855a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800855c:	697b      	ldr	r3, [r7, #20]
	}
 800855e:	4618      	mov	r0, r3
 8008560:	3728      	adds	r7, #40	; 0x28
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008566:	b580      	push	{r7, lr}
 8008568:	b08c      	sub	sp, #48	; 0x30
 800856a:	af04      	add	r7, sp, #16
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	603b      	str	r3, [r7, #0]
 8008572:	4613      	mov	r3, r2
 8008574:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4618      	mov	r0, r3
 800857c:	f001 f876 	bl	800966c <pvPortMalloc>
 8008580:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00e      	beq.n	80085a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008588:	2054      	movs	r0, #84	; 0x54
 800858a:	f001 f86f 	bl	800966c <pvPortMalloc>
 800858e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
 800859c:	e005      	b.n	80085aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800859e:	6978      	ldr	r0, [r7, #20]
 80085a0:	f001 f92e 	bl	8009800 <vPortFree>
 80085a4:	e001      	b.n	80085aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d017      	beq.n	80085e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085b8:	88fa      	ldrh	r2, [r7, #6]
 80085ba:	2300      	movs	r3, #0
 80085bc:	9303      	str	r3, [sp, #12]
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	9302      	str	r3, [sp, #8]
 80085c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c4:	9301      	str	r3, [sp, #4]
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f80e 	bl	80085f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085d4:	69f8      	ldr	r0, [r7, #28]
 80085d6:	f000 f895 	bl	8008704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085da:	2301      	movs	r3, #1
 80085dc:	61bb      	str	r3, [r7, #24]
 80085de:	e002      	b.n	80085e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295
 80085e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085e6:	69bb      	ldr	r3, [r7, #24]
	}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008608:	440b      	add	r3, r1
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f023 0307 	bic.w	r3, r3, #7
 8008616:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00c      	beq.n	800863c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	b672      	cpsid	i
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	b662      	cpsie	i
 8008636:	617b      	str	r3, [r7, #20]
}
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01f      	beq.n	8008682 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	e012      	b.n	800866e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4413      	add	r3, r2
 800864e:	7819      	ldrb	r1, [r3, #0]
 8008650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	3334      	adds	r3, #52	; 0x34
 8008658:	460a      	mov	r2, r1
 800865a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d006      	beq.n	8008676 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	3301      	adds	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	2b0f      	cmp	r3, #15
 8008672:	d9e9      	bls.n	8008648 <prvInitialiseNewTask+0x58>
 8008674:	e000      	b.n	8008678 <prvInitialiseNewTask+0x88>
			{
				break;
 8008676:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008680:	e003      	b.n	800868a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	2b06      	cmp	r3, #6
 800868e:	d901      	bls.n	8008694 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008690:	2306      	movs	r3, #6
 8008692:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008698:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	2200      	movs	r2, #0
 80086a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff faef 	bl	8007c8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	3318      	adds	r3, #24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff faea 	bl	8007c8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	f1c3 0207 	rsb	r2, r3, #7
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	2200      	movs	r2, #0
 80086d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	68f9      	ldr	r1, [r7, #12]
 80086e2:	69b8      	ldr	r0, [r7, #24]
 80086e4:	f000 fdce 	bl	8009284 <pxPortInitialiseStack>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086fa:	bf00      	nop
 80086fc:	3720      	adds	r7, #32
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800870c:	f000 fec6 	bl	800949c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008710:	4b2a      	ldr	r3, [pc, #168]	; (80087bc <prvAddNewTaskToReadyList+0xb8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3301      	adds	r3, #1
 8008716:	4a29      	ldr	r2, [pc, #164]	; (80087bc <prvAddNewTaskToReadyList+0xb8>)
 8008718:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800871a:	4b29      	ldr	r3, [pc, #164]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008722:	4a27      	ldr	r2, [pc, #156]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008728:	4b24      	ldr	r3, [pc, #144]	; (80087bc <prvAddNewTaskToReadyList+0xb8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d110      	bne.n	8008752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008730:	f000 fbda 	bl	8008ee8 <prvInitialiseTaskLists>
 8008734:	e00d      	b.n	8008752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008736:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <prvAddNewTaskToReadyList+0xc0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800873e:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	429a      	cmp	r2, r3
 800874a:	d802      	bhi.n	8008752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800874c:	4a1c      	ldr	r2, [pc, #112]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008752:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <prvAddNewTaskToReadyList+0xc4>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3301      	adds	r3, #1
 8008758:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <prvAddNewTaskToReadyList+0xc4>)
 800875a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	2201      	movs	r2, #1
 8008762:	409a      	lsls	r2, r3
 8008764:	4b19      	ldr	r3, [pc, #100]	; (80087cc <prvAddNewTaskToReadyList+0xc8>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4313      	orrs	r3, r2
 800876a:	4a18      	ldr	r2, [pc, #96]	; (80087cc <prvAddNewTaskToReadyList+0xc8>)
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <prvAddNewTaskToReadyList+0xcc>)
 800877c:	441a      	add	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3304      	adds	r3, #4
 8008782:	4619      	mov	r1, r3
 8008784:	4610      	mov	r0, r2
 8008786:	f7ff fa8f 	bl	8007ca8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800878a:	f000 febb 	bl	8009504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800878e:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <prvAddNewTaskToReadyList+0xc0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00e      	beq.n	80087b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008796:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <prvAddNewTaskToReadyList+0xbc>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d207      	bcs.n	80087b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087a4:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <prvAddNewTaskToReadyList+0xd0>)
 80087a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20000384 	.word	0x20000384
 80087c0:	20000284 	.word	0x20000284
 80087c4:	20000390 	.word	0x20000390
 80087c8:	200003a0 	.word	0x200003a0
 80087cc:	2000038c 	.word	0x2000038c
 80087d0:	20000288 	.word	0x20000288
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d019      	beq.n	800881e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087ea:	4b14      	ldr	r3, [pc, #80]	; (800883c <vTaskDelay+0x64>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00c      	beq.n	800880c <vTaskDelay+0x34>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	b672      	cpsid	i
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	b662      	cpsie	i
 8008806:	60bb      	str	r3, [r7, #8]
}
 8008808:	bf00      	nop
 800880a:	e7fe      	b.n	800880a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800880c:	f000 f87e 	bl	800890c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fcd0 	bl	80091b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008818:	f000 f886 	bl	8008928 <xTaskResumeAll>
 800881c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d107      	bne.n	8008834 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008824:	4b06      	ldr	r3, [pc, #24]	; (8008840 <vTaskDelay+0x68>)
 8008826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	200003ac 	.word	0x200003ac
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08a      	sub	sp, #40	; 0x28
 8008848:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008852:	463a      	mov	r2, r7
 8008854:	1d39      	adds	r1, r7, #4
 8008856:	f107 0308 	add.w	r3, r7, #8
 800885a:	4618      	mov	r0, r3
 800885c:	f7f7 fe54 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	9202      	str	r2, [sp, #8]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	2300      	movs	r3, #0
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2300      	movs	r3, #0
 8008870:	460a      	mov	r2, r1
 8008872:	4920      	ldr	r1, [pc, #128]	; (80088f4 <vTaskStartScheduler+0xb0>)
 8008874:	4820      	ldr	r0, [pc, #128]	; (80088f8 <vTaskStartScheduler+0xb4>)
 8008876:	f7ff fe13 	bl	80084a0 <xTaskCreateStatic>
 800887a:	4603      	mov	r3, r0
 800887c:	4a1f      	ldr	r2, [pc, #124]	; (80088fc <vTaskStartScheduler+0xb8>)
 800887e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008880:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <vTaskStartScheduler+0xb8>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008888:	2301      	movs	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e001      	b.n	8008892 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d118      	bne.n	80088ca <vTaskStartScheduler+0x86>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	b672      	cpsid	i
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	b662      	cpsie	i
 80088ac:	613b      	str	r3, [r7, #16]
}
 80088ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088b0:	4b13      	ldr	r3, [pc, #76]	; (8008900 <vTaskStartScheduler+0xbc>)
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295
 80088b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088b8:	4b12      	ldr	r3, [pc, #72]	; (8008904 <vTaskStartScheduler+0xc0>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088be:	4b12      	ldr	r3, [pc, #72]	; (8008908 <vTaskStartScheduler+0xc4>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088c4:	f000 fd6c 	bl	80093a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088c8:	e010      	b.n	80088ec <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d10c      	bne.n	80088ec <vTaskStartScheduler+0xa8>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	b672      	cpsid	i
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	b662      	cpsie	i
 80088e6:	60fb      	str	r3, [r7, #12]
}
 80088e8:	bf00      	nop
 80088ea:	e7fe      	b.n	80088ea <vTaskStartScheduler+0xa6>
}
 80088ec:	bf00      	nop
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	08009b74 	.word	0x08009b74
 80088f8:	08008eb9 	.word	0x08008eb9
 80088fc:	200003a8 	.word	0x200003a8
 8008900:	200003a4 	.word	0x200003a4
 8008904:	20000390 	.word	0x20000390
 8008908:	20000388 	.word	0x20000388

0800890c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <vTaskSuspendAll+0x18>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	4a03      	ldr	r2, [pc, #12]	; (8008924 <vTaskSuspendAll+0x18>)
 8008918:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800891a:	bf00      	nop
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	200003ac 	.word	0x200003ac

08008928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008932:	2300      	movs	r3, #0
 8008934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008936:	4b42      	ldr	r3, [pc, #264]	; (8008a40 <xTaskResumeAll+0x118>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10c      	bne.n	8008958 <xTaskResumeAll+0x30>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	b672      	cpsid	i
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	b662      	cpsie	i
 8008952:	603b      	str	r3, [r7, #0]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008958:	f000 fda0 	bl	800949c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800895c:	4b38      	ldr	r3, [pc, #224]	; (8008a40 <xTaskResumeAll+0x118>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3b01      	subs	r3, #1
 8008962:	4a37      	ldr	r2, [pc, #220]	; (8008a40 <xTaskResumeAll+0x118>)
 8008964:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008966:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <xTaskResumeAll+0x118>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d161      	bne.n	8008a32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800896e:	4b35      	ldr	r3, [pc, #212]	; (8008a44 <xTaskResumeAll+0x11c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d05d      	beq.n	8008a32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008976:	e02e      	b.n	80089d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008978:	4b33      	ldr	r3, [pc, #204]	; (8008a48 <xTaskResumeAll+0x120>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3318      	adds	r3, #24
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff f9ec 	bl	8007d62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3304      	adds	r3, #4
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff f9e7 	bl	8007d62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	2201      	movs	r2, #1
 800899a:	409a      	lsls	r2, r3
 800899c:	4b2b      	ldr	r3, [pc, #172]	; (8008a4c <xTaskResumeAll+0x124>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	4a2a      	ldr	r2, [pc, #168]	; (8008a4c <xTaskResumeAll+0x124>)
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4a27      	ldr	r2, [pc, #156]	; (8008a50 <xTaskResumeAll+0x128>)
 80089b4:	441a      	add	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3304      	adds	r3, #4
 80089ba:	4619      	mov	r1, r3
 80089bc:	4610      	mov	r0, r2
 80089be:	f7ff f973 	bl	8007ca8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c6:	4b23      	ldr	r3, [pc, #140]	; (8008a54 <xTaskResumeAll+0x12c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d302      	bcc.n	80089d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80089d0:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <xTaskResumeAll+0x130>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089d6:	4b1c      	ldr	r3, [pc, #112]	; (8008a48 <xTaskResumeAll+0x120>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1cc      	bne.n	8008978 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089e4:	f000 fb20 	bl	8009028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089e8:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <xTaskResumeAll+0x134>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d010      	beq.n	8008a16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089f4:	f000 f836 	bl	8008a64 <xTaskIncrementTick>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089fe:	4b16      	ldr	r3, [pc, #88]	; (8008a58 <xTaskResumeAll+0x130>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1f1      	bne.n	80089f4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008a10:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <xTaskResumeAll+0x134>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a16:	4b10      	ldr	r3, [pc, #64]	; (8008a58 <xTaskResumeAll+0x130>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a22:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <xTaskResumeAll+0x138>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a32:	f000 fd67 	bl	8009504 <vPortExitCritical>

	return xAlreadyYielded;
 8008a36:	68bb      	ldr	r3, [r7, #8]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	200003ac 	.word	0x200003ac
 8008a44:	20000384 	.word	0x20000384
 8008a48:	20000344 	.word	0x20000344
 8008a4c:	2000038c 	.word	0x2000038c
 8008a50:	20000288 	.word	0x20000288
 8008a54:	20000284 	.word	0x20000284
 8008a58:	20000398 	.word	0x20000398
 8008a5c:	20000394 	.word	0x20000394
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a6e:	4b4f      	ldr	r3, [pc, #316]	; (8008bac <xTaskIncrementTick+0x148>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 808a 	bne.w	8008b8c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a78:	4b4d      	ldr	r3, [pc, #308]	; (8008bb0 <xTaskIncrementTick+0x14c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a80:	4a4b      	ldr	r2, [pc, #300]	; (8008bb0 <xTaskIncrementTick+0x14c>)
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d122      	bne.n	8008ad2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a8c:	4b49      	ldr	r3, [pc, #292]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00c      	beq.n	8008ab0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	b672      	cpsid	i
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	b662      	cpsie	i
 8008aaa:	603b      	str	r3, [r7, #0]
}
 8008aac:	bf00      	nop
 8008aae:	e7fe      	b.n	8008aae <xTaskIncrementTick+0x4a>
 8008ab0:	4b40      	ldr	r3, [pc, #256]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	4b40      	ldr	r3, [pc, #256]	; (8008bb8 <xTaskIncrementTick+0x154>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a3e      	ldr	r2, [pc, #248]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	4a3e      	ldr	r2, [pc, #248]	; (8008bb8 <xTaskIncrementTick+0x154>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	4b3d      	ldr	r3, [pc, #244]	; (8008bbc <xTaskIncrementTick+0x158>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	4a3c      	ldr	r2, [pc, #240]	; (8008bbc <xTaskIncrementTick+0x158>)
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	f000 faab 	bl	8009028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ad2:	4b3b      	ldr	r3, [pc, #236]	; (8008bc0 <xTaskIncrementTick+0x15c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d348      	bcc.n	8008b6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008adc:	4b35      	ldr	r3, [pc, #212]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d104      	bne.n	8008af0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae6:	4b36      	ldr	r3, [pc, #216]	; (8008bc0 <xTaskIncrementTick+0x15c>)
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	601a      	str	r2, [r3, #0]
					break;
 8008aee:	e03e      	b.n	8008b6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af0:	4b30      	ldr	r3, [pc, #192]	; (8008bb4 <xTaskIncrementTick+0x150>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d203      	bcs.n	8008b10 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b08:	4a2d      	ldr	r2, [pc, #180]	; (8008bc0 <xTaskIncrementTick+0x15c>)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b0e:	e02e      	b.n	8008b6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff f924 	bl	8007d62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d004      	beq.n	8008b2c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	3318      	adds	r3, #24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f91b 	bl	8007d62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b30:	2201      	movs	r2, #1
 8008b32:	409a      	lsls	r2, r3
 8008b34:	4b23      	ldr	r3, [pc, #140]	; (8008bc4 <xTaskIncrementTick+0x160>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	4a22      	ldr	r2, [pc, #136]	; (8008bc4 <xTaskIncrementTick+0x160>)
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4a1f      	ldr	r2, [pc, #124]	; (8008bc8 <xTaskIncrementTick+0x164>)
 8008b4c:	441a      	add	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	3304      	adds	r3, #4
 8008b52:	4619      	mov	r1, r3
 8008b54:	4610      	mov	r0, r2
 8008b56:	f7ff f8a7 	bl	8007ca8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5e:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <xTaskIncrementTick+0x168>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d3b9      	bcc.n	8008adc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b6c:	e7b6      	b.n	8008adc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b6e:	4b17      	ldr	r3, [pc, #92]	; (8008bcc <xTaskIncrementTick+0x168>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	4914      	ldr	r1, [pc, #80]	; (8008bc8 <xTaskIncrementTick+0x164>)
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d907      	bls.n	8008b96 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008b86:	2301      	movs	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	e004      	b.n	8008b96 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b8c:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <xTaskIncrementTick+0x16c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	4a0f      	ldr	r2, [pc, #60]	; (8008bd0 <xTaskIncrementTick+0x16c>)
 8008b94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b96:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <xTaskIncrementTick+0x170>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008ba2:	697b      	ldr	r3, [r7, #20]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	200003ac 	.word	0x200003ac
 8008bb0:	20000388 	.word	0x20000388
 8008bb4:	2000033c 	.word	0x2000033c
 8008bb8:	20000340 	.word	0x20000340
 8008bbc:	2000039c 	.word	0x2000039c
 8008bc0:	200003a4 	.word	0x200003a4
 8008bc4:	2000038c 	.word	0x2000038c
 8008bc8:	20000288 	.word	0x20000288
 8008bcc:	20000284 	.word	0x20000284
 8008bd0:	20000394 	.word	0x20000394
 8008bd4:	20000398 	.word	0x20000398

08008bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bde:	4b28      	ldr	r3, [pc, #160]	; (8008c80 <vTaskSwitchContext+0xa8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008be6:	4b27      	ldr	r3, [pc, #156]	; (8008c84 <vTaskSwitchContext+0xac>)
 8008be8:	2201      	movs	r2, #1
 8008bea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bec:	e041      	b.n	8008c72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008bee:	4b25      	ldr	r3, [pc, #148]	; (8008c84 <vTaskSwitchContext+0xac>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf4:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <vTaskSwitchContext+0xb0>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	fab3 f383 	clz	r3, r3
 8008c00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008c02:	7afb      	ldrb	r3, [r7, #11]
 8008c04:	f1c3 031f 	rsb	r3, r3, #31
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	4920      	ldr	r1, [pc, #128]	; (8008c8c <vTaskSwitchContext+0xb4>)
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10c      	bne.n	8008c38 <vTaskSwitchContext+0x60>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	b672      	cpsid	i
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	b662      	cpsie	i
 8008c32:	607b      	str	r3, [r7, #4]
}
 8008c34:	bf00      	nop
 8008c36:	e7fe      	b.n	8008c36 <vTaskSwitchContext+0x5e>
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4a12      	ldr	r2, [pc, #72]	; (8008c8c <vTaskSwitchContext+0xb4>)
 8008c44:	4413      	add	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	605a      	str	r2, [r3, #4]
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d104      	bne.n	8008c68 <vTaskSwitchContext+0x90>
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	605a      	str	r2, [r3, #4]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	4a08      	ldr	r2, [pc, #32]	; (8008c90 <vTaskSwitchContext+0xb8>)
 8008c70:	6013      	str	r3, [r2, #0]
}
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	200003ac 	.word	0x200003ac
 8008c84:	20000398 	.word	0x20000398
 8008c88:	2000038c 	.word	0x2000038c
 8008c8c:	20000288 	.word	0x20000288
 8008c90:	20000284 	.word	0x20000284

08008c94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10c      	bne.n	8008cbe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	b672      	cpsid	i
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	b662      	cpsie	i
 8008cb8:	60fb      	str	r3, [r7, #12]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cbe:	4b07      	ldr	r3, [pc, #28]	; (8008cdc <vTaskPlaceOnEventList+0x48>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3318      	adds	r3, #24
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff f812 	bl	8007cf0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ccc:	2101      	movs	r1, #1
 8008cce:	6838      	ldr	r0, [r7, #0]
 8008cd0:	f000 fa72 	bl	80091b8 <prvAddCurrentTaskToDelayedList>
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20000284 	.word	0x20000284

08008ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10c      	bne.n	8008d10 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	b672      	cpsid	i
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	b662      	cpsie	i
 8008d0a:	60fb      	str	r3, [r7, #12]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	3318      	adds	r3, #24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff f824 	bl	8007d62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d1a:	4b1d      	ldr	r3, [pc, #116]	; (8008d90 <xTaskRemoveFromEventList+0xb0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d11c      	bne.n	8008d5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff f81b 	bl	8007d62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	2201      	movs	r2, #1
 8008d32:	409a      	lsls	r2, r3
 8008d34:	4b17      	ldr	r3, [pc, #92]	; (8008d94 <xTaskRemoveFromEventList+0xb4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	4a16      	ldr	r2, [pc, #88]	; (8008d94 <xTaskRemoveFromEventList+0xb4>)
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4a13      	ldr	r2, [pc, #76]	; (8008d98 <xTaskRemoveFromEventList+0xb8>)
 8008d4c:	441a      	add	r2, r3
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f7fe ffa7 	bl	8007ca8 <vListInsertEnd>
 8008d5a:	e005      	b.n	8008d68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3318      	adds	r3, #24
 8008d60:	4619      	mov	r1, r3
 8008d62:	480e      	ldr	r0, [pc, #56]	; (8008d9c <xTaskRemoveFromEventList+0xbc>)
 8008d64:	f7fe ffa0 	bl	8007ca8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6c:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <xTaskRemoveFromEventList+0xc0>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d905      	bls.n	8008d82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d76:	2301      	movs	r3, #1
 8008d78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <xTaskRemoveFromEventList+0xc4>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	e001      	b.n	8008d86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d86:	697b      	ldr	r3, [r7, #20]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	200003ac 	.word	0x200003ac
 8008d94:	2000038c 	.word	0x2000038c
 8008d98:	20000288 	.word	0x20000288
 8008d9c:	20000344 	.word	0x20000344
 8008da0:	20000284 	.word	0x20000284
 8008da4:	20000398 	.word	0x20000398

08008da8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008db0:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <vTaskInternalSetTimeOutState+0x24>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <vTaskInternalSetTimeOutState+0x28>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	605a      	str	r2, [r3, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	2000039c 	.word	0x2000039c
 8008dd0:	20000388 	.word	0x20000388

08008dd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10c      	bne.n	8008dfe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	b672      	cpsid	i
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	b662      	cpsie	i
 8008df8:	613b      	str	r3, [r7, #16]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10c      	bne.n	8008e1e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	b672      	cpsid	i
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	b662      	cpsie	i
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008e1e:	f000 fb3d 	bl	800949c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e22:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <xTaskCheckForTimeOut+0xc4>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d102      	bne.n	8008e42 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61fb      	str	r3, [r7, #28]
 8008e40:	e023      	b.n	8008e8a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <xTaskCheckForTimeOut+0xc8>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d007      	beq.n	8008e5e <xTaskCheckForTimeOut+0x8a>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d302      	bcc.n	8008e5e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	61fb      	str	r3, [r7, #28]
 8008e5c:	e015      	b.n	8008e8a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d20b      	bcs.n	8008e80 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	1ad2      	subs	r2, r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff ff97 	bl	8008da8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	61fb      	str	r3, [r7, #28]
 8008e7e:	e004      	b.n	8008e8a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e86:	2301      	movs	r3, #1
 8008e88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e8a:	f000 fb3b 	bl	8009504 <vPortExitCritical>

	return xReturn;
 8008e8e:	69fb      	ldr	r3, [r7, #28]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	20000388 	.word	0x20000388
 8008e9c:	2000039c 	.word	0x2000039c

08008ea0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ea4:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <vTaskMissedYield+0x14>)
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]
}
 8008eaa:	bf00      	nop
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	20000398 	.word	0x20000398

08008eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ec0:	f000 f852 	bl	8008f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ec4:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <prvIdleTask+0x28>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d9f9      	bls.n	8008ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <prvIdleTask+0x2c>)
 8008ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008edc:	e7f0      	b.n	8008ec0 <prvIdleTask+0x8>
 8008ede:	bf00      	nop
 8008ee0:	20000288 	.word	0x20000288
 8008ee4:	e000ed04 	.word	0xe000ed04

08008ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eee:	2300      	movs	r3, #0
 8008ef0:	607b      	str	r3, [r7, #4]
 8008ef2:	e00c      	b.n	8008f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4a12      	ldr	r2, [pc, #72]	; (8008f48 <prvInitialiseTaskLists+0x60>)
 8008f00:	4413      	add	r3, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fe fea3 	bl	8007c4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b06      	cmp	r3, #6
 8008f12:	d9ef      	bls.n	8008ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f14:	480d      	ldr	r0, [pc, #52]	; (8008f4c <prvInitialiseTaskLists+0x64>)
 8008f16:	f7fe fe9a 	bl	8007c4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f1a:	480d      	ldr	r0, [pc, #52]	; (8008f50 <prvInitialiseTaskLists+0x68>)
 8008f1c:	f7fe fe97 	bl	8007c4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f20:	480c      	ldr	r0, [pc, #48]	; (8008f54 <prvInitialiseTaskLists+0x6c>)
 8008f22:	f7fe fe94 	bl	8007c4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f26:	480c      	ldr	r0, [pc, #48]	; (8008f58 <prvInitialiseTaskLists+0x70>)
 8008f28:	f7fe fe91 	bl	8007c4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f2c:	480b      	ldr	r0, [pc, #44]	; (8008f5c <prvInitialiseTaskLists+0x74>)
 8008f2e:	f7fe fe8e 	bl	8007c4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <prvInitialiseTaskLists+0x78>)
 8008f34:	4a05      	ldr	r2, [pc, #20]	; (8008f4c <prvInitialiseTaskLists+0x64>)
 8008f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <prvInitialiseTaskLists+0x7c>)
 8008f3a:	4a05      	ldr	r2, [pc, #20]	; (8008f50 <prvInitialiseTaskLists+0x68>)
 8008f3c:	601a      	str	r2, [r3, #0]
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000288 	.word	0x20000288
 8008f4c:	20000314 	.word	0x20000314
 8008f50:	20000328 	.word	0x20000328
 8008f54:	20000344 	.word	0x20000344
 8008f58:	20000358 	.word	0x20000358
 8008f5c:	20000370 	.word	0x20000370
 8008f60:	2000033c 	.word	0x2000033c
 8008f64:	20000340 	.word	0x20000340

08008f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f6e:	e019      	b.n	8008fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f70:	f000 fa94 	bl	800949c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f74:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <prvCheckTasksWaitingTermination+0x50>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe feee 	bl	8007d62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f86:	4b0d      	ldr	r3, [pc, #52]	; (8008fbc <prvCheckTasksWaitingTermination+0x54>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	4a0b      	ldr	r2, [pc, #44]	; (8008fbc <prvCheckTasksWaitingTermination+0x54>)
 8008f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <prvCheckTasksWaitingTermination+0x58>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	4a0a      	ldr	r2, [pc, #40]	; (8008fc0 <prvCheckTasksWaitingTermination+0x58>)
 8008f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f9a:	f000 fab3 	bl	8009504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f810 	bl	8008fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fa4:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <prvCheckTasksWaitingTermination+0x58>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e1      	bne.n	8008f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000358 	.word	0x20000358
 8008fbc:	20000384 	.word	0x20000384
 8008fc0:	2000036c 	.word	0x2000036c

08008fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d108      	bne.n	8008fe8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fc10 	bl	8009800 <vPortFree>
				vPortFree( pxTCB );
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc0d 	bl	8009800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fe6:	e01a      	b.n	800901e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d103      	bne.n	8008ffa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fc04 	bl	8009800 <vPortFree>
	}
 8008ff8:	e011      	b.n	800901e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009000:	2b02      	cmp	r3, #2
 8009002:	d00c      	beq.n	800901e <prvDeleteTCB+0x5a>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	b672      	cpsid	i
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	b662      	cpsie	i
 8009018:	60fb      	str	r3, [r7, #12]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <prvDeleteTCB+0x58>
	}
 800901e:	bf00      	nop
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800902e:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <prvResetNextTaskUnblockTime+0x38>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d104      	bne.n	8009042 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009038:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <prvResetNextTaskUnblockTime+0x3c>)
 800903a:	f04f 32ff 	mov.w	r2, #4294967295
 800903e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009040:	e008      	b.n	8009054 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009042:	4b07      	ldr	r3, [pc, #28]	; (8009060 <prvResetNextTaskUnblockTime+0x38>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a04      	ldr	r2, [pc, #16]	; (8009064 <prvResetNextTaskUnblockTime+0x3c>)
 8009052:	6013      	str	r3, [r2, #0]
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	2000033c 	.word	0x2000033c
 8009064:	200003a4 	.word	0x200003a4

08009068 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800906e:	4b0b      	ldr	r3, [pc, #44]	; (800909c <xTaskGetSchedulerState+0x34>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009076:	2301      	movs	r3, #1
 8009078:	607b      	str	r3, [r7, #4]
 800907a:	e008      	b.n	800908e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907c:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <xTaskGetSchedulerState+0x38>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009084:	2302      	movs	r3, #2
 8009086:	607b      	str	r3, [r7, #4]
 8009088:	e001      	b.n	800908e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800908e:	687b      	ldr	r3, [r7, #4]
	}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	20000390 	.word	0x20000390
 80090a0:	200003ac 	.word	0x200003ac

080090a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d072      	beq.n	80091a0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090ba:	4b3c      	ldr	r3, [pc, #240]	; (80091ac <xTaskPriorityDisinherit+0x108>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d00c      	beq.n	80090de <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	b672      	cpsid	i
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	b662      	cpsie	i
 80090d8:	60fb      	str	r3, [r7, #12]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10c      	bne.n	8009100 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	b672      	cpsid	i
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	b662      	cpsie	i
 80090fa:	60bb      	str	r3, [r7, #8]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009104:	1e5a      	subs	r2, r3, #1
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009112:	429a      	cmp	r2, r3
 8009114:	d044      	beq.n	80091a0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800911a:	2b00      	cmp	r3, #0
 800911c:	d140      	bne.n	80091a0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	3304      	adds	r3, #4
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fe1d 	bl	8007d62 <uxListRemove>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d115      	bne.n	800915a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009132:	491f      	ldr	r1, [pc, #124]	; (80091b0 <xTaskPriorityDisinherit+0x10c>)
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10a      	bne.n	800915a <xTaskPriorityDisinherit+0xb6>
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	2201      	movs	r2, #1
 800914a:	fa02 f303 	lsl.w	r3, r2, r3
 800914e:	43da      	mvns	r2, r3
 8009150:	4b18      	ldr	r3, [pc, #96]	; (80091b4 <xTaskPriorityDisinherit+0x110>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4013      	ands	r3, r2
 8009156:	4a17      	ldr	r2, [pc, #92]	; (80091b4 <xTaskPriorityDisinherit+0x110>)
 8009158:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009166:	f1c3 0207 	rsb	r2, r3, #7
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	2201      	movs	r2, #1
 8009174:	409a      	lsls	r2, r3
 8009176:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <xTaskPriorityDisinherit+0x110>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4313      	orrs	r3, r2
 800917c:	4a0d      	ldr	r2, [pc, #52]	; (80091b4 <xTaskPriorityDisinherit+0x110>)
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4a08      	ldr	r2, [pc, #32]	; (80091b0 <xTaskPriorityDisinherit+0x10c>)
 800918e:	441a      	add	r2, r3
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	3304      	adds	r3, #4
 8009194:	4619      	mov	r1, r3
 8009196:	4610      	mov	r0, r2
 8009198:	f7fe fd86 	bl	8007ca8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800919c:	2301      	movs	r3, #1
 800919e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091a0:	697b      	ldr	r3, [r7, #20]
	}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000284 	.word	0x20000284
 80091b0:	20000288 	.word	0x20000288
 80091b4:	2000038c 	.word	0x2000038c

080091b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091c2:	4b29      	ldr	r3, [pc, #164]	; (8009268 <prvAddCurrentTaskToDelayedList+0xb0>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c8:	4b28      	ldr	r3, [pc, #160]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3304      	adds	r3, #4
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fdc7 	bl	8007d62 <uxListRemove>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10b      	bne.n	80091f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80091da:	4b24      	ldr	r3, [pc, #144]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	2201      	movs	r2, #1
 80091e2:	fa02 f303 	lsl.w	r3, r2, r3
 80091e6:	43da      	mvns	r2, r3
 80091e8:	4b21      	ldr	r3, [pc, #132]	; (8009270 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4013      	ands	r3, r2
 80091ee:	4a20      	ldr	r2, [pc, #128]	; (8009270 <prvAddCurrentTaskToDelayedList+0xb8>)
 80091f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f8:	d10a      	bne.n	8009210 <prvAddCurrentTaskToDelayedList+0x58>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d007      	beq.n	8009210 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009200:	4b1a      	ldr	r3, [pc, #104]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3304      	adds	r3, #4
 8009206:	4619      	mov	r1, r3
 8009208:	481a      	ldr	r0, [pc, #104]	; (8009274 <prvAddCurrentTaskToDelayedList+0xbc>)
 800920a:	f7fe fd4d 	bl	8007ca8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800920e:	e026      	b.n	800925e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4413      	add	r3, r2
 8009216:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009218:	4b14      	ldr	r3, [pc, #80]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	429a      	cmp	r2, r3
 8009226:	d209      	bcs.n	800923c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009228:	4b13      	ldr	r3, [pc, #76]	; (8009278 <prvAddCurrentTaskToDelayedList+0xc0>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3304      	adds	r3, #4
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f7fe fd5b 	bl	8007cf0 <vListInsert>
}
 800923a:	e010      	b.n	800925e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800923c:	4b0f      	ldr	r3, [pc, #60]	; (800927c <prvAddCurrentTaskToDelayedList+0xc4>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3304      	adds	r3, #4
 8009246:	4619      	mov	r1, r3
 8009248:	4610      	mov	r0, r2
 800924a:	f7fe fd51 	bl	8007cf0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800924e:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	429a      	cmp	r2, r3
 8009256:	d202      	bcs.n	800925e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009258:	4a09      	ldr	r2, [pc, #36]	; (8009280 <prvAddCurrentTaskToDelayedList+0xc8>)
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6013      	str	r3, [r2, #0]
}
 800925e:	bf00      	nop
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20000388 	.word	0x20000388
 800926c:	20000284 	.word	0x20000284
 8009270:	2000038c 	.word	0x2000038c
 8009274:	20000370 	.word	0x20000370
 8009278:	20000340 	.word	0x20000340
 800927c:	2000033c 	.word	0x2000033c
 8009280:	200003a4 	.word	0x200003a4

08009284 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3b04      	subs	r3, #4
 8009294:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800929c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3b04      	subs	r3, #4
 80092a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f023 0201 	bic.w	r2, r3, #1
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3b04      	subs	r3, #4
 80092b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092b4:	4a0c      	ldr	r2, [pc, #48]	; (80092e8 <pxPortInitialiseStack+0x64>)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3b14      	subs	r3, #20
 80092be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3b04      	subs	r3, #4
 80092ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f06f 0202 	mvn.w	r2, #2
 80092d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3b20      	subs	r3, #32
 80092d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092da:	68fb      	ldr	r3, [r7, #12]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	080092ed 	.word	0x080092ed

080092ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092f6:	4b14      	ldr	r3, [pc, #80]	; (8009348 <prvTaskExitError+0x5c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d00c      	beq.n	800931a <prvTaskExitError+0x2e>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	b672      	cpsid	i
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	b662      	cpsie	i
 8009314:	60fb      	str	r3, [r7, #12]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <prvTaskExitError+0x2c>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	b672      	cpsid	i
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	b662      	cpsie	i
 800932e:	60bb      	str	r3, [r7, #8]
}
 8009330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009332:	bf00      	nop
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0fc      	beq.n	8009334 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800933a:	bf00      	nop
 800933c:	bf00      	nop
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	2000000c 	.word	0x2000000c
 800934c:	00000000 	.word	0x00000000

08009350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <pxCurrentTCBConst2>)
 8009352:	6819      	ldr	r1, [r3, #0]
 8009354:	6808      	ldr	r0, [r1, #0]
 8009356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	f380 8809 	msr	PSP, r0
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f380 8811 	msr	BASEPRI, r0
 800936a:	4770      	bx	lr
 800936c:	f3af 8000 	nop.w

08009370 <pxCurrentTCBConst2>:
 8009370:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop

08009378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009378:	4808      	ldr	r0, [pc, #32]	; (800939c <prvPortStartFirstTask+0x24>)
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	6800      	ldr	r0, [r0, #0]
 800937e:	f380 8808 	msr	MSP, r0
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8814 	msr	CONTROL, r0
 800938a:	b662      	cpsie	i
 800938c:	b661      	cpsie	f
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	df00      	svc	0
 8009398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800939a:	bf00      	nop
 800939c:	e000ed08 	.word	0xe000ed08

080093a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093a6:	4b37      	ldr	r3, [pc, #220]	; (8009484 <xPortStartScheduler+0xe4>)
 80093a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	22ff      	movs	r2, #255	; 0xff
 80093b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	4b2f      	ldr	r3, [pc, #188]	; (8009488 <xPortStartScheduler+0xe8>)
 80093cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093ce:	4b2f      	ldr	r3, [pc, #188]	; (800948c <xPortStartScheduler+0xec>)
 80093d0:	2207      	movs	r2, #7
 80093d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093d4:	e009      	b.n	80093ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093d6:	4b2d      	ldr	r3, [pc, #180]	; (800948c <xPortStartScheduler+0xec>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3b01      	subs	r3, #1
 80093dc:	4a2b      	ldr	r2, [pc, #172]	; (800948c <xPortStartScheduler+0xec>)
 80093de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f2:	2b80      	cmp	r3, #128	; 0x80
 80093f4:	d0ef      	beq.n	80093d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093f6:	4b25      	ldr	r3, [pc, #148]	; (800948c <xPortStartScheduler+0xec>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f1c3 0307 	rsb	r3, r3, #7
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d00c      	beq.n	800941c <xPortStartScheduler+0x7c>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	b672      	cpsid	i
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	b662      	cpsie	i
 8009416:	60bb      	str	r3, [r7, #8]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800941c:	4b1b      	ldr	r3, [pc, #108]	; (800948c <xPortStartScheduler+0xec>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	4a1a      	ldr	r2, [pc, #104]	; (800948c <xPortStartScheduler+0xec>)
 8009424:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009426:	4b19      	ldr	r3, [pc, #100]	; (800948c <xPortStartScheduler+0xec>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800942e:	4a17      	ldr	r2, [pc, #92]	; (800948c <xPortStartScheduler+0xec>)
 8009430:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	b2da      	uxtb	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800943a:	4b15      	ldr	r3, [pc, #84]	; (8009490 <xPortStartScheduler+0xf0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a14      	ldr	r2, [pc, #80]	; (8009490 <xPortStartScheduler+0xf0>)
 8009440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009444:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009446:	4b12      	ldr	r3, [pc, #72]	; (8009490 <xPortStartScheduler+0xf0>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a11      	ldr	r2, [pc, #68]	; (8009490 <xPortStartScheduler+0xf0>)
 800944c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009450:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009452:	f000 f8dd 	bl	8009610 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009456:	4b0f      	ldr	r3, [pc, #60]	; (8009494 <xPortStartScheduler+0xf4>)
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800945c:	f000 f8fc 	bl	8009658 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009460:	4b0d      	ldr	r3, [pc, #52]	; (8009498 <xPortStartScheduler+0xf8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a0c      	ldr	r2, [pc, #48]	; (8009498 <xPortStartScheduler+0xf8>)
 8009466:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800946a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800946c:	f7ff ff84 	bl	8009378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009470:	f7ff fbb2 	bl	8008bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8009474:	f7ff ff3a 	bl	80092ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	e000e400 	.word	0xe000e400
 8009488:	200003b0 	.word	0x200003b0
 800948c:	200003b4 	.word	0x200003b4
 8009490:	e000ed20 	.word	0xe000ed20
 8009494:	2000000c 	.word	0x2000000c
 8009498:	e000ef34 	.word	0xe000ef34

0800949c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	b672      	cpsid	i
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	b662      	cpsie	i
 80094b6:	607b      	str	r3, [r7, #4]
}
 80094b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ba:	4b10      	ldr	r3, [pc, #64]	; (80094fc <vPortEnterCritical+0x60>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3301      	adds	r3, #1
 80094c0:	4a0e      	ldr	r2, [pc, #56]	; (80094fc <vPortEnterCritical+0x60>)
 80094c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094c4:	4b0d      	ldr	r3, [pc, #52]	; (80094fc <vPortEnterCritical+0x60>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d111      	bne.n	80094f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <vPortEnterCritical+0x64>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00c      	beq.n	80094f0 <vPortEnterCritical+0x54>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	b672      	cpsid	i
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	b662      	cpsie	i
 80094ea:	603b      	str	r3, [r7, #0]
}
 80094ec:	bf00      	nop
 80094ee:	e7fe      	b.n	80094ee <vPortEnterCritical+0x52>
	}
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	2000000c 	.word	0x2000000c
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800950a:	4b13      	ldr	r3, [pc, #76]	; (8009558 <vPortExitCritical+0x54>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10c      	bne.n	800952c <vPortExitCritical+0x28>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	b672      	cpsid	i
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	b662      	cpsie	i
 8009526:	607b      	str	r3, [r7, #4]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800952c:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <vPortExitCritical+0x54>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3b01      	subs	r3, #1
 8009532:	4a09      	ldr	r2, [pc, #36]	; (8009558 <vPortExitCritical+0x54>)
 8009534:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009536:	4b08      	ldr	r3, [pc, #32]	; (8009558 <vPortExitCritical+0x54>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <vPortExitCritical+0x46>
 800953e:	2300      	movs	r3, #0
 8009540:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009548:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	2000000c 	.word	0x2000000c
 800955c:	00000000 	.word	0x00000000

08009560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009560:	f3ef 8009 	mrs	r0, PSP
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	4b15      	ldr	r3, [pc, #84]	; (80095c0 <pxCurrentTCBConst>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	f01e 0f10 	tst.w	lr, #16
 8009570:	bf08      	it	eq
 8009572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957a:	6010      	str	r0, [r2, #0]
 800957c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009584:	b672      	cpsid	i
 8009586:	f380 8811 	msr	BASEPRI, r0
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	b662      	cpsie	i
 8009594:	f7ff fb20 	bl	8008bd8 <vTaskSwitchContext>
 8009598:	f04f 0000 	mov.w	r0, #0
 800959c:	f380 8811 	msr	BASEPRI, r0
 80095a0:	bc09      	pop	{r0, r3}
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	6808      	ldr	r0, [r1, #0]
 80095a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095aa:	f01e 0f10 	tst.w	lr, #16
 80095ae:	bf08      	it	eq
 80095b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095b4:	f380 8809 	msr	PSP, r0
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <pxCurrentTCBConst>:
 80095c0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop

080095c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	b672      	cpsid	i
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	b662      	cpsie	i
 80095e2:	607b      	str	r3, [r7, #4]
}
 80095e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095e6:	f7ff fa3d 	bl	8008a64 <xTaskIncrementTick>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095f0:	4b06      	ldr	r3, [pc, #24]	; (800960c <SysTick_Handler+0x44>)
 80095f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	2300      	movs	r3, #0
 80095fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	f383 8811 	msr	BASEPRI, r3
}
 8009602:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	e000ed04 	.word	0xe000ed04

08009610 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009614:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <vPortSetupTimerInterrupt+0x34>)
 8009616:	2200      	movs	r2, #0
 8009618:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <vPortSetupTimerInterrupt+0x38>)
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009620:	4b0a      	ldr	r3, [pc, #40]	; (800964c <vPortSetupTimerInterrupt+0x3c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <vPortSetupTimerInterrupt+0x40>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	099b      	lsrs	r3, r3, #6
 800962c:	4a09      	ldr	r2, [pc, #36]	; (8009654 <vPortSetupTimerInterrupt+0x44>)
 800962e:	3b01      	subs	r3, #1
 8009630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009632:	4b04      	ldr	r3, [pc, #16]	; (8009644 <vPortSetupTimerInterrupt+0x34>)
 8009634:	2207      	movs	r2, #7
 8009636:	601a      	str	r2, [r3, #0]
}
 8009638:	bf00      	nop
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	e000e010 	.word	0xe000e010
 8009648:	e000e018 	.word	0xe000e018
 800964c:	20000000 	.word	0x20000000
 8009650:	10624dd3 	.word	0x10624dd3
 8009654:	e000e014 	.word	0xe000e014

08009658 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009658:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009668 <vPortEnableVFP+0x10>
 800965c:	6801      	ldr	r1, [r0, #0]
 800965e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009662:	6001      	str	r1, [r0, #0]
 8009664:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009666:	bf00      	nop
 8009668:	e000ed88 	.word	0xe000ed88

0800966c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	; 0x28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009678:	f7ff f948 	bl	800890c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800967c:	4b5b      	ldr	r3, [pc, #364]	; (80097ec <pvPortMalloc+0x180>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009684:	f000 f91a 	bl	80098bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009688:	4b59      	ldr	r3, [pc, #356]	; (80097f0 <pvPortMalloc+0x184>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4013      	ands	r3, r2
 8009690:	2b00      	cmp	r3, #0
 8009692:	f040 8092 	bne.w	80097ba <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01f      	beq.n	80096dc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800969c:	2208      	movs	r2, #8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d016      	beq.n	80096dc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f023 0307 	bic.w	r3, r3, #7
 80096b4:	3308      	adds	r3, #8
 80096b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f003 0307 	and.w	r3, r3, #7
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00c      	beq.n	80096dc <pvPortMalloc+0x70>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c6:	b672      	cpsid	i
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	b662      	cpsie	i
 80096d6:	617b      	str	r3, [r7, #20]
}
 80096d8:	bf00      	nop
 80096da:	e7fe      	b.n	80096da <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d06b      	beq.n	80097ba <pvPortMalloc+0x14e>
 80096e2:	4b44      	ldr	r3, [pc, #272]	; (80097f4 <pvPortMalloc+0x188>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d866      	bhi.n	80097ba <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096ec:	4b42      	ldr	r3, [pc, #264]	; (80097f8 <pvPortMalloc+0x18c>)
 80096ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096f0:	4b41      	ldr	r3, [pc, #260]	; (80097f8 <pvPortMalloc+0x18c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096f6:	e004      	b.n	8009702 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	429a      	cmp	r2, r3
 800970a:	d903      	bls.n	8009714 <pvPortMalloc+0xa8>
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f1      	bne.n	80096f8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009714:	4b35      	ldr	r3, [pc, #212]	; (80097ec <pvPortMalloc+0x180>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971a:	429a      	cmp	r2, r3
 800971c:	d04d      	beq.n	80097ba <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2208      	movs	r2, #8
 8009724:	4413      	add	r3, r2
 8009726:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	685a      	ldr	r2, [r3, #4]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	1ad2      	subs	r2, r2, r3
 8009738:	2308      	movs	r3, #8
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	429a      	cmp	r2, r3
 800973e:	d921      	bls.n	8009784 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4413      	add	r3, r2
 8009746:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	f003 0307 	and.w	r3, r3, #7
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00c      	beq.n	800976c <pvPortMalloc+0x100>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	b672      	cpsid	i
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	b662      	cpsie	i
 8009766:	613b      	str	r3, [r7, #16]
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	1ad2      	subs	r2, r2, r3
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800977e:	69b8      	ldr	r0, [r7, #24]
 8009780:	f000 f8fe 	bl	8009980 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009784:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <pvPortMalloc+0x188>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	4a19      	ldr	r2, [pc, #100]	; (80097f4 <pvPortMalloc+0x188>)
 8009790:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009792:	4b18      	ldr	r3, [pc, #96]	; (80097f4 <pvPortMalloc+0x188>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4b19      	ldr	r3, [pc, #100]	; (80097fc <pvPortMalloc+0x190>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d203      	bcs.n	80097a6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800979e:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <pvPortMalloc+0x188>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a16      	ldr	r2, [pc, #88]	; (80097fc <pvPortMalloc+0x190>)
 80097a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	4b11      	ldr	r3, [pc, #68]	; (80097f0 <pvPortMalloc+0x184>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	431a      	orrs	r2, r3
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097ba:	f7ff f8b5 	bl	8008928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	f003 0307 	and.w	r3, r3, #7
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00c      	beq.n	80097e2 <pvPortMalloc+0x176>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	b672      	cpsid	i
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	b662      	cpsie	i
 80097dc:	60fb      	str	r3, [r7, #12]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <pvPortMalloc+0x174>
	return pvReturn;
 80097e2:	69fb      	ldr	r3, [r7, #28]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3728      	adds	r7, #40	; 0x28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20003fc0 	.word	0x20003fc0
 80097f0:	20003fcc 	.word	0x20003fcc
 80097f4:	20003fc4 	.word	0x20003fc4
 80097f8:	20003fb8 	.word	0x20003fb8
 80097fc:	20003fc8 	.word	0x20003fc8

08009800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d04c      	beq.n	80098ac <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009812:	2308      	movs	r3, #8
 8009814:	425b      	negs	r3, r3
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4413      	add	r3, r2
 800981a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	4b23      	ldr	r3, [pc, #140]	; (80098b4 <vPortFree+0xb4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4013      	ands	r3, r2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10c      	bne.n	8009848 <vPortFree+0x48>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	b672      	cpsid	i
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	b662      	cpsie	i
 8009842:	60fb      	str	r3, [r7, #12]
}
 8009844:	bf00      	nop
 8009846:	e7fe      	b.n	8009846 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00c      	beq.n	800986a <vPortFree+0x6a>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	b672      	cpsid	i
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	b662      	cpsie	i
 8009864:	60bb      	str	r3, [r7, #8]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	4b11      	ldr	r3, [pc, #68]	; (80098b4 <vPortFree+0xb4>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4013      	ands	r3, r2
 8009874:	2b00      	cmp	r3, #0
 8009876:	d019      	beq.n	80098ac <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d115      	bne.n	80098ac <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	685a      	ldr	r2, [r3, #4]
 8009884:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <vPortFree+0xb4>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	43db      	mvns	r3, r3
 800988a:	401a      	ands	r2, r3
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009890:	f7ff f83c 	bl	800890c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <vPortFree+0xb8>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4413      	add	r3, r2
 800989e:	4a06      	ldr	r2, [pc, #24]	; (80098b8 <vPortFree+0xb8>)
 80098a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098a2:	6938      	ldr	r0, [r7, #16]
 80098a4:	f000 f86c 	bl	8009980 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80098a8:	f7ff f83e 	bl	8008928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ac:	bf00      	nop
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20003fcc 	.word	0x20003fcc
 80098b8:	20003fc4 	.word	0x20003fc4

080098bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80098c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098c8:	4b27      	ldr	r3, [pc, #156]	; (8009968 <prvHeapInit+0xac>)
 80098ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f003 0307 	and.w	r3, r3, #7
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00c      	beq.n	80098f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3307      	adds	r3, #7
 80098da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 0307 	bic.w	r3, r3, #7
 80098e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	4a1f      	ldr	r2, [pc, #124]	; (8009968 <prvHeapInit+0xac>)
 80098ec:	4413      	add	r3, r2
 80098ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098f4:	4a1d      	ldr	r2, [pc, #116]	; (800996c <prvHeapInit+0xb0>)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098fa:	4b1c      	ldr	r3, [pc, #112]	; (800996c <prvHeapInit+0xb0>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	4413      	add	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009908:	2208      	movs	r2, #8
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0307 	bic.w	r3, r3, #7
 8009916:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4a15      	ldr	r2, [pc, #84]	; (8009970 <prvHeapInit+0xb4>)
 800991c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800991e:	4b14      	ldr	r3, [pc, #80]	; (8009970 <prvHeapInit+0xb4>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2200      	movs	r2, #0
 8009924:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009926:	4b12      	ldr	r3, [pc, #72]	; (8009970 <prvHeapInit+0xb4>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	1ad2      	subs	r2, r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800993c:	4b0c      	ldr	r3, [pc, #48]	; (8009970 <prvHeapInit+0xb4>)
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	4a0a      	ldr	r2, [pc, #40]	; (8009974 <prvHeapInit+0xb8>)
 800994a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	4a09      	ldr	r2, [pc, #36]	; (8009978 <prvHeapInit+0xbc>)
 8009952:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009954:	4b09      	ldr	r3, [pc, #36]	; (800997c <prvHeapInit+0xc0>)
 8009956:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800995a:	601a      	str	r2, [r3, #0]
}
 800995c:	bf00      	nop
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	200003b8 	.word	0x200003b8
 800996c:	20003fb8 	.word	0x20003fb8
 8009970:	20003fc0 	.word	0x20003fc0
 8009974:	20003fc8 	.word	0x20003fc8
 8009978:	20003fc4 	.word	0x20003fc4
 800997c:	20003fcc 	.word	0x20003fcc

08009980 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009988:	4b28      	ldr	r3, [pc, #160]	; (8009a2c <prvInsertBlockIntoFreeList+0xac>)
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	e002      	b.n	8009994 <prvInsertBlockIntoFreeList+0x14>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	429a      	cmp	r2, r3
 800999c:	d8f7      	bhi.n	800998e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	4413      	add	r3, r2
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d108      	bne.n	80099c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	441a      	add	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	441a      	add	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d118      	bne.n	8009a08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	4b15      	ldr	r3, [pc, #84]	; (8009a30 <prvInsertBlockIntoFreeList+0xb0>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d00d      	beq.n	80099fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	441a      	add	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	e008      	b.n	8009a10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099fe:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <prvInsertBlockIntoFreeList+0xb0>)
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	601a      	str	r2, [r3, #0]
 8009a06:	e003      	b.n	8009a10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d002      	beq.n	8009a1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a1e:	bf00      	nop
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	20003fb8 	.word	0x20003fb8
 8009a30:	20003fc0 	.word	0x20003fc0

08009a34 <__libc_init_array>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	4d0d      	ldr	r5, [pc, #52]	; (8009a6c <__libc_init_array+0x38>)
 8009a38:	4c0d      	ldr	r4, [pc, #52]	; (8009a70 <__libc_init_array+0x3c>)
 8009a3a:	1b64      	subs	r4, r4, r5
 8009a3c:	10a4      	asrs	r4, r4, #2
 8009a3e:	2600      	movs	r6, #0
 8009a40:	42a6      	cmp	r6, r4
 8009a42:	d109      	bne.n	8009a58 <__libc_init_array+0x24>
 8009a44:	4d0b      	ldr	r5, [pc, #44]	; (8009a74 <__libc_init_array+0x40>)
 8009a46:	4c0c      	ldr	r4, [pc, #48]	; (8009a78 <__libc_init_array+0x44>)
 8009a48:	f000 f82e 	bl	8009aa8 <_init>
 8009a4c:	1b64      	subs	r4, r4, r5
 8009a4e:	10a4      	asrs	r4, r4, #2
 8009a50:	2600      	movs	r6, #0
 8009a52:	42a6      	cmp	r6, r4
 8009a54:	d105      	bne.n	8009a62 <__libc_init_array+0x2e>
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5c:	4798      	blx	r3
 8009a5e:	3601      	adds	r6, #1
 8009a60:	e7ee      	b.n	8009a40 <__libc_init_array+0xc>
 8009a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a66:	4798      	blx	r3
 8009a68:	3601      	adds	r6, #1
 8009a6a:	e7f2      	b.n	8009a52 <__libc_init_array+0x1e>
 8009a6c:	08009b9c 	.word	0x08009b9c
 8009a70:	08009b9c 	.word	0x08009b9c
 8009a74:	08009b9c 	.word	0x08009b9c
 8009a78:	08009ba0 	.word	0x08009ba0

08009a7c <memcpy>:
 8009a7c:	440a      	add	r2, r1
 8009a7e:	4291      	cmp	r1, r2
 8009a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a84:	d100      	bne.n	8009a88 <memcpy+0xc>
 8009a86:	4770      	bx	lr
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a92:	4291      	cmp	r1, r2
 8009a94:	d1f9      	bne.n	8009a8a <memcpy+0xe>
 8009a96:	bd10      	pop	{r4, pc}

08009a98 <memset>:
 8009a98:	4402      	add	r2, r0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d100      	bne.n	8009aa2 <memset+0xa>
 8009aa0:	4770      	bx	lr
 8009aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa6:	e7f9      	b.n	8009a9c <memset+0x4>

08009aa8 <_init>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	bf00      	nop
 8009aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aae:	bc08      	pop	{r3}
 8009ab0:	469e      	mov	lr, r3
 8009ab2:	4770      	bx	lr

08009ab4 <_fini>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	bf00      	nop
 8009ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aba:	bc08      	pop	{r3}
 8009abc:	469e      	mov	lr, r3
 8009abe:	4770      	bx	lr
